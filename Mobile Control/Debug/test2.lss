
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000186  00800060  00005416  000054aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000141  008001e6  008001e6  00005630  2**0
                  ALLOC
  3 .stab         00006384  00000000  00000000  00005630  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000029ea  00000000  00000000  0000b9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000e39e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000e4fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000e68d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000106d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000117d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00012758  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000128d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00012b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__vector_6>
      1c:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__vector_7>
      20:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_8>
      24:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__vector_9>
      28:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_10>
      2c:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 32       	cpi	r26, 0x27	; 39
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <main>
      8a:	0c 94 09 2a 	jmp	0x5412	; 0x5412 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 eb       	ldi	r26, 0xB9	; 185
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 29 	jmp	0x53ae	; 0x53ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 29 	jmp	0x538e	; 0x538e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 29 	jmp	0x53c6	; 0x53c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 29 	jmp	0x538e	; 0x538e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 29 	jmp	0x53c6	; 0x53c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 eb       	ldi	r24, 0xB9	; 185
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 29 	jmp	0x53ae	; 0x53ae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 29 	jmp	0x5386	; 0x5386 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 eb       	ldi	r22, 0xB9	; 185
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 df 29 	jmp	0x53be	; 0x53be <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c7 29 	jmp	0x538e	; 0x538e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e3 29 	jmp	0x53c6	; 0x53c6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c7 29 	jmp	0x538e	; 0x538e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e3 29 	jmp	0x53c6	; 0x53c6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c7 29 	jmp	0x538e	; 0x538e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e3 29 	jmp	0x53c6	; 0x53c6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cb 29 	jmp	0x5396	; 0x5396 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e7 29 	jmp	0x53ce	; 0x53ce <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_voidInit>:
#include "UART_config.h"
#include "UART_interface.h"
#include "UART_private.h"

void UART_voidInit()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8UCSRCTemp = 0;
     ca8:	19 82       	std	Y+1, r1	; 0x01
    #if(TX_CIRCUIT == ENABLE)
        SET_BIT(UCSRB, UCSRB_TXEN);
     caa:	aa e2       	ldi	r26, 0x2A	; 42
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e2       	ldi	r30, 0x2A	; 42
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	88 60       	ori	r24, 0x08	; 8
     cb6:	8c 93       	st	X, r24
    #elif(TX_CIRCUIT == DISABLE)
        CLR_BIT(UCSRB, UCSRB_TXEN);
    #endif

    #if(RX_CIRCUIT == ENABLE)
        SET_BIT(UCSRB, UCSRB_RXEN);
     cb8:	aa e2       	ldi	r26, 0x2A	; 42
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	ea e2       	ldi	r30, 0x2A	; 42
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	80 61       	ori	r24, 0x10	; 16
     cc4:	8c 93       	st	X, r24
        CLR_BIT(Local_u8UCSRCTemp, UCSRA_UCSZ0);
        SET_BIT(Local_u8UCSRCTemp, UCSRA_UCSZ1);
        CLR_BIT(UCSRB, UCSRB_UCSZ2);

    #elif(UART_Character_SIZE == _8_BIT)
        SET_BIT(UBRRH, UBRRH_URSEL);
     cc6:	a0 e4       	ldi	r26, 0x40	; 64
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e0 e4       	ldi	r30, 0x40	; 64
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	80 68       	ori	r24, 0x80	; 128
     cd2:	8c 93       	st	X, r24
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UCSZ0);
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	82 60       	ori	r24, 0x02	; 2
     cd8:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UCSZ1);
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	84 60       	ori	r24, 0x04	; 4
     cde:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB, UCSRB_UCSZ2);
     ce0:	aa e2       	ldi	r26, 0x2A	; 42
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	ea e2       	ldi	r30, 0x2A	; 42
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	8b 7f       	andi	r24, 0xFB	; 251
     cec:	8c 93       	st	X, r24
        SET_BIT(UCSRB, UCSRB_UCSZ2);
    #endif

    /*Parity Mode Select*/
    #if(PARITY_MODE == DISABLE)
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	80 68       	ori	r24, 0x80	; 128
     cf2:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_UPM0);
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	8f 7e       	andi	r24, 0xEF	; 239
     cf8:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_UPM1);
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	8f 7d       	andi	r24, 0xDF	; 223
     cfe:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UPM1);
    #endif

    /*Stop Bit Select*/
    #if(STOP_BIT_SELECT == _1_BIT)
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	80 68       	ori	r24, 0x80	; 128
     d04:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_USBS);
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	87 7f       	andi	r24, 0xF7	; 247
     d0a:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
        SET_BIT(Local_u8UCSRCTemp, UCSRC_USBS);
    #endif
    /*USART Mode Select*/
    #if(USART_MODE_SELECT == ASYNCHRONOUS)
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	80 68       	ori	r24, 0x80	; 128
     d10:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_UMSEL);
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	8f 7b       	andi	r24, 0xBF	; 191
     d16:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UMSEL);
    #endif

    /*Boud Rate Select*/
    #if(BOUD_RATE == BOUD_9600)
        CLR_BIT(UBRRH, UBRRH_URSEL);
     d18:	a0 e4       	ldi	r26, 0x40	; 64
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e0 e4       	ldi	r30, 0x40	; 64
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	8c 93       	st	X, r24
        UBRRL = 51;
     d26:	e9 e2       	ldi	r30, 0x29	; 41
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	83 e3       	ldi	r24, 0x33	; 51
     d2c:	80 83       	st	Z, r24
        UBRRH = 0;
     d2e:	e0 e4       	ldi	r30, 0x40	; 64
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	10 82       	st	Z, r1

    /*Transmission Speed*/
    #if(TRANSMISSION_SPEED == DOUBLE_SPEED)
        SET_BIT(UCSRA, UCSRA_U2X);
    #elif(TRANSMISSION_SPEED == NO_DOUBLE_SPEED)
        CLR_BIT(UCSRA, UCSRA_U2X);
     d34:	ab e2       	ldi	r26, 0x2B	; 43
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	eb e2       	ldi	r30, 0x2B	; 43
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8d 7f       	andi	r24, 0xFD	; 253
     d40:	8c 93       	st	X, r24
    #endif
    UCSRC = Local_u8UCSRCTemp;
     d42:	e0 e4       	ldi	r30, 0x40	; 64
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	80 83       	st	Z, r24
}
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <UART_voidTransmitData>:

u8 TransmitedData = 0;
void UART_voidTransmitData(u16 Copy_u8Data)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	00 d0       	rcall	.+0      	; 0xd58 <UART_voidTransmitData+0x6>
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	9a 83       	std	Y+2, r25	; 0x02
     d5e:	89 83       	std	Y+1, r24	; 0x01
    while(GET_BIT(UCSRA, UCSRA_UDRE) == 0);
     d60:	eb e2       	ldi	r30, 0x2B	; 43
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	82 95       	swap	r24
     d68:	86 95       	lsr	r24
     d6a:	87 70       	andi	r24, 0x07	; 7
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	81 70       	andi	r24, 0x01	; 1
     d72:	90 70       	andi	r25, 0x00	; 0
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	a1 f3       	breq	.-24     	; 0xd60 <UART_voidTransmitData+0xe>
    UDR = Copy_u8Data;
     d78:	ec e2       	ldi	r30, 0x2C	; 44
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA, UCSRA_TXC) == 0);
     d80:	eb e2       	ldi	r30, 0x2B	; 43
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	82 95       	swap	r24
     d88:	86 95       	lsr	r24
     d8a:	86 95       	lsr	r24
     d8c:	83 70       	andi	r24, 0x03	; 3
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	81 70       	andi	r24, 0x01	; 1
     d94:	90 70       	andi	r25, 0x00	; 0
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	99 f3       	breq	.-26     	; 0xd80 <UART_voidTransmitData+0x2e>
    SET_BIT(UCSRA, UCSRA_TXC);
     d9a:	ab e2       	ldi	r26, 0x2B	; 43
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	eb e2       	ldi	r30, 0x2B	; 43
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	80 64       	ori	r24, 0x40	; 64
     da6:	8c 93       	st	X, r24
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <UART_voidReceiveData>:

u8 UART_voidReceiveData()
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA, UCSRA_RXC) == 0);
     dba:	eb e2       	ldi	r30, 0x2B	; 43
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	88 23       	and	r24, r24
     dc2:	dc f7       	brge	.-10     	; 0xdba <UART_voidReceiveData+0x8>
    return (UDR);
     dc4:	ec e2       	ldi	r30, 0x2C	; 44
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
}
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <UART_voidTransmitNumber>:

void UART_voidTransmitNumber(u32 Copy_u32Number)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	2d 97       	sbiw	r28, 0x0d	; 13
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	9d 87       	std	Y+13, r25	; 0x0d
     de6:	8c 87       	std	Y+12, r24	; 0x0c
    u8 Local_u8SpllitedNumber[10];
    s8 Local_s8LoopCounter = 0;
     de8:	19 82       	std	Y+1, r1	; 0x01
     dea:	1f c0       	rjmp	.+62     	; 0xe2a <UART_voidTransmitNumber+0x5a>
    while (Copy_u32Number != 0)
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	e8 2f       	mov	r30, r24
     df0:	ff 27       	eor	r31, r31
     df2:	e7 fd       	sbrc	r30, 7
     df4:	f0 95       	com	r31
     df6:	8c 85       	ldd	r24, Y+12	; 0x0c
     df8:	9d 85       	ldd	r25, Y+13	; 0x0d
     dfa:	2a e0       	ldi	r18, 0x0A	; 10
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	b9 01       	movw	r22, r18
     e00:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__udivmodhi4>
     e04:	28 2f       	mov	r18, r24
     e06:	ce 01       	movw	r24, r28
     e08:	02 96       	adiw	r24, 0x02	; 2
     e0a:	e8 0f       	add	r30, r24
     e0c:	f9 1f       	adc	r31, r25
     e0e:	20 83       	st	Z, r18
        Copy_u32Number /= 10;
     e10:	8c 85       	ldd	r24, Y+12	; 0x0c
     e12:	9d 85       	ldd	r25, Y+13	; 0x0d
     e14:	2a e0       	ldi	r18, 0x0A	; 10
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	b9 01       	movw	r22, r18
     e1a:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__udivmodhi4>
     e1e:	cb 01       	movw	r24, r22
     e20:	9d 87       	std	Y+13, r25	; 0x0d
     e22:	8c 87       	std	Y+12, r24	; 0x0c
        Local_s8LoopCounter++;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	89 83       	std	Y+1, r24	; 0x01

void UART_voidTransmitNumber(u32 Copy_u32Number)
{
    u8 Local_u8SpllitedNumber[10];
    s8 Local_s8LoopCounter = 0;
    while (Copy_u32Number != 0)
     e2a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e2c:	9d 85       	ldd	r25, Y+13	; 0x0d
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	e9 f6       	brne	.-70     	; 0xdec <UART_voidTransmitNumber+0x1c>
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	81 50       	subi	r24, 0x01	; 1
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	13 c0       	rjmp	.+38     	; 0xe60 <UART_voidTransmitNumber+0x90>
    while (Local_s8LoopCounter >= 0)
    {
        UART_voidTransmitData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	28 2f       	mov	r18, r24
     e3e:	33 27       	eor	r19, r19
     e40:	27 fd       	sbrc	r18, 7
     e42:	30 95       	com	r19
     e44:	ce 01       	movw	r24, r28
     e46:	02 96       	adiw	r24, 0x02	; 2
     e48:	fc 01       	movw	r30, r24
     e4a:	e2 0f       	add	r30, r18
     e4c:	f3 1f       	adc	r31, r19
     e4e:	80 81       	ld	r24, Z
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	c0 96       	adiw	r24, 0x30	; 48
     e56:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_voidTransmitData>
        Local_s8LoopCounter--;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	81 50       	subi	r24, 0x01	; 1
     e5e:	89 83       	std	Y+1, r24	; 0x01
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    while (Local_s8LoopCounter >= 0)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	88 23       	and	r24, r24
     e64:	54 f7       	brge	.-44     	; 0xe3a <UART_voidTransmitNumber+0x6a>
    {
        UART_voidTransmitData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
        Local_s8LoopCounter--;
    }  
}
     e66:	2d 96       	adiw	r28, 0x0d	; 13
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <UART_voidTransmitSrting>:

void UART_voidTransmitSrting(const u8 * Ref_pu8String)
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <UART_voidTransmitSrting+0x6>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	0c c0       	rjmp	.+24     	; 0xea0 <UART_voidTransmitSrting+0x28>
	while(* Ref_pu8String)
    {
		UART_voidTransmitData(* Ref_pu8String);
     e88:	e9 81       	ldd	r30, Y+1	; 0x01
     e8a:	fa 81       	ldd	r31, Y+2	; 0x02
     e8c:	80 81       	ld	r24, Z
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_voidTransmitData>
		Ref_pu8String++;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
    }  
}

void UART_voidTransmitSrting(const u8 * Ref_pu8String)
{
	while(* Ref_pu8String)
     ea0:	e9 81       	ldd	r30, Y+1	; 0x01
     ea2:	fa 81       	ldd	r31, Y+2	; 0x02
     ea4:	80 81       	ld	r24, Z
     ea6:	88 23       	and	r24, r24
     ea8:	79 f7       	brne	.-34     	; 0xe88 <UART_voidTransmitSrting+0x10>
    {
		UART_voidTransmitData(* Ref_pu8String);
		Ref_pu8String++;
	}
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <UART_viodReceiveString>:

u16 UART_viodReceiveString(u8 * Ref_pu8String)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <UART_viodReceiveString+0x6>
     eba:	00 d0       	rcall	.+0      	; 0xebc <UART_viodReceiveString+0x8>
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	9c 83       	std	Y+4, r25	; 0x04
     ec2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Data;
	u8 Length = 0;
     ec4:	19 82       	std	Y+1, r1	; 0x01
	UDR = 0;
     ec6:	ec e2       	ldi	r30, 0x2C	; 44
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	10 82       	st	Z, r1
	do
	{
		Data = UART_voidReceiveData();
     ecc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <UART_voidReceiveData>
     ed0:	8a 83       	std	Y+2, r24	; 0x02
		if(Data != '\n')
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	8a 30       	cpi	r24, 0x0A	; 10
     ed6:	99 f0       	breq	.+38     	; 0xefe <UART_viodReceiveString+0x4a>
		{
			Ref_pu8String[Length] = Data;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	fc 01       	movw	r30, r24
     ee4:	e2 0f       	add	r30, r18
     ee6:	f3 1f       	adc	r31, r19
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	80 83       	st	Z, r24
			Length++;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			Data = NULL_TERMINATOR;
			break;
		}
	}while (GET_BIT(UCSRA, UCSRA_RXC) == 0);
     ef2:	eb e2       	ldi	r30, 0x2B	; 43
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 23       	and	r24, r24
     efa:	44 f7       	brge	.-48     	; 0xecc <UART_viodReceiveString+0x18>
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <UART_viodReceiveString+0x4c>
			Ref_pu8String[Length] = Data;
			Length++;
		}
		else
		{
			Data = NULL_TERMINATOR;
     efe:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}
	}while (GET_BIT(UCSRA, UCSRA_RXC) == 0);
	//UART_voidTransmitSrting(Ref_pu8String);
	return(Length);
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <Clear_UDR>:
void Clear_UDR(void)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	UDR = 0;
     f1c:	ec e2       	ldi	r30, 0x2C	; 44
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	10 82       	st	Z, r1
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <UART_voidReceiveDataASynchronous>:



void(*UART_NotificationFunction)(u8 *) = NULL_POINTER;
void UART_voidReceiveDataASynchronous(void(*NotificationFunction)(u8 *))
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <UART_voidReceiveDataASynchronous+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
    UART_NotificationFunction = NotificationFunction;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	90 93 e8 01 	sts	0x01E8, r25
     f3e:	80 93 e7 01 	sts	0x01E7, r24
    SET_BIT(UCSRB, UCSRB_RXCIE);
     f42:	aa e2       	ldi	r26, 0x2A	; 42
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ea e2       	ldi	r30, 0x2A	; 42
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 68       	ori	r24, 0x80	; 128
     f4e:	8c 93       	st	X, r24
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <vector_13>:

u8 UART_u8Data = 0;
void vector_13 (void)   __attribute__((signal));
void vector_13 (void)
{
     f5a:	1f 92       	push	r1
     f5c:	0f 92       	push	r0
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
     f64:	2f 93       	push	r18
     f66:	3f 93       	push	r19
     f68:	4f 93       	push	r20
     f6a:	5f 93       	push	r21
     f6c:	6f 93       	push	r22
     f6e:	7f 93       	push	r23
     f70:	8f 93       	push	r24
     f72:	9f 93       	push	r25
     f74:	af 93       	push	r26
     f76:	bf 93       	push	r27
     f78:	ef 93       	push	r30
     f7a:	ff 93       	push	r31
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
    if(UART_NotificationFunction != NULL_POINTER)
     f84:	80 91 e7 01 	lds	r24, 0x01E7
     f88:	90 91 e8 01 	lds	r25, 0x01E8
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <vector_13+0x4e>
    {
            UART_u8Data = UDR;
     f90:	ec e2       	ldi	r30, 0x2C	; 44
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 93 e9 01 	sts	0x01E9, r24
            UART_NotificationFunction(&UART_u8Data);
     f9a:	e0 91 e7 01 	lds	r30, 0x01E7
     f9e:	f0 91 e8 01 	lds	r31, 0x01E8
     fa2:	89 ee       	ldi	r24, 0xE9	; 233
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	09 95       	icall
    }
    else
    {
        
    }
}
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	bf 91       	pop	r27
     fb2:	af 91       	pop	r26
     fb4:	9f 91       	pop	r25
     fb6:	8f 91       	pop	r24
     fb8:	7f 91       	pop	r23
     fba:	6f 91       	pop	r22
     fbc:	5f 91       	pop	r21
     fbe:	4f 91       	pop	r20
     fc0:	3f 91       	pop	r19
     fc2:	2f 91       	pop	r18
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <TWI_voidInitMaster>:
#include "TWI_private.h"
#include "TWI_config.h"

/*Set Master Address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	0f 92       	push	r0
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
     fda:	a6 e5       	ldi	r26, 0x56	; 86
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e6 e5       	ldi	r30, 0x56	; 86
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 64       	ori	r24, 0x40	; 64
     fe6:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWBR = 2*/
	TWBR = 2;
     fe8:	e0 e2       	ldi	r30, 0x20	; 32
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	CLR_BIT(TWSR, TWSR_TWPS0);
     ff0:	a1 e2       	ldi	r26, 0x21	; 33
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e1 e2       	ldi	r30, 0x21	; 33
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8e 7f       	andi	r24, 0xFE	; 254
     ffc:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
     ffe:	a1 e2       	ldi	r26, 0x21	; 33
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e1 e2       	ldi	r30, 0x21	; 33
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8d 7f       	andi	r24, 0xFD	; 253
    100a:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	88 23       	and	r24, r24
    1010:	29 f0       	breq	.+10     	; 0x101c <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/
		TWAR = (Copy_u8Address << 1);
    1012:	e2 e2       	ldi	r30, 0x22	; 34
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	88 0f       	add	r24, r24
    101a:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    101c:	a6 e5       	ldi	r26, 0x56	; 86
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e6 e5       	ldi	r30, 0x56	; 86
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	84 60       	ori	r24, 0x04	; 4
    1028:	8c 93       	st	X, r24
}
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWAR = Copy_u8Address << 1;
    103e:	e2 e2       	ldi	r30, 0x22	; 34
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	88 0f       	add	r24, r24
    1046:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    1048:	a6 e5       	ldi	r26, 0x56	; 86
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e6 e5       	ldi	r30, 0x56	; 86
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	80 64       	ori	r24, 0x40	; 64
    1054:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    1056:	a6 e5       	ldi	r26, 0x56	; 86
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e6 e5       	ldi	r30, 0x56	; 86
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	84 60       	ori	r24, 0x04	; 4
    1062:	8c 93       	st	X, r24
}
    1064:	0f 90       	pop	r0
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	0f 92       	push	r0
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1076:	19 82       	std	Y+1, r1	; 0x01
//	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    1078:	a6 e5       	ldi	r26, 0x56	; 86
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e6 e5       	ldi	r30, 0x56	; 86
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	80 64       	ori	r24, 0x40	; 64
    1084:	8c 93       	st	X, r24
	/*Send Start Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTA); 
    1086:	a6 e5       	ldi	r26, 0x56	; 86
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e6 e5       	ldi	r30, 0x56	; 86
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	80 62       	ori	r24, 0x20	; 32
    1092:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    1094:	a6 e5       	ldi	r26, 0x56	; 86
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e6 e5       	ldi	r30, 0x56	; 86
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	80 68       	ori	r24, 0x80	; 128
    10a0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    10a2:	e6 e5       	ldi	r30, 0x56	; 86
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	88 23       	and	r24, r24
    10aa:	dc f7       	brge	.-10     	; 0x10a2 <TWI_ErrorStatusSendStartConditionWithACK+0x36>

	if((TWSR & STATUS_BIT_MASK) != START_ACK)
    10ac:	e1 e2       	ldi	r30, 0x21	; 33
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	88 7f       	andi	r24, 0xF8	; 248
    10b8:	90 70       	andi	r25, 0x00	; 0
    10ba:	88 30       	cpi	r24, 0x08	; 8
    10bc:	91 05       	cpc	r25, r1
    10be:	11 f0       	breq	.+4      	; 0x10c4 <TWI_ErrorStatusSendStartConditionWithACK+0x58>
	{
		Local_ErrorStatus = StartConditionError;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c6:	0f 90       	pop	r0
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    10d8:	19 82       	std	Y+1, r1	; 0x01
	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
    10da:	a6 e5       	ldi	r26, 0x56	; 86
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e6 e5       	ldi	r30, 0x56	; 86
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	84 6a       	ori	r24, 0xA4	; 164
    10e6:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    10e8:	e6 e5       	ldi	r30, 0x56	; 86
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	88 23       	and	r24, r24
    10f0:	dc f7       	brge	.-10     	; 0x10e8 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
    10f2:	e1 e2       	ldi	r30, 0x21	; 33
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	88 7f       	andi	r24, 0xF8	; 248
    10fe:	90 70       	andi	r25, 0x00	; 0
    1100:	80 31       	cpi	r24, 0x10	; 16
    1102:	91 05       	cpc	r25, r1
    1104:	11 f0       	breq	.+4      	; 0x110a <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
    1106:	82 e0       	ldi	r24, 0x02	; 2
    1108:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    110a:	89 81       	ldd	r24, Y+1	; 0x01
}
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
    111a:	0f 92       	push	r0
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	8b 83       	std	Y+3, r24	; 0x03
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1122:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TWCRValue = 0;
    1124:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1);
    1126:	e3 e2       	ldi	r30, 0x23	; 35
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 0f       	add	r24, r24
    112e:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	CLR_BIT(TWDR, TWDR_TWD0);
    1130:	a3 e2       	ldi	r26, 0x23	; 35
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e3 e2       	ldi	r30, 0x23	; 35
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8e 7f       	andi	r24, 0xFE	; 254
    113c:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    113e:	a6 e5       	ldi	r26, 0x56	; 86
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e6 e5       	ldi	r30, 0x56	; 86
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8f 7d       	andi	r24, 0xDF	; 223
    114a:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    114c:	a6 e5       	ldi	r26, 0x56	; 86
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e6 e5       	ldi	r30, 0x56	; 86
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	80 68       	ori	r24, 0x80	; 128
    1158:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    115a:	e6 e5       	ldi	r30, 0x56	; 86
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	88 23       	and	r24, r24
    1162:	dc f7       	brge	.-10     	; 0x115a <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x46>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
    1164:	e1 e2       	ldi	r30, 0x21	; 33
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	88 2f       	mov	r24, r24
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	88 7f       	andi	r24, 0xF8	; 248
    1170:	90 70       	andi	r25, 0x00	; 0
    1172:	88 31       	cpi	r24, 0x18	; 24
    1174:	91 05       	cpc	r25, r1
    1176:	11 f0       	breq	.+4      	; 0x117c <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x68>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_ErrorStatus;
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <TWI_ErrorStatusSendSlaveAddressWithReadACK>:



TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1196:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    1198:	e3 e2       	ldi	r30, 0x23	; 35
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 0f       	add	r24, r24
    11a0:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	SET_BIT(TWDR, TWDR_TWD0);
    11a2:	a3 e2       	ldi	r26, 0x23	; 35
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e3 e2       	ldi	r30, 0x23	; 35
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	81 60       	ori	r24, 0x01	; 1
    11ae:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    11b0:	a6 e5       	ldi	r26, 0x56	; 86
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e6 e5       	ldi	r30, 0x56	; 86
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8f 7d       	andi	r24, 0xDF	; 223
    11bc:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    11be:	a6 e5       	ldi	r26, 0x56	; 86
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e6 e5       	ldi	r30, 0x56	; 86
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	80 68       	ori	r24, 0x80	; 128
    11ca:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    11cc:	e6 e5       	ldi	r30, 0x56	; 86
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	88 23       	and	r24, r24
    11d4:	dc f7       	brge	.-10     	; 0x11cc <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
    11d6:	e1 e2       	ldi	r30, 0x21	; 33
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	88 7f       	andi	r24, 0xF8	; 248
    11e2:	90 70       	andi	r25, 0x00	; 0
    11e4:	80 34       	cpi	r24, 0x40	; 64
    11e6:	91 05       	cpc	r25, r1
    11e8:	11 f0       	breq	.+4      	; 0x11ee <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
    11ea:	84 e0       	ldi	r24, 0x04	; 4
    11ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <TWI_ErrorStatusMasterWriteDataByteWithACK>:




TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1206:	19 82       	std	Y+1, r1	; 0x01


	/*Set The Data To The TWDR Register*/
	TWDR = Copy_u8DataByte;
    1208:	e3 e2       	ldi	r30, 0x23	; 35
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	80 83       	st	Z, r24



	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    1210:	a6 e5       	ldi	r26, 0x56	; 86
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e6 e5       	ldi	r30, 0x56	; 86
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 68       	ori	r24, 0x80	; 128
    121c:	8c 93       	st	X, r24


	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    121e:	e6 e5       	ldi	r30, 0x56	; 86
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	88 23       	and	r24, r24
    1226:	dc f7       	brge	.-10     	; 0x121e <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
    1228:	e1 e2       	ldi	r30, 0x21	; 33
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	88 7f       	andi	r24, 0xF8	; 248
    1234:	90 70       	andi	r25, 0x00	; 0
    1236:	88 32       	cpi	r24, 0x28	; 40
    1238:	91 05       	cpc	r25, r1
    123a:	11 f0       	breq	.+4      	; 0x1240 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
    123c:	85 e0       	ldi	r24, 0x05	; 5
    123e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    1240:	89 81       	ldd	r24, Y+1	; 0x01
}
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <TWI_ErrorStatusMasterReadDataByte>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByte(u8 * Copy_pu8ReceivedByte, u8 Copy_u8ACK)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <TWI_ErrorStatusMasterReadDataByte+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <TWI_ErrorStatusMasterReadDataByte+0x8>
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	9b 83       	std	Y+3, r25	; 0x03
    125a:	8a 83       	std	Y+2, r24	; 0x02
    125c:	6c 83       	std	Y+4, r22	; 0x04
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    125e:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	if(Copy_u8ACK == TWI_ACK)
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	29 f4       	brne	.+10     	; 0x1270 <TWI_ErrorStatusMasterReadDataByte+0x24>
	{
		TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN) | (1<<TWCR_TWEA);
    1266:	e6 e5       	ldi	r30, 0x56	; 86
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	84 ec       	ldi	r24, 0xC4	; 196
    126c:	80 83       	st	Z, r24
    126e:	07 c0       	rjmp	.+14     	; 0x127e <TWI_ErrorStatusMasterReadDataByte+0x32>
	}
	else if(Copy_u8ACK == TWI_NACK)
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	88 23       	and	r24, r24
    1274:	21 f4       	brne	.+8      	; 0x127e <TWI_ErrorStatusMasterReadDataByte+0x32>
	{
		TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    1276:	e6 e5       	ldi	r30, 0x56	; 86
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	84 e8       	ldi	r24, 0x84	; 132
    127c:	80 83       	st	Z, r24
	}
	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    127e:	e6 e5       	ldi	r30, 0x56	; 86
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	88 23       	and	r24, r24
    1286:	dc f7       	brge	.-10     	; 0x127e <TWI_ErrorStatusMasterReadDataByte+0x32>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    1288:	e1 e2       	ldi	r30, 0x21	; 33
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	88 7f       	andi	r24, 0xF8	; 248
    1294:	90 70       	andi	r25, 0x00	; 0
    1296:	80 35       	cpi	r24, 0x50	; 80
    1298:	91 05       	cpc	r25, r1
    129a:	19 f0       	breq	.+6      	; 0x12a2 <TWI_ErrorStatusMasterReadDataByte+0x56>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    129c:	86 e0       	ldi	r24, 0x06	; 6
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	13 c0       	rjmp	.+38     	; 0x12c8 <TWI_ErrorStatusMasterReadDataByte+0x7c>
	}
	else if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_NACK)
    12a2:	e1 e2       	ldi	r30, 0x21	; 33
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	88 7f       	andi	r24, 0xF8	; 248
    12ae:	90 70       	andi	r25, 0x00	; 0
    12b0:	88 35       	cpi	r24, 0x58	; 88
    12b2:	91 05       	cpc	r25, r1
    12b4:	19 f0       	breq	.+6      	; 0x12bc <TWI_ErrorStatusMasterReadDataByte+0x70>
	{
		Local_ErrorStatus = MasterReadByteWithNACKError;
    12b6:	87 e0       	ldi	r24, 0x07	; 7
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	06 c0       	rjmp	.+12     	; 0x12c8 <TWI_ErrorStatusMasterReadDataByte+0x7c>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    12bc:	e3 e2       	ldi	r30, 0x23	; 35
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	ea 81       	ldd	r30, Y+2	; 0x02
    12c4:	fb 81       	ldd	r31, Y+3	; 0x03
    12c6:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <TWI_ErrorStatusMasterReadDataByteWithACK>:

TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	00 d0       	rcall	.+0      	; 0x12de <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
    12de:	0f 92       	push	r0
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	9b 83       	std	Y+3, r25	; 0x03
    12e6:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    12e8:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    12ea:	a6 e5       	ldi	r26, 0x56	; 86
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e6 e5       	ldi	r30, 0x56	; 86
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 68       	ori	r24, 0x80	; 128
    12f6:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    12f8:	e6 e5       	ldi	r30, 0x56	; 86
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	88 23       	and	r24, r24
    1300:	dc f7       	brge	.-10     	; 0x12f8 <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>
	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    1302:	e1 e2       	ldi	r30, 0x21	; 33
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 7f       	andi	r24, 0xF8	; 248
    130e:	90 70       	andi	r25, 0x00	; 0
    1310:	80 35       	cpi	r24, 0x50	; 80
    1312:	91 05       	cpc	r25, r1
    1314:	19 f0       	breq	.+6      	; 0x131c <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    1316:	86 e0       	ldi	r24, 0x06	; 6
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    131c:	e3 e2       	ldi	r30, 0x23	; 35
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	ea 81       	ldd	r30, Y+2	; 0x02
    1324:	fb 81       	ldd	r31, Y+3	; 0x03
    1326:	80 83       	st	Z, r24
	}
	return Local_ErrorStatus;
    1328:	89 81       	ldd	r24, Y+1	; 0x01

}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62

	/*Send a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    133e:	a6 e5       	ldi	r26, 0x56	; 86
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e6 e5       	ldi	r30, 0x56	; 86
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 61       	ori	r24, 0x10	; 16
    134a:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    134c:	a6 e5       	ldi	r26, 0x56	; 86
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e6 e5       	ldi	r30, 0x56	; 86
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	80 68       	ori	r24, 0x80	; 128
    1358:	8c 93       	st	X, r24
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <TIMER_voidTimer0Init>:


         

void TIMER_voidTimer0Init(void)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    TCCR0 &= TIMER_PRESCALER_MASK_CLR;
    1368:	a3 e5       	ldi	r26, 0x53	; 83
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e3 e5       	ldi	r30, 0x53	; 83
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	88 7f       	andi	r24, 0xF8	; 248
    1374:	8c 93       	st	X, r24
    TCCR0 |= TIMER_COUNTER_PRESCALER_SELECT;
    1376:	a3 e5       	ldi	r26, 0x53	; 83
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e3 e5       	ldi	r30, 0x53	; 83
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	82 60       	ori	r24, 0x02	; 2
    1382:	8c 93       	st	X, r24

    TCCR0 &= TIMER0_SELECT_MODE_MASK_CLR;
    1384:	a3 e5       	ldi	r26, 0x53	; 83
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e3 e5       	ldi	r30, 0x53	; 83
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	87 7b       	andi	r24, 0xB7	; 183
    1390:	8c 93       	st	X, r24
    TCCR0 |= TIMER0_MODE;
    1392:	a3 e5       	ldi	r26, 0x53	; 83
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e3 e5       	ldi	r30, 0x53	; 83
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	88 64       	ori	r24, 0x48	; 72
    139e:	8c 93       	st	X, r24

    TCCR0 &= TIMER_SUB_MODE_MSK_CLR;
    13a0:	a3 e5       	ldi	r26, 0x53	; 83
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e3 e5       	ldi	r30, 0x53	; 83
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	8f 7c       	andi	r24, 0xCF	; 207
    13ac:	8c 93       	st	X, r24
    TCCR0 |= TIMER0_SELECT_SUB_MODE;
    13ae:	a3 e5       	ldi	r26, 0x53	; 83
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e3 e5       	ldi	r30, 0x53	; 83
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	80 62       	ori	r24, 0x20	; 32
    13ba:	8c 93       	st	X, r24
}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <TIMER_voiTimer0dSetPreloadValue>:


void TIMER_voiTimer0dSetPreloadValue (u8 Copy_PreloadValue)
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Copy_PreloadValue;
    13ce:	e2 e5       	ldi	r30, 0x52	; 82
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	80 83       	st	Z, r24
}
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <TIMER_voidTimer0SetOCRValue>:

void TIMER_voidTimer0SetOCRValue (u8 Copy_COMPValue)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = Copy_COMPValue;
    13ea:	ec e5       	ldi	r30, 0x5C	; 92
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	80 83       	st	Z, r24
}
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <TIMER_voidTimer0EnableInterrupt>:

void TIMER_voidTimer0EnableInterrupt(u8 Copy_u8Mode)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <TIMER_voidTimer0EnableInterrupt+0x6>
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8Mode)
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	3b 83       	std	Y+3, r19	; 0x03
    1410:	2a 83       	std	Y+2, r18	; 0x02
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	31 f0       	breq	.+12     	; 0x1426 <TIMER_voidTimer0EnableInterrupt+0x2c>
    141a:	2a 81       	ldd	r18, Y+2	; 0x02
    141c:	3b 81       	ldd	r19, Y+3	; 0x03
    141e:	21 30       	cpi	r18, 0x01	; 1
    1420:	31 05       	cpc	r19, r1
    1422:	49 f0       	breq	.+18     	; 0x1436 <TIMER_voidTimer0EnableInterrupt+0x3c>
    1424:	0f c0       	rjmp	.+30     	; 0x1444 <TIMER_voidTimer0EnableInterrupt+0x4a>
    {
    case OVF_MODE:
        SET_BIT(TIMSK, TIMSK_TOIE0);
    1426:	a9 e5       	ldi	r26, 0x59	; 89
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e9 e5       	ldi	r30, 0x59	; 89
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	81 60       	ori	r24, 0x01	; 1
    1432:	8c 93       	st	X, r24
    1434:	07 c0       	rjmp	.+14     	; 0x1444 <TIMER_voidTimer0EnableInterrupt+0x4a>
        break;
    case CTC_MODE:
        SET_BIT(TIMSK, TIMSK_OCIE0);
    1436:	a9 e5       	ldi	r26, 0x59	; 89
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e9 e5       	ldi	r30, 0x59	; 89
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	8c 93       	st	X, r24
        break;
    default:
        break;
    } 
}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <TIMER_voidTimer0DisableInterrupt>:

void TIMER_voidTimer0DisableInterrupt(u8 Copy_u8Mode)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <TIMER_voidTimer0DisableInterrupt+0x6>
    1456:	0f 92       	push	r0
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8Mode)
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	3b 83       	std	Y+3, r19	; 0x03
    1466:	2a 83       	std	Y+2, r18	; 0x02
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	9b 81       	ldd	r25, Y+3	; 0x03
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	31 f0       	breq	.+12     	; 0x147c <TIMER_voidTimer0DisableInterrupt+0x2c>
    1470:	2a 81       	ldd	r18, Y+2	; 0x02
    1472:	3b 81       	ldd	r19, Y+3	; 0x03
    1474:	21 30       	cpi	r18, 0x01	; 1
    1476:	31 05       	cpc	r19, r1
    1478:	49 f0       	breq	.+18     	; 0x148c <TIMER_voidTimer0DisableInterrupt+0x3c>
    147a:	0f c0       	rjmp	.+30     	; 0x149a <TIMER_voidTimer0DisableInterrupt+0x4a>
    {
    case OVF_MODE:
        CLR_BIT(TIMSK, TIMSK_TOIE0);
    147c:	a9 e5       	ldi	r26, 0x59	; 89
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e9 e5       	ldi	r30, 0x59	; 89
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8e 7f       	andi	r24, 0xFE	; 254
    1488:	8c 93       	st	X, r24
    148a:	07 c0       	rjmp	.+14     	; 0x149a <TIMER_voidTimer0DisableInterrupt+0x4a>
        break;
    case CTC_MODE:
        CLR_BIT(TIMSK, TIMSK_OCIE0);
    148c:	a9 e5       	ldi	r26, 0x59	; 89
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e9 e5       	ldi	r30, 0x59	; 89
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8d 7f       	andi	r24, 0xFD	; 253
    1498:	8c 93       	st	X, r24
        break;
    default:
        break;
    } 
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <TIMER_voidTimer0SetOVFCallBack>:


static void (* TIMER0_OVFNotification)(void) = NULL_POINTER;

void TIMER_voidTimer0SetOVFCallBack (void (* pvNotificationFunction)(void))
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <TIMER_voidTimer0SetOVFCallBack+0x6>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_OVFNotification = pvNotificationFunction;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	90 93 eb 01 	sts	0x01EB, r25
    14bc:	80 93 ea 01 	sts	0x01EA, r24
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <TIMER_voidTimer0SetCOMPFCallBack>:

static void (* TIMER0_COMPNotification)(void) = NULL_POINTER;

void TIMER_voidTimer0SetCOMPFCallBack (void (* pvNotificationFunction)(void))
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <TIMER_voidTimer0SetCOMPFCallBack+0x6>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_COMPNotification = pvNotificationFunction;
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	90 93 ed 01 	sts	0x01ED, r25
    14e0:	80 93 ec 01 	sts	0x01EC, r24
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <__vector_10>:


void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    if(TIMER0_COMPNotification != NULL_POINTER)
    1518:	80 91 ec 01 	lds	r24, 0x01EC
    151c:	90 91 ed 01 	lds	r25, 0x01ED
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	29 f0       	breq	.+10     	; 0x152e <__vector_10+0x40>
    {
        TIMER0_COMPNotification();
    1524:	e0 91 ec 01 	lds	r30, 0x01EC
    1528:	f0 91 ed 01 	lds	r31, 0x01ED
    152c:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    if(TIMER0_OVFNotification != NULL_POINTER)
    157e:	80 91 ea 01 	lds	r24, 0x01EA
    1582:	90 91 eb 01 	lds	r25, 0x01EB
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	29 f0       	breq	.+10     	; 0x1594 <__vector_11+0x40>
    {
        TIMER0_OVFNotification();
    158a:	e0 91 ea 01 	lds	r30, 0x01EA
    158e:	f0 91 eb 01 	lds	r31, 0x01EB
    1592:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <TIMER_voidTimer1Init>:
/**********************************************************************************************************/

/**********************************************TIMER_1*****************************************************/

void TIMER_voidTimer1Init(void)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    TCCR1B &= TIMER_PRESCALER_MASK_CLR;
    15c2:	ae e4       	ldi	r26, 0x4E	; 78
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	ee e4       	ldi	r30, 0x4E	; 78
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	88 7f       	andi	r24, 0xF8	; 248
    15ce:	8c 93       	st	X, r24
    TCCR1B |= TIMER_COUNTER_PRESCALER_SELECT;
    15d0:	ae e4       	ldi	r26, 0x4E	; 78
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ee e4       	ldi	r30, 0x4E	; 78
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	82 60       	ori	r24, 0x02	; 2
    15dc:	8c 93       	st	X, r24

    TCCR1A &= TIMER1_SELECT_MODE_MASK_CLR_A;
    15de:	af e4       	ldi	r26, 0x4F	; 79
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	ef e4       	ldi	r30, 0x4F	; 79
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8c 7f       	andi	r24, 0xFC	; 252
    15ea:	8c 93       	st	X, r24
    TCCR1A |= TIMER1_SELECT_MODE_A;
    15ec:	af e4       	ldi	r26, 0x4F	; 79
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	ef e4       	ldi	r30, 0x4F	; 79
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	82 60       	ori	r24, 0x02	; 2
    15f8:	8c 93       	st	X, r24

    TCCR1B &= TIMER1_SELECT_MODE_MASK_CLR_B;
    15fa:	ae e4       	ldi	r26, 0x4E	; 78
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ee e4       	ldi	r30, 0x4E	; 78
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	87 7e       	andi	r24, 0xE7	; 231
    1606:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_SELECT_MODE_B;
    1608:	ae e4       	ldi	r26, 0x4E	; 78
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	ee e4       	ldi	r30, 0x4E	; 78
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	88 61       	ori	r24, 0x18	; 24
    1614:	8c 93       	st	X, r24

    #if(OC1A_CHANNEL == ENABLE)

        TCCR1A &= TIMER1_SUB_MODE_MSK_CLR_A;
    1616:	af e4       	ldi	r26, 0x4F	; 79
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ef e4       	ldi	r30, 0x4F	; 79
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 73       	andi	r24, 0x3F	; 63
    1622:	8c 93       	st	X, r24
        TCCR1A |= TIMER1_SELECT_SUB_MODE_A;
    1624:	af e4       	ldi	r26, 0x4F	; 79
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ef e4       	ldi	r30, 0x4F	; 79
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	80 68       	ori	r24, 0x80	; 128
    1630:	8c 93       	st	X, r24
    
    #elif(OC1B_CHANNEL == DISABLE)

    #endif

}
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <TIMER_voidTimer1SetPreloadValue>:


void TIMER_voidTimer1SetPreloadValue(u16 Copy_u16PreloadValue)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <TIMER_voidTimer1SetPreloadValue+0x6>
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Copy_u16PreloadValue;
    1646:	ec e4       	ldi	r30, 0x4C	; 76
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	80 83       	st	Z, r24
}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <TIMER_voidTimer1SetOCRAMatchValue>:

void TIMER_voidTimer1SetOCRAMatchValue(u16 Copy_u16CompareMatchValue)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <TIMER_voidTimer1SetOCRAMatchValue+0x6>
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16CompareMatchValue;
    166a:	ea e4       	ldi	r30, 0x4A	; 74
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	80 83       	st	Z, r24
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <TIMER_voidTimer1SetOCRBMatchValue>:

void TIMER_voidTimer1SetOCRBMatchValue(u16 Copy_u16CompareMatchValue)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <TIMER_voidTimer1SetOCRBMatchValue+0x6>
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = Copy_u16CompareMatchValue;
    168e:	e8 e4       	ldi	r30, 0x48	; 72
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <TIMER_voidSetTopValue>:

void TIMER_voidSetTopValue(u16 Copy_u16TopValue)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <TIMER_voidSetTopValue+0x6>
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16TopValue;
    16b2:	e6 e4       	ldi	r30, 0x46	; 70
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <TIMER_voidTimer1EnableInterrupt>:


void TIMER_voidTimer1EnableInterrupt(u8 Copy_u8Mode)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <TIMER_voidTimer1EnableInterrupt+0x6>
    16ce:	0f 92       	push	r0
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8Mode)
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	3b 83       	std	Y+3, r19	; 0x03
    16de:	2a 83       	std	Y+2, r18	; 0x02
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	9b 81       	ldd	r25, Y+3	; 0x03
    16e4:	82 30       	cpi	r24, 0x02	; 2
    16e6:	91 05       	cpc	r25, r1
    16e8:	89 f0       	breq	.+34     	; 0x170c <TIMER_voidTimer1EnableInterrupt+0x44>
    16ea:	2a 81       	ldd	r18, Y+2	; 0x02
    16ec:	3b 81       	ldd	r19, Y+3	; 0x03
    16ee:	23 30       	cpi	r18, 0x03	; 3
    16f0:	31 05       	cpc	r19, r1
    16f2:	a1 f0       	breq	.+40     	; 0x171c <TIMER_voidTimer1EnableInterrupt+0x54>
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	9b 81       	ldd	r25, Y+3	; 0x03
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	b9 f4       	brne	.+46     	; 0x172a <TIMER_voidTimer1EnableInterrupt+0x62>
    {
    case OVF_MODE:
        SET_BIT(TIMSK, TIMSK_TOIE1);
    16fc:	a9 e5       	ldi	r26, 0x59	; 89
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e9 e5       	ldi	r30, 0x59	; 89
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	84 60       	ori	r24, 0x04	; 4
    1708:	8c 93       	st	X, r24
    170a:	0f c0       	rjmp	.+30     	; 0x172a <TIMER_voidTimer1EnableInterrupt+0x62>
        break;
    case OC1A_MODE:
        SET_BIT(TIMSK, TIMSK_OCIE1A);
    170c:	a9 e5       	ldi	r26, 0x59	; 89
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e9 e5       	ldi	r30, 0x59	; 89
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	80 61       	ori	r24, 0x10	; 16
    1718:	8c 93       	st	X, r24
    171a:	07 c0       	rjmp	.+14     	; 0x172a <TIMER_voidTimer1EnableInterrupt+0x62>
        break;
    case OC1B_MODE:
        SET_BIT(TIMSK, TIMSK_OCIE1B);
    171c:	a9 e5       	ldi	r26, 0x59	; 89
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e9 e5       	ldi	r30, 0x59	; 89
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	88 60       	ori	r24, 0x08	; 8
    1728:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <TIMER_voidTimer1DisableInterrupt>:

void TIMER_voidTimer1DisableInterrupt(u8 Copy_u8Mode)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	00 d0       	rcall	.+0      	; 0x173c <TIMER_voidTimer1DisableInterrupt+0x6>
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8Mode)
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	3b 83       	std	Y+3, r19	; 0x03
    174c:	2a 83       	std	Y+2, r18	; 0x02
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	9b 81       	ldd	r25, Y+3	; 0x03
    1752:	82 30       	cpi	r24, 0x02	; 2
    1754:	91 05       	cpc	r25, r1
    1756:	89 f0       	breq	.+34     	; 0x177a <TIMER_voidTimer1DisableInterrupt+0x44>
    1758:	2a 81       	ldd	r18, Y+2	; 0x02
    175a:	3b 81       	ldd	r19, Y+3	; 0x03
    175c:	23 30       	cpi	r18, 0x03	; 3
    175e:	31 05       	cpc	r19, r1
    1760:	a1 f0       	breq	.+40     	; 0x178a <TIMER_voidTimer1DisableInterrupt+0x54>
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	9b 81       	ldd	r25, Y+3	; 0x03
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	b9 f4       	brne	.+46     	; 0x1798 <TIMER_voidTimer1DisableInterrupt+0x62>
    {
    case OVF_MODE:
        CLR_BIT(TIMSK, TIMSK_TOIE1);
    176a:	a9 e5       	ldi	r26, 0x59	; 89
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e9 e5       	ldi	r30, 0x59	; 89
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	8b 7f       	andi	r24, 0xFB	; 251
    1776:	8c 93       	st	X, r24
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <TIMER_voidTimer1DisableInterrupt+0x62>
        break;
    case OC1A_MODE:
    	CLR_BIT(TIMSK, TIMSK_OCIE1A);
    177a:	a9 e5       	ldi	r26, 0x59	; 89
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e9 e5       	ldi	r30, 0x59	; 89
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8f 7e       	andi	r24, 0xEF	; 239
    1786:	8c 93       	st	X, r24
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <TIMER_voidTimer1DisableInterrupt+0x62>
    	break;
    case OC1B_MODE:
        CLR_BIT(TIMSK, TIMSK_OCIE1B);
    178a:	a9 e5       	ldi	r26, 0x59	; 89
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e9 e5       	ldi	r30, 0x59	; 89
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	87 7f       	andi	r24, 0xF7	; 247
    1796:	8c 93       	st	X, r24
        break;

    default:
        break;
    } 
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <ICU_voidSenceModetrigger>:

void ICU_voidSenceModetrigger(u8 Copy_u8Mode)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <ICU_voidSenceModetrigger+0x6>
    17aa:	0f 92       	push	r0
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8Mode)
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3b 83       	std	Y+3, r19	; 0x03
    17ba:	2a 83       	std	Y+2, r18	; 0x02
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	9b 81       	ldd	r25, Y+3	; 0x03
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	31 f0       	breq	.+12     	; 0x17d0 <ICU_voidSenceModetrigger+0x2c>
    17c4:	2a 81       	ldd	r18, Y+2	; 0x02
    17c6:	3b 81       	ldd	r19, Y+3	; 0x03
    17c8:	21 30       	cpi	r18, 0x01	; 1
    17ca:	31 05       	cpc	r19, r1
    17cc:	49 f0       	breq	.+18     	; 0x17e0 <ICU_voidSenceModetrigger+0x3c>
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <ICU_voidSenceModetrigger+0x4a>
    {
    case RISING_EDGE:
        SET_BIT(TCCR1B, TCCR1B_ICES1);
    17d0:	ae e4       	ldi	r26, 0x4E	; 78
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ee e4       	ldi	r30, 0x4E	; 78
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	80 64       	ori	r24, 0x40	; 64
    17dc:	8c 93       	st	X, r24
    17de:	07 c0       	rjmp	.+14     	; 0x17ee <ICU_voidSenceModetrigger+0x4a>
        break;
    case FALLING_EDGE:
        CLR_BIT(TCCR1B, TCCR1B_ICES1);
    17e0:	ae e4       	ldi	r26, 0x4E	; 78
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	ee e4       	ldi	r30, 0x4E	; 78
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8f 7b       	andi	r24, 0xBF	; 191
    17ec:	8c 93       	st	X, r24
        break;

    default:
    	break;
    }
}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <ICU_voidControlInterrupt>:

void ICU_voidControlInterrupt(u8 Copy_u8Mode)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <ICU_voidControlInterrupt+0x6>
    1800:	0f 92       	push	r0
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8Mode)
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3b 83       	std	Y+3, r19	; 0x03
    1810:	2a 83       	std	Y+2, r18	; 0x02
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	9b 81       	ldd	r25, Y+3	; 0x03
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	31 f0       	breq	.+12     	; 0x1826 <ICU_voidControlInterrupt+0x2c>
    181a:	2a 81       	ldd	r18, Y+2	; 0x02
    181c:	3b 81       	ldd	r19, Y+3	; 0x03
    181e:	21 30       	cpi	r18, 0x01	; 1
    1820:	31 05       	cpc	r19, r1
    1822:	49 f0       	breq	.+18     	; 0x1836 <ICU_voidControlInterrupt+0x3c>
    1824:	0f c0       	rjmp	.+30     	; 0x1844 <ICU_voidControlInterrupt+0x4a>
    {
    case ENABLE:
        SET_BIT(TIMSK, TIMSK_TICIE1);
    1826:	a9 e5       	ldi	r26, 0x59	; 89
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e9 e5       	ldi	r30, 0x59	; 89
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 62       	ori	r24, 0x20	; 32
    1832:	8c 93       	st	X, r24
    1834:	07 c0       	rjmp	.+14     	; 0x1844 <ICU_voidControlInterrupt+0x4a>
        break;
    case DISABLE:
        CLR_BIT(TIMSK, TIMSK_TICIE1);
    1836:	a9 e5       	ldi	r26, 0x59	; 89
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e9 e5       	ldi	r30, 0x59	; 89
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	8f 7d       	andi	r24, 0xDF	; 223
    1842:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <TIMER_voidTimer1SetOVFCallBack>:

static void (* TIMER1_OVFNotification)(void) = NULL_POINTER;

void TIMER_voidTimer1SetOVFCallBack (void (* pvNotificationFunction)(void))
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <TIMER_voidTimer1SetOVFCallBack+0x6>
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_OVFNotification = pvNotificationFunction;
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	90 93 ef 01 	sts	0x01EF, r25
    1866:	80 93 ee 01 	sts	0x01EE, r24
}
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <TIMER_voidTimer1SetCOMPACallBack>:

static void (* TIMER1_COMPANotification)(void) = NULL_POINTER;

void TIMER_voidTimer1SetCOMPACallBack (void (* pvNotificationFunction)(void))
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	00 d0       	rcall	.+0      	; 0x187a <TIMER_voidTimer1SetCOMPACallBack+0x6>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_COMPANotification = pvNotificationFunction;
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	90 93 f1 01 	sts	0x01F1, r25
    188a:	80 93 f0 01 	sts	0x01F0, r24
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <TIMER_voidTimer1SetCOMPBCallBack>:

static void (* TIMER1_COMPBNotification)(void) = NULL_POINTER;

void TIMER_voidTimer1SetCOMPBCallBack (void (* pvNotificationFunction)(void))
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <TIMER_voidTimer1SetCOMPBCallBack+0x6>
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_COMPBNotification = pvNotificationFunction;
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	90 93 f3 01 	sts	0x01F3, r25
    18ae:	80 93 f2 01 	sts	0x01F2, r24
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <ICU_voidCallBack>:

static void (* ICU_Notification)(void) = NULL_POINTER;

void ICU_voidCallBack (void (*pvNotificationFunction)(void))
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <ICU_voidCallBack+0x6>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
    ICU_Notification = pvNotificationFunction;
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	90 93 f5 01 	sts	0x01F5, r25
    18d2:	80 93 f4 01 	sts	0x01F4, r24
}
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <__vector_6>:

void __vector_6(void)  __attribute__ ((signal));
void __vector_6(void)
{
    18e0:	1f 92       	push	r1
    18e2:	0f 92       	push	r0
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	0f 92       	push	r0
    18e8:	11 24       	eor	r1, r1
    18ea:	2f 93       	push	r18
    18ec:	3f 93       	push	r19
    18ee:	4f 93       	push	r20
    18f0:	5f 93       	push	r21
    18f2:	6f 93       	push	r22
    18f4:	7f 93       	push	r23
    18f6:	8f 93       	push	r24
    18f8:	9f 93       	push	r25
    18fa:	af 93       	push	r26
    18fc:	bf 93       	push	r27
    18fe:	ef 93       	push	r30
    1900:	ff 93       	push	r31
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    if(ICU_Notification != NULL_POINTER)
    190a:	80 91 f4 01 	lds	r24, 0x01F4
    190e:	90 91 f5 01 	lds	r25, 0x01F5
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	29 f0       	breq	.+10     	; 0x1920 <__vector_6+0x40>
    {
        ICU_Notification();
    1916:	e0 91 f4 01 	lds	r30, 0x01F4
    191a:	f0 91 f5 01 	lds	r31, 0x01F5
    191e:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	ff 91       	pop	r31
    1926:	ef 91       	pop	r30
    1928:	bf 91       	pop	r27
    192a:	af 91       	pop	r26
    192c:	9f 91       	pop	r25
    192e:	8f 91       	pop	r24
    1930:	7f 91       	pop	r23
    1932:	6f 91       	pop	r22
    1934:	5f 91       	pop	r21
    1936:	4f 91       	pop	r20
    1938:	3f 91       	pop	r19
    193a:	2f 91       	pop	r18
    193c:	0f 90       	pop	r0
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	0f 90       	pop	r0
    1942:	1f 90       	pop	r1
    1944:	18 95       	reti

00001946 <__vector_7>:

void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
    1946:	1f 92       	push	r1
    1948:	0f 92       	push	r0
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	0f 92       	push	r0
    194e:	11 24       	eor	r1, r1
    1950:	2f 93       	push	r18
    1952:	3f 93       	push	r19
    1954:	4f 93       	push	r20
    1956:	5f 93       	push	r21
    1958:	6f 93       	push	r22
    195a:	7f 93       	push	r23
    195c:	8f 93       	push	r24
    195e:	9f 93       	push	r25
    1960:	af 93       	push	r26
    1962:	bf 93       	push	r27
    1964:	ef 93       	push	r30
    1966:	ff 93       	push	r31
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    if(TIMER1_COMPANotification != NULL_POINTER)
    1970:	80 91 f0 01 	lds	r24, 0x01F0
    1974:	90 91 f1 01 	lds	r25, 0x01F1
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	29 f0       	breq	.+10     	; 0x1986 <__vector_7+0x40>
    {
        TIMER1_COMPANotification();
    197c:	e0 91 f0 01 	lds	r30, 0x01F0
    1980:	f0 91 f1 01 	lds	r31, 0x01F1
    1984:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	7f 91       	pop	r23
    1998:	6f 91       	pop	r22
    199a:	5f 91       	pop	r21
    199c:	4f 91       	pop	r20
    199e:	3f 91       	pop	r19
    19a0:	2f 91       	pop	r18
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti

000019ac <__vector_8>:

void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    if(TIMER1_COMPBNotification != NULL_POINTER)
    19d6:	80 91 f2 01 	lds	r24, 0x01F2
    19da:	90 91 f3 01 	lds	r25, 0x01F3
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	29 f0       	breq	.+10     	; 0x19ec <__vector_8+0x40>
    {
        TIMER1_COMPBNotification();
    19e2:	e0 91 f2 01 	lds	r30, 0x01F2
    19e6:	f0 91 f3 01 	lds	r31, 0x01F3
    19ea:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	ff 91       	pop	r31
    19f2:	ef 91       	pop	r30
    19f4:	bf 91       	pop	r27
    19f6:	af 91       	pop	r26
    19f8:	9f 91       	pop	r25
    19fa:	8f 91       	pop	r24
    19fc:	7f 91       	pop	r23
    19fe:	6f 91       	pop	r22
    1a00:	5f 91       	pop	r21
    1a02:	4f 91       	pop	r20
    1a04:	3f 91       	pop	r19
    1a06:	2f 91       	pop	r18
    1a08:	0f 90       	pop	r0
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	0f 90       	pop	r0
    1a0e:	1f 90       	pop	r1
    1a10:	18 95       	reti

00001a12 <__vector_9>:

void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
    1a12:	1f 92       	push	r1
    1a14:	0f 92       	push	r0
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	0f 92       	push	r0
    1a1a:	11 24       	eor	r1, r1
    1a1c:	2f 93       	push	r18
    1a1e:	3f 93       	push	r19
    1a20:	4f 93       	push	r20
    1a22:	5f 93       	push	r21
    1a24:	6f 93       	push	r22
    1a26:	7f 93       	push	r23
    1a28:	8f 93       	push	r24
    1a2a:	9f 93       	push	r25
    1a2c:	af 93       	push	r26
    1a2e:	bf 93       	push	r27
    1a30:	ef 93       	push	r30
    1a32:	ff 93       	push	r31
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    if(TIMER1_OVFNotification != NULL_POINTER)
    1a3c:	80 91 ee 01 	lds	r24, 0x01EE
    1a40:	90 91 ef 01 	lds	r25, 0x01EF
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	29 f0       	breq	.+10     	; 0x1a52 <__vector_9+0x40>
    {
        TIMER1_OVFNotification();
    1a48:	e0 91 ee 01 	lds	r30, 0x01EE
    1a4c:	f0 91 ef 01 	lds	r31, 0x01EF
    1a50:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	ff 91       	pop	r31
    1a58:	ef 91       	pop	r30
    1a5a:	bf 91       	pop	r27
    1a5c:	af 91       	pop	r26
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	7f 91       	pop	r23
    1a64:	6f 91       	pop	r22
    1a66:	5f 91       	pop	r21
    1a68:	4f 91       	pop	r20
    1a6a:	3f 91       	pop	r19
    1a6c:	2f 91       	pop	r18
    1a6e:	0f 90       	pop	r0
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	0f 90       	pop	r0
    1a74:	1f 90       	pop	r1
    1a76:	18 95       	reti

00001a78 <TIMER_GetValueTCNT1>:

u16 TIMER_GetValueTCNT1(void)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
	return(TCNT1);
    1a80:	ec e4       	ldi	r30, 0x4C	; 76
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <TIMER_GetValueICR1>:

u16 TIMER_GetValueICR1(void)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
	return(ICR1);
    1a96:	e6 e4       	ldi	r30, 0x46	; 70
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <TIMER0_voidGetTCNT0Value>:

u8 TIMER0_voidGetTCNT0Value(void)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    return TCNT0;
    1aac:	e2 e5       	ldi	r30, 0x52	; 82
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <TIMER_voidSetBusyWait_COMPMode>:


void TIMER_voidSetBusyWait_COMPMode (u32 Copy_u32Timeout)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <TIMER_voidSetBusyWait_COMPMode+0x6>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <TIMER_voidSetBusyWait_COMPMode+0x8>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <TIMER_voidSetBusyWait_COMPMode+0xa>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    /*TIMER 2*/

    /*Set CTC Mode*/
    TCCR2 &= TIMER0_SELECT_MODE_MASK_CLR;
    1aca:	a5 e4       	ldi	r26, 0x45	; 69
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e5 e4       	ldi	r30, 0x45	; 69
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	87 7b       	andi	r24, 0xB7	; 183
    1ad6:	8c 93       	st	X, r24
    TCCR2 |= TIMER0_CTC_MODE_MSK;
    1ad8:	a5 e4       	ldi	r26, 0x45	; 69
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e5 e4       	ldi	r30, 0x45	; 69
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 60       	ori	r24, 0x08	; 8
    1ae4:	8c 93       	st	X, r24

    TCCR2 &= TIMER_PRESCALER_MASK_CLR;
    1ae6:	a5 e4       	ldi	r26, 0x45	; 69
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e5 e4       	ldi	r30, 0x45	; 69
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	88 7f       	andi	r24, 0xF8	; 248
    1af2:	8c 93       	st	X, r24
    TCCR2 |= TIMER_PRESCALER_DIV_BY_64;
    1af4:	a5 e4       	ldi	r26, 0x45	; 69
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e5 e4       	ldi	r30, 0x45	; 69
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	83 60       	ori	r24, 0x03	; 3
    1b00:	8c 93       	st	X, r24

	OCR2 = 125;
    1b02:	ec e5       	ldi	r30, 0x5C	; 92
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	8d e7       	ldi	r24, 0x7D	; 125
    1b08:	80 83       	st	Z, r24

    u8 Local_u8TCCR2OldValue = TCCR2;
    1b0a:	e5 e4       	ldi	r30, 0x45	; 69
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8OCR2OldValue = OCR2;
    1b12:	ec e5       	ldi	r30, 0x5C	; 92
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	8b 83       	std	Y+3, r24	; 0x03

    u32 Local_u32TicksToWait = 0;
    1b1a:	1a 82       	std	Y+2, r1	; 0x02
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    1b1e:	17 c0       	rjmp	.+46     	; 0x1b4e <TIMER_voidSetBusyWait_COMPMode+0x96>
    while(Local_u32TicksToWait <= Copy_u32Timeout)
    {
        while(GET_BIT(TIFR, TIFR_OCF2) == 0);
    1b20:	e8 e5       	ldi	r30, 0x58	; 88
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	80 78       	andi	r24, 0x80	; 128
    1b2a:	90 70       	andi	r25, 0x00	; 0
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	c1 f3       	breq	.-16     	; 0x1b20 <TIMER_voidSetBusyWait_COMPMode+0x68>
        SET_BIT(TIFR, TIFR_OCF2);
    1b30:	a8 e5       	ldi	r26, 0x58	; 88
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e8 e5       	ldi	r30, 0x58	; 88
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	80 68       	ori	r24, 0x80	; 128
    1b3e:	11 96       	adiw	r26, 0x01	; 1
    1b40:	9c 93       	st	X, r25
    1b42:	8e 93       	st	-X, r24
        Local_u32TicksToWait++;
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01

    u8 Local_u8TCCR2OldValue = TCCR2;
    u8 Local_u8OCR2OldValue = OCR2;

    u32 Local_u32TicksToWait = 0;
    while(Local_u32TicksToWait <= Copy_u32Timeout)
    1b4e:	29 81       	ldd	r18, Y+1	; 0x01
    1b50:	3a 81       	ldd	r19, Y+2	; 0x02
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	82 17       	cp	r24, r18
    1b58:	93 07       	cpc	r25, r19
    1b5a:	10 f7       	brcc	.-60     	; 0x1b20 <TIMER_voidSetBusyWait_COMPMode+0x68>
        while(GET_BIT(TIFR, TIFR_OCF2) == 0);
        SET_BIT(TIFR, TIFR_OCF2);
        Local_u32TicksToWait++;
    }

    TCCR2 = Local_u8TCCR2OldValue;
    1b5c:	e5 e4       	ldi	r30, 0x45	; 69
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	80 83       	st	Z, r24
    OCR2 = Local_u8OCR2OldValue;
    1b64:	ec e5       	ldi	r30, 0x5C	; 92
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	80 83       	st	Z, r24
}
    1b6c:	26 96       	adiw	r28, 0x06	; 6
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <SPI_voidInit>:
#include "SPI_private.h"
#include "SPI_config.h"
#include "SPI_interface.h"

void SPI_voidInit()
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    /* Clock Rate */
    #if(SPI_CLOCK_RATE == SPI_CLOCK_RATE_DIV_BY_2)
        SET_BIT(SPSR, SPSR_SPI2X);
    1b86:	ae e2       	ldi	r26, 0x2E	; 46
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	ee e2       	ldi	r30, 0x2E	; 46
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	81 60       	ori	r24, 0x01	; 1
    1b92:	8c 93       	st	X, r24
        CLR_BIT(SPCR, SPCR_SPR1);
    1b94:	ad e2       	ldi	r26, 0x2D	; 45
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	ed e2       	ldi	r30, 0x2D	; 45
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8d 7f       	andi	r24, 0xFD	; 253
    1ba0:	8c 93       	st	X, r24
        CLR_BIT(SPCR, SPCR_SPR0);
    1ba2:	ad e2       	ldi	r26, 0x2D	; 45
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	ed e2       	ldi	r30, 0x2D	; 45
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	8e 7f       	andi	r24, 0xFE	; 254
    1bae:	8c 93       	st	X, r24

    #endif

    /* CLOCK POLARITY */
    #if(CLOCK_POLARITY == CLOCK_POLARITY_RISING_EDGE)
        CLR_BIT(SPCR, SPCR_CPOL);
    1bb0:	ad e2       	ldi	r26, 0x2D	; 45
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ed e2       	ldi	r30, 0x2D	; 45
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	87 7f       	andi	r24, 0xF7	; 247
    1bbc:	8c 93       	st	X, r24
    #elif(CLOCK_POLARITY == CLOCK_POLARITY_FALLING_EDGE)
        SET_BIT(SPCR, SPCR_CPOL);
    #endif
    /* CLOCK PHASE */
    #if(CLOCK_PHASE == CLOCK_PHASE_SAMPLE)
        CLR_BIT(SPCR, SPCR_CPHA);
    1bbe:	ad e2       	ldi	r26, 0x2D	; 45
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	ed e2       	ldi	r30, 0x2D	; 45
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8b 7f       	andi	r24, 0xFB	; 251
    1bca:	8c 93       	st	X, r24
    #elif(CLOCK_PHASE == CLOCK_PHASE_SETUP)
        SET_BIT(SPCR, SPCR_CPHA);
    #endif
}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <SPI_voidTranceive>:

u8 SPI_voidTranceive (u8 Copy_u8Data)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	0f 92       	push	r0
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    SPDR = Copy_u8Data;
    1bde:	ef e2       	ldi	r30, 0x2F	; 47
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	80 83       	st	Z, r24
    while (!GET_BIT(SPSR, SPSR_SPIF));
    1be6:	ee e2       	ldi	r30, 0x2E	; 46
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	88 23       	and	r24, r24
    1bee:	dc f7       	brge	.-10     	; 0x1be6 <SPI_voidTranceive+0x14>
    return (SPDR);
    1bf0:	ef e2       	ldi	r30, 0x2F	; 47
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
}
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <SPI_voidSetCallback>:

void (* SPI_Notification)(u8 *) = NULL_POINTER;
void SPI_voidSetCallback (void (* Notification)(u8 *))
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <SPI_voidSetCallback+0x6>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    SPI_Notification = Notification;
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	90 93 f7 01 	sts	0x01F7, r25
    1c14:	80 93 f6 01 	sts	0x01F6, r24
}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <vector_12>:

u8 SPI_u8StoreData = 0;
void vector_12 (void)  __attribute__((signal));
void vector_12 (void)
{
    1c22:	1f 92       	push	r1
    1c24:	0f 92       	push	r0
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	0f 92       	push	r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	2f 93       	push	r18
    1c2e:	3f 93       	push	r19
    1c30:	4f 93       	push	r20
    1c32:	5f 93       	push	r21
    1c34:	6f 93       	push	r22
    1c36:	7f 93       	push	r23
    1c38:	8f 93       	push	r24
    1c3a:	9f 93       	push	r25
    1c3c:	af 93       	push	r26
    1c3e:	bf 93       	push	r27
    1c40:	ef 93       	push	r30
    1c42:	ff 93       	push	r31
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    if(SPI_Notification != NULL_POINTER)
    1c4c:	80 91 f6 01 	lds	r24, 0x01F6
    1c50:	90 91 f7 01 	lds	r25, 0x01F7
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	61 f0       	breq	.+24     	; 0x1c70 <vector_12+0x4e>
    {
        SPI_u8StoreData = SPDR;
    1c58:	ef e2       	ldi	r30, 0x2F	; 47
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	80 93 f8 01 	sts	0x01F8, r24
        SPI_Notification(&SPI_u8StoreData);
    1c62:	e0 91 f6 01 	lds	r30, 0x01F6
    1c66:	f0 91 f7 01 	lds	r31, 0x01F7
    1c6a:	88 ef       	ldi	r24, 0xF8	; 248
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	ff 91       	pop	r31
    1c76:	ef 91       	pop	r30
    1c78:	bf 91       	pop	r27
    1c7a:	af 91       	pop	r26
    1c7c:	9f 91       	pop	r25
    1c7e:	8f 91       	pop	r24
    1c80:	7f 91       	pop	r23
    1c82:	6f 91       	pop	r22
    1c84:	5f 91       	pop	r21
    1c86:	4f 91       	pop	r20
    1c88:	3f 91       	pop	r19
    1c8a:	2f 91       	pop	r18
    1c8c:	0f 90       	pop	r0
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	0f 90       	pop	r0
    1c92:	1f 90       	pop	r1
    1c94:	18 95       	reti

00001c96 <GIE_voidEnableGlobalInterrupt>:
#include "GIE_config.h"



void GIE_voidEnableGlobalInterrupt(void)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    /*Set The I_BIT To Enable The Global Intterupt*/
    SET_BIT(SREG, SREG_I);
    1c9e:	af e5       	ldi	r26, 0x5F	; 95
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ef e5       	ldi	r30, 0x5F	; 95
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	80 68       	ori	r24, 0x80	; 128
    1caa:	8c 93       	st	X, r24
}
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <GIE_voidDisableGlobalInterrupt>:


void GIE_voidDisableGlobalInterrupt(void)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    /*Set The I_BIT To Enable The Global Intterupt*/
    CLR_BIT(SREG, SREG_I);
    1cba:	af e5       	ldi	r26, 0x5F	; 95
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	ef e5       	ldi	r30, 0x5F	; 95
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8f 77       	andi	r24, 0x7F	; 127
    1cc6:	8c 93       	st	X, r24
}
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <EXTI_voidInit>:


static void (*EXTI_INT0_Function)(void) = NULL_POINTER;

void EXTI_voidInit(void)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    #if EXTI_INT0_ENABLE == EXTI_ENABLE
        /*Enable GICR*/
        SET_BIT(GICR, GICR_INT0);
    1cd6:	ab e5       	ldi	r26, 0x5B	; 91
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	eb e5       	ldi	r30, 0x5B	; 91
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 64       	ori	r24, 0x40	; 64
    1ce2:	8c 93       	st	X, r24
        #if EXTI_INT0_SENSE_MODE == EXTI_RISING_EDGE
            SET_BIT(MCUCR, MCUCR_ISC00);
    1ce4:	a5 e5       	ldi	r26, 0x55	; 85
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e5 e5       	ldi	r30, 0x55	; 85
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	81 60       	ori	r24, 0x01	; 1
    1cf0:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC01);
    1cf2:	a5 e5       	ldi	r26, 0x55	; 85
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e5 e5       	ldi	r30, 0x55	; 85
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	82 60       	ori	r24, 0x02	; 2
    1cfe:	8c 93       	st	X, r24
        #else

        #endif
    #elif EXTI_INT1_ENABLE == EXTI_DISABLE
        /*Disable GICR*/
        CLR_BIT(GICR, GICR_INT0);
    1d00:	ab e5       	ldi	r26, 0x5B	; 91
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	eb e5       	ldi	r30, 0x5B	; 91
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8f 7b       	andi	r24, 0xBF	; 191
    1d0c:	8c 93       	st	X, r24
        #else

        #endif
    #elif EXTI_INT2_ENABLE == EXTI_DISABLE
        /*Disable GICR*/
        CLR_BIT(GICR, GICR_INT0);
    1d0e:	ab e5       	ldi	r26, 0x5B	; 91
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	eb e5       	ldi	r30, 0x5B	; 91
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	8f 7b       	andi	r24, 0xBF	; 191
    1d1a:	8c 93       	st	X, r24

    #endif

    

}
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <EXTI_voidChangeSenceMode>:

void EXTI_voidChangeSenceMode(u8 Copy_u8InterruptNum, u8 Copy_u8SignalSence)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	2a 97       	sbiw	r28, 0x0a	; 10
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8InterruptNum)
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	3a 87       	std	Y+10, r19	; 0x0a
    1d42:	29 87       	std	Y+9, r18	; 0x09
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <EXTI_voidChangeSenceMode+0x2e>
    1d4e:	65 c0       	rjmp	.+202    	; 0x1e1a <EXTI_voidChangeSenceMode+0xf8>
    1d50:	29 85       	ldd	r18, Y+9	; 0x09
    1d52:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d54:	23 30       	cpi	r18, 0x03	; 3
    1d56:	31 05       	cpc	r19, r1
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <EXTI_voidChangeSenceMode+0x3a>
    1d5a:	b9 c0       	rjmp	.+370    	; 0x1ece <EXTI_voidChangeSenceMode+0x1ac>
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <EXTI_voidChangeSenceMode+0x44>
    1d64:	d3 c0       	rjmp	.+422    	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
    {
    case EXTI_INT0:
        switch (Copy_u8SignalSence)
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	38 87       	std	Y+8, r19	; 0x08
    1d6e:	2f 83       	std	Y+7, r18	; 0x07
    1d70:	8f 81       	ldd	r24, Y+7	; 0x07
    1d72:	98 85       	ldd	r25, Y+8	; 0x08
    1d74:	82 30       	cpi	r24, 0x02	; 2
    1d76:	91 05       	cpc	r25, r1
    1d78:	29 f1       	breq	.+74     	; 0x1dc4 <EXTI_voidChangeSenceMode+0xa2>
    1d7a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d7c:	38 85       	ldd	r19, Y+8	; 0x08
    1d7e:	23 30       	cpi	r18, 0x03	; 3
    1d80:	31 05       	cpc	r19, r1
    1d82:	34 f4       	brge	.+12     	; 0x1d90 <EXTI_voidChangeSenceMode+0x6e>
    1d84:	8f 81       	ldd	r24, Y+7	; 0x07
    1d86:	98 85       	ldd	r25, Y+8	; 0x08
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	61 f0       	breq	.+24     	; 0x1da6 <EXTI_voidChangeSenceMode+0x84>
    1d8e:	be c0       	rjmp	.+380    	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
    1d90:	2f 81       	ldd	r18, Y+7	; 0x07
    1d92:	38 85       	ldd	r19, Y+8	; 0x08
    1d94:	23 30       	cpi	r18, 0x03	; 3
    1d96:	31 05       	cpc	r19, r1
    1d98:	19 f1       	breq	.+70     	; 0x1de0 <EXTI_voidChangeSenceMode+0xbe>
    1d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9c:	98 85       	ldd	r25, Y+8	; 0x08
    1d9e:	84 30       	cpi	r24, 0x04	; 4
    1da0:	91 05       	cpc	r25, r1
    1da2:	61 f1       	breq	.+88     	; 0x1dfc <EXTI_voidChangeSenceMode+0xda>
    1da4:	b3 c0       	rjmp	.+358    	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
        {
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, MCUCR_ISC00);
    1da6:	a5 e5       	ldi	r26, 0x55	; 85
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e5 e5       	ldi	r30, 0x55	; 85
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	81 60       	ori	r24, 0x01	; 1
    1db2:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC01);
    1db4:	a5 e5       	ldi	r26, 0x55	; 85
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e5 e5       	ldi	r30, 0x55	; 85
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	82 60       	ori	r24, 0x02	; 2
    1dc0:	8c 93       	st	X, r24
    1dc2:	a4 c0       	rjmp	.+328    	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCR_ISC00);
    1dc4:	a5 e5       	ldi	r26, 0x55	; 85
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e5 e5       	ldi	r30, 0x55	; 85
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	8e 7f       	andi	r24, 0xFE	; 254
    1dd0:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC01);
    1dd2:	a5 e5       	ldi	r26, 0x55	; 85
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e5 e5       	ldi	r30, 0x55	; 85
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	82 60       	ori	r24, 0x02	; 2
    1dde:	8c 93       	st	X, r24
        case EXTI_ON_CHANGE:
            SET_BIT(MCUCR, MCUCR_ISC00);
    1de0:	a5 e5       	ldi	r26, 0x55	; 85
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e5 e5       	ldi	r30, 0x55	; 85
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	81 60       	ori	r24, 0x01	; 1
    1dec:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC01);
    1dee:	a5 e5       	ldi	r26, 0x55	; 85
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e5 e5       	ldi	r30, 0x55	; 85
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	8d 7f       	andi	r24, 0xFD	; 253
    1dfa:	8c 93       	st	X, r24
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, MCUCR_ISC00);
    1dfc:	a5 e5       	ldi	r26, 0x55	; 85
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e5 e5       	ldi	r30, 0x55	; 85
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	8e 7f       	andi	r24, 0xFE	; 254
    1e08:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC01);
    1e0a:	a5 e5       	ldi	r26, 0x55	; 85
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e5 e5       	ldi	r30, 0x55	; 85
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	8d 7f       	andi	r24, 0xFD	; 253
    1e16:	8c 93       	st	X, r24
    1e18:	79 c0       	rjmp	.+242    	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
        default:
            break; 
        }
        break;
    case EXTI_INT1:
    switch (Copy_u8SignalSence)
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	3e 83       	std	Y+6, r19	; 0x06
    1e22:	2d 83       	std	Y+5, r18	; 0x05
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	82 30       	cpi	r24, 0x02	; 2
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	29 f1       	breq	.+74     	; 0x1e78 <EXTI_voidChangeSenceMode+0x156>
    1e2e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e30:	3e 81       	ldd	r19, Y+6	; 0x06
    1e32:	23 30       	cpi	r18, 0x03	; 3
    1e34:	31 05       	cpc	r19, r1
    1e36:	34 f4       	brge	.+12     	; 0x1e44 <EXTI_voidChangeSenceMode+0x122>
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	91 05       	cpc	r25, r1
    1e40:	61 f0       	breq	.+24     	; 0x1e5a <EXTI_voidChangeSenceMode+0x138>
    1e42:	64 c0       	rjmp	.+200    	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
    1e44:	2d 81       	ldd	r18, Y+5	; 0x05
    1e46:	3e 81       	ldd	r19, Y+6	; 0x06
    1e48:	23 30       	cpi	r18, 0x03	; 3
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	19 f1       	breq	.+70     	; 0x1e94 <EXTI_voidChangeSenceMode+0x172>
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	84 30       	cpi	r24, 0x04	; 4
    1e54:	91 05       	cpc	r25, r1
    1e56:	61 f1       	breq	.+88     	; 0x1eb0 <EXTI_voidChangeSenceMode+0x18e>
    1e58:	59 c0       	rjmp	.+178    	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
        {
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, MCUCR_ISC10);
    1e5a:	a5 e5       	ldi	r26, 0x55	; 85
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e5 e5       	ldi	r30, 0x55	; 85
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	84 60       	ori	r24, 0x04	; 4
    1e66:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC11);
    1e68:	a5 e5       	ldi	r26, 0x55	; 85
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e5 e5       	ldi	r30, 0x55	; 85
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	88 60       	ori	r24, 0x08	; 8
    1e74:	8c 93       	st	X, r24
    1e76:	4a c0       	rjmp	.+148    	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCR_ISC10);
    1e78:	a5 e5       	ldi	r26, 0x55	; 85
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e5 e5       	ldi	r30, 0x55	; 85
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8b 7f       	andi	r24, 0xFB	; 251
    1e84:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC11);
    1e86:	a5 e5       	ldi	r26, 0x55	; 85
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e5 e5       	ldi	r30, 0x55	; 85
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 60       	ori	r24, 0x08	; 8
    1e92:	8c 93       	st	X, r24
        case EXTI_ON_CHANGE:
            SET_BIT(MCUCR, MCUCR_ISC10);
    1e94:	a5 e5       	ldi	r26, 0x55	; 85
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e5 e5       	ldi	r30, 0x55	; 85
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	84 60       	ori	r24, 0x04	; 4
    1ea0:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC11);
    1ea2:	a5 e5       	ldi	r26, 0x55	; 85
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e5 e5       	ldi	r30, 0x55	; 85
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	87 7f       	andi	r24, 0xF7	; 247
    1eae:	8c 93       	st	X, r24
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, MCUCR_ISC10);
    1eb0:	a5 e5       	ldi	r26, 0x55	; 85
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e5 e5       	ldi	r30, 0x55	; 85
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8b 7f       	andi	r24, 0xFB	; 251
    1ebc:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC11);
    1ebe:	a5 e5       	ldi	r26, 0x55	; 85
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e5 e5       	ldi	r30, 0x55	; 85
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	87 7f       	andi	r24, 0xF7	; 247
    1eca:	8c 93       	st	X, r24
    1ecc:	1f c0       	rjmp	.+62     	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
            break; 
        }

        break;
    case EXTI_INT2:
        switch (Copy_u8SignalSence)
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	3c 83       	std	Y+4, r19	; 0x04
    1ed6:	2b 83       	std	Y+3, r18	; 0x03
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	91 05       	cpc	r25, r1
    1ee0:	31 f0       	breq	.+12     	; 0x1eee <EXTI_voidChangeSenceMode+0x1cc>
    1ee2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee6:	22 30       	cpi	r18, 0x02	; 2
    1ee8:	31 05       	cpc	r19, r1
    1eea:	49 f0       	breq	.+18     	; 0x1efe <EXTI_voidChangeSenceMode+0x1dc>
    1eec:	0f c0       	rjmp	.+30     	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
        {
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, MCUCSR_ISC2);
    1eee:	a4 e5       	ldi	r26, 0x54	; 84
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e4 e5       	ldi	r30, 0x54	; 84
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	80 64       	ori	r24, 0x40	; 64
    1efa:	8c 93       	st	X, r24
    1efc:	07 c0       	rjmp	.+14     	; 0x1f0c <EXTI_voidChangeSenceMode+0x1ea>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCSR_ISC2);
    1efe:	a5 e5       	ldi	r26, 0x55	; 85
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e5 e5       	ldi	r30, 0x55	; 85
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	8f 7b       	andi	r24, 0xBF	; 191
    1f0a:	8c 93       	st	X, r24
    
    default:
        break;
    }

}
    1f0c:	2a 96       	adiw	r28, 0x0a	; 10
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <EXTI_voidInterruptContal>:

void EXTI_voidInterruptContal(u8 Copy_u8InterruptNum, u8 Copy_u8InterruptState)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	2a 97       	sbiw	r28, 0x0a	; 10
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8InterruptNum)
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	3a 87       	std	Y+10, r19	; 0x0a
    1f3e:	29 87       	std	Y+9, r18	; 0x09
    1f40:	89 85       	ldd	r24, Y+9	; 0x09
    1f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	91 05       	cpc	r25, r1
    1f48:	51 f1       	breq	.+84     	; 0x1f9e <EXTI_voidInterruptContal+0x80>
    1f4a:	29 85       	ldd	r18, Y+9	; 0x09
    1f4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f4e:	23 30       	cpi	r18, 0x03	; 3
    1f50:	31 05       	cpc	r19, r1
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <EXTI_voidInterruptContal+0x38>
    1f54:	43 c0       	rjmp	.+134    	; 0x1fdc <EXTI_voidInterruptContal+0xbe>
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <EXTI_voidInterruptContal+0x42>
    1f5e:	5c c0       	rjmp	.+184    	; 0x2018 <EXTI_voidInterruptContal+0xfa>
    {
        case EXTI_INT0:
            switch(Copy_u8InterruptState)
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	38 87       	std	Y+8, r19	; 0x08
    1f68:	2f 83       	std	Y+7, r18	; 0x07
    1f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f6c:	98 85       	ldd	r25, Y+8	; 0x08
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	31 f0       	breq	.+12     	; 0x1f7e <EXTI_voidInterruptContal+0x60>
    1f72:	2f 81       	ldd	r18, Y+7	; 0x07
    1f74:	38 85       	ldd	r19, Y+8	; 0x08
    1f76:	21 30       	cpi	r18, 0x01	; 1
    1f78:	31 05       	cpc	r19, r1
    1f7a:	49 f0       	breq	.+18     	; 0x1f8e <EXTI_voidInterruptContal+0x70>
    1f7c:	4d c0       	rjmp	.+154    	; 0x2018 <EXTI_voidInterruptContal+0xfa>
            {
                case EXTI_ENABLE:
                    SET_BIT(GICR, GICR_INT0);
    1f7e:	ab e5       	ldi	r26, 0x5B	; 91
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	eb e5       	ldi	r30, 0x5B	; 91
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	80 64       	ori	r24, 0x40	; 64
    1f8a:	8c 93       	st	X, r24
    1f8c:	45 c0       	rjmp	.+138    	; 0x2018 <EXTI_voidInterruptContal+0xfa>
                    break;
                case EXTI_DISABLE:
                    CLR_BIT(GICR, GICR_INT0);
    1f8e:	ab e5       	ldi	r26, 0x5B	; 91
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	eb e5       	ldi	r30, 0x5B	; 91
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	8f 7b       	andi	r24, 0xBF	; 191
    1f9a:	8c 93       	st	X, r24
    1f9c:	3d c0       	rjmp	.+122    	; 0x2018 <EXTI_voidInterruptContal+0xfa>
                    break;
            }
            break;
        case EXTI_INT1:
            switch(Copy_u8InterruptState)
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	3e 83       	std	Y+6, r19	; 0x06
    1fa6:	2d 83       	std	Y+5, r18	; 0x05
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	31 f0       	breq	.+12     	; 0x1fbc <EXTI_voidInterruptContal+0x9e>
    1fb0:	2d 81       	ldd	r18, Y+5	; 0x05
    1fb2:	3e 81       	ldd	r19, Y+6	; 0x06
    1fb4:	21 30       	cpi	r18, 0x01	; 1
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	49 f0       	breq	.+18     	; 0x1fcc <EXTI_voidInterruptContal+0xae>
    1fba:	2e c0       	rjmp	.+92     	; 0x2018 <EXTI_voidInterruptContal+0xfa>
            {
                case EXTI_ENABLE:
                    SET_BIT(GICR, GICR_INT1);
    1fbc:	ab e5       	ldi	r26, 0x5B	; 91
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	eb e5       	ldi	r30, 0x5B	; 91
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 68       	ori	r24, 0x80	; 128
    1fc8:	8c 93       	st	X, r24
    1fca:	26 c0       	rjmp	.+76     	; 0x2018 <EXTI_voidInterruptContal+0xfa>
                    break;
                case EXTI_DISABLE:
                    CLR_BIT(GICR, GICR_INT1);
    1fcc:	ab e5       	ldi	r26, 0x5B	; 91
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	eb e5       	ldi	r30, 0x5B	; 91
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	8f 77       	andi	r24, 0x7F	; 127
    1fd8:	8c 93       	st	X, r24
    1fda:	1e c0       	rjmp	.+60     	; 0x2018 <EXTI_voidInterruptContal+0xfa>
                    break;
            }
            break;
        case EXTI_INT2:
            switch(Copy_u8InterruptState)
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	3c 83       	std	Y+4, r19	; 0x04
    1fe4:	2b 83       	std	Y+3, r18	; 0x03
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	31 f0       	breq	.+12     	; 0x1ffa <EXTI_voidInterruptContal+0xdc>
    1fee:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff2:	21 30       	cpi	r18, 0x01	; 1
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	49 f0       	breq	.+18     	; 0x200a <EXTI_voidInterruptContal+0xec>
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <EXTI_voidInterruptContal+0xfa>
            {
                case EXTI_ENABLE:
                    SET_BIT(GICR, GICR_INT2);
    1ffa:	ab e5       	ldi	r26, 0x5B	; 91
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	eb e5       	ldi	r30, 0x5B	; 91
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	80 62       	ori	r24, 0x20	; 32
    2006:	8c 93       	st	X, r24
    2008:	07 c0       	rjmp	.+14     	; 0x2018 <EXTI_voidInterruptContal+0xfa>
                    break;
                case EXTI_DISABLE:
                    CLR_BIT(GICR, GICR_INT2);
    200a:	ab e5       	ldi	r26, 0x5B	; 91
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	eb e5       	ldi	r30, 0x5B	; 91
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8f 7d       	andi	r24, 0xDF	; 223
    2016:	8c 93       	st	X, r24
            break; 
        default:
        break;
    }

}
    2018:	2a 96       	adiw	r28, 0x0a	; 10
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <EXTI_voidGetInterruptFlag>:

u8 EXTI_voidGetInterruptFlag(u8 Copy_u8InterruptNum)
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	00 d0       	rcall	.+0      	; 0x2030 <EXTI_voidGetInterruptFlag+0x6>
    2030:	00 d0       	rcall	.+0      	; 0x2032 <EXTI_voidGetInterruptFlag+0x8>
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8GetFlag = 0;
    2038:	19 82       	std	Y+1, r1	; 0x01
    switch (Copy_u8InterruptNum)
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	3c 83       	std	Y+4, r19	; 0x04
    2042:	2b 83       	std	Y+3, r18	; 0x03
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	91 05       	cpc	r25, r1
    204c:	99 f0       	breq	.+38     	; 0x2074 <EXTI_voidGetInterruptFlag+0x4a>
    204e:	2b 81       	ldd	r18, Y+3	; 0x03
    2050:	3c 81       	ldd	r19, Y+4	; 0x04
    2052:	23 30       	cpi	r18, 0x03	; 3
    2054:	31 05       	cpc	r19, r1
    2056:	b1 f0       	breq	.+44     	; 0x2084 <EXTI_voidGetInterruptFlag+0x5a>
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	d1 f4       	brne	.+52     	; 0x2094 <EXTI_voidGetInterruptFlag+0x6a>
    {
    case EXTI_INT0:
        Local_u8GetFlag = GET_BIT(GIFR, GICR_INT0);
    2060:	ea e5       	ldi	r30, 0x5A	; 90
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	82 95       	swap	r24
    2068:	86 95       	lsr	r24
    206a:	86 95       	lsr	r24
    206c:	83 70       	andi	r24, 0x03	; 3
    206e:	81 70       	andi	r24, 0x01	; 1
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	10 c0       	rjmp	.+32     	; 0x2094 <EXTI_voidGetInterruptFlag+0x6a>
        break;
    case EXTI_INT1:
        Local_u8GetFlag = GET_BIT(GIFR, GICR_INT1);
    2074:	ea e5       	ldi	r30, 0x5A	; 90
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	88 1f       	adc	r24, r24
    207c:	88 27       	eor	r24, r24
    207e:	88 1f       	adc	r24, r24
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	08 c0       	rjmp	.+16     	; 0x2094 <EXTI_voidGetInterruptFlag+0x6a>
        break;
    case EXTI_INT2:
        Local_u8GetFlag = GET_BIT(GIFR, GICR_INT2);
    2084:	ea e5       	ldi	r30, 0x5A	; 90
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	82 95       	swap	r24
    208c:	86 95       	lsr	r24
    208e:	87 70       	andi	r24, 0x07	; 7
    2090:	81 70       	andi	r24, 0x01	; 1
    2092:	89 83       	std	Y+1, r24	; 0x01
        break;

    default:
        break;
    }
    return (Local_u8GetFlag);
    2094:	89 81       	ldd	r24, Y+1	; 0x01

}
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <EXTI_voidSetCallBack>:
/* Solve The Problem Of The Arcitechture*/
void EXTI_voidSetCallBack(void(*NotificationFunction)(void))
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <EXTI_voidSetCallBack+0x6>
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
    /*The Pointer That Shard At All Function And Store The Adress Of The Local pointer TO Function*/
    EXTI_INT0_Function =  NotificationFunction;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	90 93 fa 01 	sts	0x01FA, r25
    20ba:	80 93 f9 01 	sts	0x01F9, r24
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <__vector_1>:
/*
 * ISR For INT0
 */
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    20c8:	1f 92       	push	r1
    20ca:	0f 92       	push	r0
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	0f 92       	push	r0
    20d0:	11 24       	eor	r1, r1
    20d2:	2f 93       	push	r18
    20d4:	3f 93       	push	r19
    20d6:	4f 93       	push	r20
    20d8:	5f 93       	push	r21
    20da:	6f 93       	push	r22
    20dc:	7f 93       	push	r23
    20de:	8f 93       	push	r24
    20e0:	9f 93       	push	r25
    20e2:	af 93       	push	r26
    20e4:	bf 93       	push	r27
    20e6:	ef 93       	push	r30
    20e8:	ff 93       	push	r31
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    /*Excute The Application Function*/
    //Guard From The Garbish Value Of ISR
    if(EXTI_INT0_Function != NULL_POINTER)
    20f2:	80 91 f9 01 	lds	r24, 0x01F9
    20f6:	90 91 fa 01 	lds	r25, 0x01FA
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	29 f0       	breq	.+10     	; 0x2108 <__vector_1+0x40>
    {
        EXTI_INT0_Function();
    20fe:	e0 91 f9 01 	lds	r30, 0x01F9
    2102:	f0 91 fa 01 	lds	r31, 0x01FA
    2106:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	ff 91       	pop	r31
    210e:	ef 91       	pop	r30
    2110:	bf 91       	pop	r27
    2112:	af 91       	pop	r26
    2114:	9f 91       	pop	r25
    2116:	8f 91       	pop	r24
    2118:	7f 91       	pop	r23
    211a:	6f 91       	pop	r22
    211c:	5f 91       	pop	r21
    211e:	4f 91       	pop	r20
    2120:	3f 91       	pop	r19
    2122:	2f 91       	pop	r18
    2124:	0f 90       	pop	r0
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	0f 90       	pop	r0
    212a:	1f 90       	pop	r1
    212c:	18 95       	reti

0000212e <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidSetPinDirection (u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	00 d0       	rcall	.+0      	; 0x2134 <DIO_voidSetPinDirection+0x6>
    2134:	00 d0       	rcall	.+0      	; 0x2136 <DIO_voidSetPinDirection+0x8>
    2136:	0f 92       	push	r0
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	6a 83       	std	Y+2, r22	; 0x02
    2140:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7 && Copy_u8PinValue <= OUTPUT)
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	08 f0       	brcs	.+2      	; 0x214a <DIO_voidSetPinDirection+0x1c>
    2148:	e8 c0       	rjmp	.+464    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	88 30       	cpi	r24, 0x08	; 8
    214e:	08 f0       	brcs	.+2      	; 0x2152 <DIO_voidSetPinDirection+0x24>
    2150:	e4 c0       	rjmp	.+456    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	82 30       	cpi	r24, 0x02	; 2
    2156:	08 f0       	brcs	.+2      	; 0x215a <DIO_voidSetPinDirection+0x2c>
    2158:	e0 c0       	rjmp	.+448    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
    {
        switch (Copy_u8PortName)
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	3d 83       	std	Y+5, r19	; 0x05
    2162:	2c 83       	std	Y+4, r18	; 0x04
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	9d 81       	ldd	r25, Y+5	; 0x05
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	91 05       	cpc	r25, r1
    216c:	09 f4       	brne	.+2      	; 0x2170 <DIO_voidSetPinDirection+0x42>
    216e:	47 c0       	rjmp	.+142    	; 0x21fe <DIO_voidSetPinDirection+0xd0>
    2170:	2c 81       	ldd	r18, Y+4	; 0x04
    2172:	3d 81       	ldd	r19, Y+5	; 0x05
    2174:	22 30       	cpi	r18, 0x02	; 2
    2176:	31 05       	cpc	r19, r1
    2178:	2c f4       	brge	.+10     	; 0x2184 <DIO_voidSetPinDirection+0x56>
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	71 f0       	breq	.+28     	; 0x219e <DIO_voidSetPinDirection+0x70>
    2182:	cb c0       	rjmp	.+406    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
    2184:	2c 81       	ldd	r18, Y+4	; 0x04
    2186:	3d 81       	ldd	r19, Y+5	; 0x05
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	09 f4       	brne	.+2      	; 0x2190 <DIO_voidSetPinDirection+0x62>
    218e:	67 c0       	rjmp	.+206    	; 0x225e <DIO_voidSetPinDirection+0x130>
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	9d 81       	ldd	r25, Y+5	; 0x05
    2194:	83 30       	cpi	r24, 0x03	; 3
    2196:	91 05       	cpc	r25, r1
    2198:	09 f4       	brne	.+2      	; 0x219c <DIO_voidSetPinDirection+0x6e>
    219a:	91 c0       	rjmp	.+290    	; 0x22be <DIO_voidSetPinDirection+0x190>
    219c:	be c0       	rjmp	.+380    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
        {
            case PORTA:
                if(Copy_u8PinValue == OUTPUT)
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	a1 f4       	brne	.+40     	; 0x21cc <DIO_voidSetPinDirection+0x9e>
                {
                    SET_BIT(DIO_DDRA, Copy_u8PinNumber);
    21a4:	aa e3       	ldi	r26, 0x3A	; 58
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	ea e3       	ldi	r30, 0x3A	; 58
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <DIO_voidSetPinDirection+0x94>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <DIO_voidSetPinDirection+0x90>
    21c6:	84 2b       	or	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	a7 c0       	rjmp	.+334    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	88 23       	and	r24, r24
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <DIO_voidSetPinDirection+0xa6>
    21d2:	a3 c0       	rjmp	.+326    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRA, Copy_u8PinNumber);
    21d4:	aa e3       	ldi	r26, 0x3A	; 58
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	ea e3       	ldi	r30, 0x3A	; 58
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <DIO_voidSetPinDirection+0xc4>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <DIO_voidSetPinDirection+0xc0>
    21f6:	80 95       	com	r24
    21f8:	84 23       	and	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	8e c0       	rjmp	.+284    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                {

                }
                break;
            case PORTB:
                if(Copy_u8PinValue == OUTPUT)
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	a1 f4       	brne	.+40     	; 0x222c <DIO_voidSetPinDirection+0xfe>
                {
                    SET_BIT(DIO_DDRB, Copy_u8PinNumber);
    2204:	a7 e3       	ldi	r26, 0x37	; 55
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e7 e3       	ldi	r30, 0x37	; 55
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	48 2f       	mov	r20, r24
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <DIO_voidSetPinDirection+0xf4>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <DIO_voidSetPinDirection+0xf0>
    2226:	84 2b       	or	r24, r20
    2228:	8c 93       	st	X, r24
    222a:	77 c0       	rjmp	.+238    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	88 23       	and	r24, r24
    2230:	09 f0       	breq	.+2      	; 0x2234 <DIO_voidSetPinDirection+0x106>
    2232:	73 c0       	rjmp	.+230    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRB, Copy_u8PinNumber);
    2234:	a7 e3       	ldi	r26, 0x37	; 55
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e7 e3       	ldi	r30, 0x37	; 55
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	48 2f       	mov	r20, r24
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	02 2e       	mov	r0, r18
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <DIO_voidSetPinDirection+0x124>
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	0a 94       	dec	r0
    2254:	e2 f7       	brpl	.-8      	; 0x224e <DIO_voidSetPinDirection+0x120>
    2256:	80 95       	com	r24
    2258:	84 23       	and	r24, r20
    225a:	8c 93       	st	X, r24
    225c:	5e c0       	rjmp	.+188    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                {

                }
                break;
            case PORTC:
                if(Copy_u8PinValue == OUTPUT)
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	a1 f4       	brne	.+40     	; 0x228c <DIO_voidSetPinDirection+0x15e>
                {
                    SET_BIT(DIO_DDRC, Copy_u8PinNumber);
    2264:	a4 e3       	ldi	r26, 0x34	; 52
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e4 e3       	ldi	r30, 0x34	; 52
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	48 2f       	mov	r20, r24
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	02 2e       	mov	r0, r18
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <DIO_voidSetPinDirection+0x154>
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	0a 94       	dec	r0
    2284:	e2 f7       	brpl	.-8      	; 0x227e <DIO_voidSetPinDirection+0x150>
    2286:	84 2b       	or	r24, r20
    2288:	8c 93       	st	X, r24
    228a:	47 c0       	rjmp	.+142    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	88 23       	and	r24, r24
    2290:	09 f0       	breq	.+2      	; 0x2294 <DIO_voidSetPinDirection+0x166>
    2292:	43 c0       	rjmp	.+134    	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRC, Copy_u8PinNumber);
    2294:	a4 e3       	ldi	r26, 0x34	; 52
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e4 e3       	ldi	r30, 0x34	; 52
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	48 2f       	mov	r20, r24
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	02 2e       	mov	r0, r18
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <DIO_voidSetPinDirection+0x184>
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	0a 94       	dec	r0
    22b4:	e2 f7       	brpl	.-8      	; 0x22ae <DIO_voidSetPinDirection+0x180>
    22b6:	80 95       	com	r24
    22b8:	84 23       	and	r24, r20
    22ba:	8c 93       	st	X, r24
    22bc:	2e c0       	rjmp	.+92     	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                {

                }
                break;
            case PORTD:
                if(Copy_u8PinValue == OUTPUT)
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	81 30       	cpi	r24, 0x01	; 1
    22c2:	a1 f4       	brne	.+40     	; 0x22ec <DIO_voidSetPinDirection+0x1be>
                {
                    SET_BIT(DIO_DDRD, Copy_u8PinNumber);
    22c4:	a1 e3       	ldi	r26, 0x31	; 49
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e1 e3       	ldi	r30, 0x31	; 49
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	48 2f       	mov	r20, r24
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	02 2e       	mov	r0, r18
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <DIO_voidSetPinDirection+0x1b4>
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	0a 94       	dec	r0
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <DIO_voidSetPinDirection+0x1b0>
    22e6:	84 2b       	or	r24, r20
    22e8:	8c 93       	st	X, r24
    22ea:	17 c0       	rjmp	.+46     	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	88 23       	and	r24, r24
    22f0:	a1 f4       	brne	.+40     	; 0x231a <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRD, Copy_u8PinNumber);
    22f2:	a1 e3       	ldi	r26, 0x31	; 49
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e1 e3       	ldi	r30, 0x31	; 49
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	48 2f       	mov	r20, r24
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	02 2e       	mov	r0, r18
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <DIO_voidSetPinDirection+0x1e2>
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	0a 94       	dec	r0
    2312:	e2 f7       	brpl	.-8      	; 0x230c <DIO_voidSetPinDirection+0x1de>
    2314:	80 95       	com	r24
    2316:	84 23       	and	r24, r20
    2318:	8c 93       	st	X, r24
    }
    else
    {

    }
}
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	00 d0       	rcall	.+0      	; 0x2330 <DIO_voidSetPinValue+0x6>
    2330:	00 d0       	rcall	.+0      	; 0x2332 <DIO_voidSetPinValue+0x8>
    2332:	0f 92       	push	r0
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	6a 83       	std	Y+2, r22	; 0x02
    233c:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7 && Copy_u8PinValue <= HIGH)
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	84 30       	cpi	r24, 0x04	; 4
    2342:	08 f0       	brcs	.+2      	; 0x2346 <DIO_voidSetPinValue+0x1c>
    2344:	e8 c0       	rjmp	.+464    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	88 30       	cpi	r24, 0x08	; 8
    234a:	08 f0       	brcs	.+2      	; 0x234e <DIO_voidSetPinValue+0x24>
    234c:	e4 c0       	rjmp	.+456    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	08 f0       	brcs	.+2      	; 0x2356 <DIO_voidSetPinValue+0x2c>
    2354:	e0 c0       	rjmp	.+448    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
    {
        switch(Copy_u8PortName)
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	3d 83       	std	Y+5, r19	; 0x05
    235e:	2c 83       	std	Y+4, r18	; 0x04
    2360:	8c 81       	ldd	r24, Y+4	; 0x04
    2362:	9d 81       	ldd	r25, Y+5	; 0x05
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	91 05       	cpc	r25, r1
    2368:	09 f4       	brne	.+2      	; 0x236c <DIO_voidSetPinValue+0x42>
    236a:	47 c0       	rjmp	.+142    	; 0x23fa <DIO_voidSetPinValue+0xd0>
    236c:	2c 81       	ldd	r18, Y+4	; 0x04
    236e:	3d 81       	ldd	r19, Y+5	; 0x05
    2370:	22 30       	cpi	r18, 0x02	; 2
    2372:	31 05       	cpc	r19, r1
    2374:	2c f4       	brge	.+10     	; 0x2380 <DIO_voidSetPinValue+0x56>
    2376:	8c 81       	ldd	r24, Y+4	; 0x04
    2378:	9d 81       	ldd	r25, Y+5	; 0x05
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	71 f0       	breq	.+28     	; 0x239a <DIO_voidSetPinValue+0x70>
    237e:	cb c0       	rjmp	.+406    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
    2380:	2c 81       	ldd	r18, Y+4	; 0x04
    2382:	3d 81       	ldd	r19, Y+5	; 0x05
    2384:	22 30       	cpi	r18, 0x02	; 2
    2386:	31 05       	cpc	r19, r1
    2388:	09 f4       	brne	.+2      	; 0x238c <DIO_voidSetPinValue+0x62>
    238a:	67 c0       	rjmp	.+206    	; 0x245a <DIO_voidSetPinValue+0x130>
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	9d 81       	ldd	r25, Y+5	; 0x05
    2390:	83 30       	cpi	r24, 0x03	; 3
    2392:	91 05       	cpc	r25, r1
    2394:	09 f4       	brne	.+2      	; 0x2398 <DIO_voidSetPinValue+0x6e>
    2396:	91 c0       	rjmp	.+290    	; 0x24ba <DIO_voidSetPinValue+0x190>
    2398:	be c0       	rjmp	.+380    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
        {
            case PORTA:
            if(Copy_u8PinValue == HIGH)
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	81 30       	cpi	r24, 0x01	; 1
    239e:	a1 f4       	brne	.+40     	; 0x23c8 <DIO_voidSetPinValue+0x9e>
            {
                SET_BIT(DIO_PORTA, Copy_u8PinNumber);
    23a0:	ab e3       	ldi	r26, 0x3B	; 59
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	eb e3       	ldi	r30, 0x3B	; 59
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	48 2f       	mov	r20, r24
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	02 2e       	mov	r0, r18
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <DIO_voidSetPinValue+0x94>
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	0a 94       	dec	r0
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <DIO_voidSetPinValue+0x90>
    23c2:	84 2b       	or	r24, r20
    23c4:	8c 93       	st	X, r24
    23c6:	a7 c0       	rjmp	.+334    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	88 23       	and	r24, r24
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <DIO_voidSetPinValue+0xa6>
    23ce:	a3 c0       	rjmp	.+326    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTA, Copy_u8PinNumber);
    23d0:	ab e3       	ldi	r26, 0x3B	; 59
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	eb e3       	ldi	r30, 0x3B	; 59
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	48 2f       	mov	r20, r24
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 2e       	mov	r0, r18
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <DIO_voidSetPinValue+0xc4>
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	0a 94       	dec	r0
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <DIO_voidSetPinValue+0xc0>
    23f2:	80 95       	com	r24
    23f4:	84 23       	and	r24, r20
    23f6:	8c 93       	st	X, r24
    23f8:	8e c0       	rjmp	.+284    	; 0x2516 <DIO_voidSetPinValue+0x1ec>

            }
            break;

            case PORTB:
            if(Copy_u8PinValue == HIGH)
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	81 30       	cpi	r24, 0x01	; 1
    23fe:	a1 f4       	brne	.+40     	; 0x2428 <DIO_voidSetPinValue+0xfe>
            {
                SET_BIT(DIO_PORTB, Copy_u8PinNumber);
    2400:	a8 e3       	ldi	r26, 0x38	; 56
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e8 e3       	ldi	r30, 0x38	; 56
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	48 2f       	mov	r20, r24
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	02 2e       	mov	r0, r18
    2418:	02 c0       	rjmp	.+4      	; 0x241e <DIO_voidSetPinValue+0xf4>
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	0a 94       	dec	r0
    2420:	e2 f7       	brpl	.-8      	; 0x241a <DIO_voidSetPinValue+0xf0>
    2422:	84 2b       	or	r24, r20
    2424:	8c 93       	st	X, r24
    2426:	77 c0       	rjmp	.+238    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	88 23       	and	r24, r24
    242c:	09 f0       	breq	.+2      	; 0x2430 <DIO_voidSetPinValue+0x106>
    242e:	73 c0       	rjmp	.+230    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTB, Copy_u8PinNumber);
    2430:	a8 e3       	ldi	r26, 0x38	; 56
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e8 e3       	ldi	r30, 0x38	; 56
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	48 2f       	mov	r20, r24
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	02 2e       	mov	r0, r18
    2448:	02 c0       	rjmp	.+4      	; 0x244e <DIO_voidSetPinValue+0x124>
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	0a 94       	dec	r0
    2450:	e2 f7       	brpl	.-8      	; 0x244a <DIO_voidSetPinValue+0x120>
    2452:	80 95       	com	r24
    2454:	84 23       	and	r24, r20
    2456:	8c 93       	st	X, r24
    2458:	5e c0       	rjmp	.+188    	; 0x2516 <DIO_voidSetPinValue+0x1ec>

            }
            break;

            case PORTC:
            if(Copy_u8PinValue == HIGH)
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	a1 f4       	brne	.+40     	; 0x2488 <DIO_voidSetPinValue+0x15e>
            {
                SET_BIT(DIO_PORTC, Copy_u8PinNumber);
    2460:	a5 e3       	ldi	r26, 0x35	; 53
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e5 e3       	ldi	r30, 0x35	; 53
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	48 2f       	mov	r20, r24
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	02 2e       	mov	r0, r18
    2478:	02 c0       	rjmp	.+4      	; 0x247e <DIO_voidSetPinValue+0x154>
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	0a 94       	dec	r0
    2480:	e2 f7       	brpl	.-8      	; 0x247a <DIO_voidSetPinValue+0x150>
    2482:	84 2b       	or	r24, r20
    2484:	8c 93       	st	X, r24
    2486:	47 c0       	rjmp	.+142    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	88 23       	and	r24, r24
    248c:	09 f0       	breq	.+2      	; 0x2490 <DIO_voidSetPinValue+0x166>
    248e:	43 c0       	rjmp	.+134    	; 0x2516 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTC, Copy_u8PinNumber);
    2490:	a5 e3       	ldi	r26, 0x35	; 53
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e5 e3       	ldi	r30, 0x35	; 53
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	48 2f       	mov	r20, r24
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 2e       	mov	r0, r18
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <DIO_voidSetPinValue+0x184>
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	0a 94       	dec	r0
    24b0:	e2 f7       	brpl	.-8      	; 0x24aa <DIO_voidSetPinValue+0x180>
    24b2:	80 95       	com	r24
    24b4:	84 23       	and	r24, r20
    24b6:	8c 93       	st	X, r24
    24b8:	2e c0       	rjmp	.+92     	; 0x2516 <DIO_voidSetPinValue+0x1ec>

            }
            break;

            case PORTD:
            if(Copy_u8PinValue == HIGH)
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	81 30       	cpi	r24, 0x01	; 1
    24be:	a1 f4       	brne	.+40     	; 0x24e8 <DIO_voidSetPinValue+0x1be>
            {
                SET_BIT(DIO_PORTD, Copy_u8PinNumber);
    24c0:	a2 e3       	ldi	r26, 0x32	; 50
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e2 e3       	ldi	r30, 0x32	; 50
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	48 2f       	mov	r20, r24
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <DIO_voidSetPinValue+0x1b4>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <DIO_voidSetPinValue+0x1b0>
    24e2:	84 2b       	or	r24, r20
    24e4:	8c 93       	st	X, r24
    24e6:	17 c0       	rjmp	.+46     	; 0x2516 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	88 23       	and	r24, r24
    24ec:	a1 f4       	brne	.+40     	; 0x2516 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTD, Copy_u8PinNumber);
    24ee:	a2 e3       	ldi	r26, 0x32	; 50
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e2 e3       	ldi	r30, 0x32	; 50
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	48 2f       	mov	r20, r24
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	02 2e       	mov	r0, r18
    2506:	02 c0       	rjmp	.+4      	; 0x250c <DIO_voidSetPinValue+0x1e2>
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	0a 94       	dec	r0
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <DIO_voidSetPinValue+0x1de>
    2510:	80 95       	com	r24
    2512:	84 23       	and	r24, r20
    2514:	8c 93       	st	X, r24
    }
    else
    {

    }
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <DIO_voidSetPinPullUp>:

void DIO_voidSetPinPullUp (u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PullupState)
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	2d 97       	sbiw	r28, 0x0d	; 13
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	6a 83       	std	Y+2, r22	; 0x02
    253e:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7 && Copy_u8PullupState <= PULLUP)
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	84 30       	cpi	r24, 0x04	; 4
    2544:	08 f0       	brcs	.+2      	; 0x2548 <DIO_voidSetPinPullUp+0x22>
    2546:	54 c1       	rjmp	.+680    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	88 30       	cpi	r24, 0x08	; 8
    254c:	08 f0       	brcs	.+2      	; 0x2550 <DIO_voidSetPinPullUp+0x2a>
    254e:	50 c1       	rjmp	.+672    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	82 30       	cpi	r24, 0x02	; 2
    2554:	08 f0       	brcs	.+2      	; 0x2558 <DIO_voidSetPinPullUp+0x32>
    2556:	4c c1       	rjmp	.+664    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
    {
        switch (Copy_u8PortName)
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	3d 87       	std	Y+13, r19	; 0x0d
    2560:	2c 87       	std	Y+12, r18	; 0x0c
    2562:	8c 85       	ldd	r24, Y+12	; 0x0c
    2564:	9d 85       	ldd	r25, Y+13	; 0x0d
    2566:	81 30       	cpi	r24, 0x01	; 1
    2568:	91 05       	cpc	r25, r1
    256a:	09 f4       	brne	.+2      	; 0x256e <DIO_voidSetPinPullUp+0x48>
    256c:	62 c0       	rjmp	.+196    	; 0x2632 <DIO_voidSetPinPullUp+0x10c>
    256e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2570:	3d 85       	ldd	r19, Y+13	; 0x0d
    2572:	22 30       	cpi	r18, 0x02	; 2
    2574:	31 05       	cpc	r19, r1
    2576:	2c f4       	brge	.+10     	; 0x2582 <DIO_voidSetPinPullUp+0x5c>
    2578:	8c 85       	ldd	r24, Y+12	; 0x0c
    257a:	9d 85       	ldd	r25, Y+13	; 0x0d
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	71 f0       	breq	.+28     	; 0x259c <DIO_voidSetPinPullUp+0x76>
    2580:	37 c1       	rjmp	.+622    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
    2582:	2c 85       	ldd	r18, Y+12	; 0x0c
    2584:	3d 85       	ldd	r19, Y+13	; 0x0d
    2586:	22 30       	cpi	r18, 0x02	; 2
    2588:	31 05       	cpc	r19, r1
    258a:	09 f4       	brne	.+2      	; 0x258e <DIO_voidSetPinPullUp+0x68>
    258c:	9d c0       	rjmp	.+314    	; 0x26c8 <DIO_voidSetPinPullUp+0x1a2>
    258e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2590:	9d 85       	ldd	r25, Y+13	; 0x0d
    2592:	83 30       	cpi	r24, 0x03	; 3
    2594:	91 05       	cpc	r25, r1
    2596:	09 f4       	brne	.+2      	; 0x259a <DIO_voidSetPinPullUp+0x74>
    2598:	e2 c0       	rjmp	.+452    	; 0x275e <DIO_voidSetPinPullUp+0x238>
    259a:	2a c1       	rjmp	.+596    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
        {
            case PORTA:
                switch (Copy_u8PullupState)
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	3b 87       	std	Y+11, r19	; 0x0b
    25a4:	2a 87       	std	Y+10, r18	; 0x0a
    25a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	69 f1       	breq	.+90     	; 0x2608 <DIO_voidSetPinPullUp+0xe2>
    25ae:	2a 85       	ldd	r18, Y+10	; 0x0a
    25b0:	3b 85       	ldd	r19, Y+11	; 0x0b
    25b2:	21 30       	cpi	r18, 0x01	; 1
    25b4:	31 05       	cpc	r19, r1
    25b6:	09 f0       	breq	.+2      	; 0x25ba <DIO_voidSetPinPullUp+0x94>
    25b8:	1b c1       	rjmp	.+566    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRA, Copy_u8PinNumber);
    25ba:	aa e3       	ldi	r26, 0x3A	; 58
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	ea e3       	ldi	r30, 0x3A	; 58
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	48 2f       	mov	r20, r24
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <DIO_voidSetPinPullUp+0xb0>
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	2a 95       	dec	r18
    25d8:	e2 f7       	brpl	.-8      	; 0x25d2 <DIO_voidSetPinPullUp+0xac>
    25da:	80 95       	com	r24
    25dc:	84 23       	and	r24, r20
    25de:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTA, Copy_u8PinNumber);
    25e0:	ab e3       	ldi	r26, 0x3B	; 59
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	eb e3       	ldi	r30, 0x3B	; 59
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	48 2f       	mov	r20, r24
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	02 2e       	mov	r0, r18
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <DIO_voidSetPinPullUp+0xd8>
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	0a 94       	dec	r0
    2600:	e2 f7       	brpl	.-8      	; 0x25fa <DIO_voidSetPinPullUp+0xd4>
    2602:	84 2b       	or	r24, r20
    2604:	8c 93       	st	X, r24
    2606:	f4 c0       	rjmp	.+488    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTA, Copy_u8PinNumber);
    2608:	ab e3       	ldi	r26, 0x3B	; 59
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	eb e3       	ldi	r30, 0x3B	; 59
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	48 2f       	mov	r20, r24
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	02 2e       	mov	r0, r18
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <DIO_voidSetPinPullUp+0x100>
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	0a 94       	dec	r0
    2628:	e2 f7       	brpl	.-8      	; 0x2622 <DIO_voidSetPinPullUp+0xfc>
    262a:	80 95       	com	r24
    262c:	84 23       	and	r24, r20
    262e:	8c 93       	st	X, r24
    2630:	df c0       	rjmp	.+446    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                    break;
                }
            break;

            case PORTB:
                switch (Copy_u8PullupState)
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	39 87       	std	Y+9, r19	; 0x09
    263a:	28 87       	std	Y+8, r18	; 0x08
    263c:	88 85       	ldd	r24, Y+8	; 0x08
    263e:	99 85       	ldd	r25, Y+9	; 0x09
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	69 f1       	breq	.+90     	; 0x269e <DIO_voidSetPinPullUp+0x178>
    2644:	28 85       	ldd	r18, Y+8	; 0x08
    2646:	39 85       	ldd	r19, Y+9	; 0x09
    2648:	21 30       	cpi	r18, 0x01	; 1
    264a:	31 05       	cpc	r19, r1
    264c:	09 f0       	breq	.+2      	; 0x2650 <DIO_voidSetPinPullUp+0x12a>
    264e:	d0 c0       	rjmp	.+416    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRB, Copy_u8PinNumber);
    2650:	a7 e3       	ldi	r26, 0x37	; 55
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e7 e3       	ldi	r30, 0x37	; 55
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	48 2f       	mov	r20, r24
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	02 c0       	rjmp	.+4      	; 0x266c <DIO_voidSetPinPullUp+0x146>
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	2a 95       	dec	r18
    266e:	e2 f7       	brpl	.-8      	; 0x2668 <DIO_voidSetPinPullUp+0x142>
    2670:	80 95       	com	r24
    2672:	84 23       	and	r24, r20
    2674:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTB, Copy_u8PinNumber);
    2676:	a8 e3       	ldi	r26, 0x38	; 56
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e8 e3       	ldi	r30, 0x38	; 56
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	48 2f       	mov	r20, r24
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	02 2e       	mov	r0, r18
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <DIO_voidSetPinPullUp+0x16e>
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	0a 94       	dec	r0
    2696:	e2 f7       	brpl	.-8      	; 0x2690 <DIO_voidSetPinPullUp+0x16a>
    2698:	84 2b       	or	r24, r20
    269a:	8c 93       	st	X, r24
    269c:	a9 c0       	rjmp	.+338    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTB, Copy_u8PinNumber);
    269e:	a8 e3       	ldi	r26, 0x38	; 56
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e8 e3       	ldi	r30, 0x38	; 56
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	48 2f       	mov	r20, r24
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	28 2f       	mov	r18, r24
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	02 2e       	mov	r0, r18
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <DIO_voidSetPinPullUp+0x196>
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	0a 94       	dec	r0
    26be:	e2 f7       	brpl	.-8      	; 0x26b8 <DIO_voidSetPinPullUp+0x192>
    26c0:	80 95       	com	r24
    26c2:	84 23       	and	r24, r20
    26c4:	8c 93       	st	X, r24
    26c6:	94 c0       	rjmp	.+296    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                    break;
                }
            break;

            case PORTC:
                switch (Copy_u8PullupState)
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	3f 83       	std	Y+7, r19	; 0x07
    26d0:	2e 83       	std	Y+6, r18	; 0x06
    26d2:	8e 81       	ldd	r24, Y+6	; 0x06
    26d4:	9f 81       	ldd	r25, Y+7	; 0x07
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	69 f1       	breq	.+90     	; 0x2734 <DIO_voidSetPinPullUp+0x20e>
    26da:	2e 81       	ldd	r18, Y+6	; 0x06
    26dc:	3f 81       	ldd	r19, Y+7	; 0x07
    26de:	21 30       	cpi	r18, 0x01	; 1
    26e0:	31 05       	cpc	r19, r1
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <DIO_voidSetPinPullUp+0x1c0>
    26e4:	85 c0       	rjmp	.+266    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRC, Copy_u8PinNumber);
    26e6:	a4 e3       	ldi	r26, 0x34	; 52
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e4 e3       	ldi	r30, 0x34	; 52
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	48 2f       	mov	r20, r24
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <DIO_voidSetPinPullUp+0x1dc>
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	2a 95       	dec	r18
    2704:	e2 f7       	brpl	.-8      	; 0x26fe <DIO_voidSetPinPullUp+0x1d8>
    2706:	80 95       	com	r24
    2708:	84 23       	and	r24, r20
    270a:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTC, Copy_u8PinNumber);
    270c:	a5 e3       	ldi	r26, 0x35	; 53
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e5 e3       	ldi	r30, 0x35	; 53
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	48 2f       	mov	r20, r24
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	02 2e       	mov	r0, r18
    2724:	02 c0       	rjmp	.+4      	; 0x272a <DIO_voidSetPinPullUp+0x204>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	0a 94       	dec	r0
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <DIO_voidSetPinPullUp+0x200>
    272e:	84 2b       	or	r24, r20
    2730:	8c 93       	st	X, r24
    2732:	5e c0       	rjmp	.+188    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTC, Copy_u8PinNumber);
    2734:	a5 e3       	ldi	r26, 0x35	; 53
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e5 e3       	ldi	r30, 0x35	; 53
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	48 2f       	mov	r20, r24
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	02 2e       	mov	r0, r18
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <DIO_voidSetPinPullUp+0x22c>
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	0a 94       	dec	r0
    2754:	e2 f7       	brpl	.-8      	; 0x274e <DIO_voidSetPinPullUp+0x228>
    2756:	80 95       	com	r24
    2758:	84 23       	and	r24, r20
    275a:	8c 93       	st	X, r24
    275c:	49 c0       	rjmp	.+146    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                    break;
                }
            break;

            case PORTD:
                switch (Copy_u8PullupState)
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	3d 83       	std	Y+5, r19	; 0x05
    2766:	2c 83       	std	Y+4, r18	; 0x04
    2768:	8c 81       	ldd	r24, Y+4	; 0x04
    276a:	9d 81       	ldd	r25, Y+5	; 0x05
    276c:	00 97       	sbiw	r24, 0x00	; 0
    276e:	61 f1       	breq	.+88     	; 0x27c8 <DIO_voidSetPinPullUp+0x2a2>
    2770:	2c 81       	ldd	r18, Y+4	; 0x04
    2772:	3d 81       	ldd	r19, Y+5	; 0x05
    2774:	21 30       	cpi	r18, 0x01	; 1
    2776:	31 05       	cpc	r19, r1
    2778:	d9 f5       	brne	.+118    	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRD, Copy_u8PinNumber);
    277a:	a1 e3       	ldi	r26, 0x31	; 49
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e1 e3       	ldi	r30, 0x31	; 49
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	48 2f       	mov	r20, r24
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <DIO_voidSetPinPullUp+0x270>
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	2a 95       	dec	r18
    2798:	e2 f7       	brpl	.-8      	; 0x2792 <DIO_voidSetPinPullUp+0x26c>
    279a:	80 95       	com	r24
    279c:	84 23       	and	r24, r20
    279e:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTD, Copy_u8PinNumber);
    27a0:	a2 e3       	ldi	r26, 0x32	; 50
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e2 e3       	ldi	r30, 0x32	; 50
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	48 2f       	mov	r20, r24
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	02 2e       	mov	r0, r18
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <DIO_voidSetPinPullUp+0x298>
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	0a 94       	dec	r0
    27c0:	e2 f7       	brpl	.-8      	; 0x27ba <DIO_voidSetPinPullUp+0x294>
    27c2:	84 2b       	or	r24, r20
    27c4:	8c 93       	st	X, r24
    27c6:	14 c0       	rjmp	.+40     	; 0x27f0 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTD, Copy_u8PinNumber);
    27c8:	a2 e3       	ldi	r26, 0x32	; 50
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e2 e3       	ldi	r30, 0x32	; 50
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	48 2f       	mov	r20, r24
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	02 2e       	mov	r0, r18
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <DIO_voidSetPinPullUp+0x2c0>
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	0a 94       	dec	r0
    27e8:	e2 f7       	brpl	.-8      	; 0x27e2 <DIO_voidSetPinPullUp+0x2bc>
    27ea:	80 95       	com	r24
    27ec:	84 23       	and	r24, r20
    27ee:	8c 93       	st	X, r24
    }
    else
    {

    }
}
    27f0:	2d 96       	adiw	r28, 0x0d	; 13
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	00 d0       	rcall	.+0      	; 0x2808 <DIO_u8GetPinValue+0x6>
    2808:	00 d0       	rcall	.+0      	; 0x280a <DIO_u8GetPinValue+0x8>
    280a:	0f 92       	push	r0
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	8a 83       	std	Y+2, r24	; 0x02
    2812:	6b 83       	std	Y+3, r22	; 0x03
    
	u8 DIO_u8StorePinValue = 0;
    2814:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7)
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	84 30       	cpi	r24, 0x04	; 4
    281a:	08 f0       	brcs	.+2      	; 0x281e <DIO_u8GetPinValue+0x1c>
    281c:	6b c0       	rjmp	.+214    	; 0x28f4 <DIO_u8GetPinValue+0xf2>
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	88 30       	cpi	r24, 0x08	; 8
    2822:	08 f0       	brcs	.+2      	; 0x2826 <DIO_u8GetPinValue+0x24>
    2824:	67 c0       	rjmp	.+206    	; 0x28f4 <DIO_u8GetPinValue+0xf2>
    {
        switch (Copy_u8PortName)
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	3d 83       	std	Y+5, r19	; 0x05
    282e:	2c 83       	std	Y+4, r18	; 0x04
    2830:	4c 81       	ldd	r20, Y+4	; 0x04
    2832:	5d 81       	ldd	r21, Y+5	; 0x05
    2834:	41 30       	cpi	r20, 0x01	; 1
    2836:	51 05       	cpc	r21, r1
    2838:	41 f1       	breq	.+80     	; 0x288a <DIO_u8GetPinValue+0x88>
    283a:	8c 81       	ldd	r24, Y+4	; 0x04
    283c:	9d 81       	ldd	r25, Y+5	; 0x05
    283e:	82 30       	cpi	r24, 0x02	; 2
    2840:	91 05       	cpc	r25, r1
    2842:	34 f4       	brge	.+12     	; 0x2850 <DIO_u8GetPinValue+0x4e>
    2844:	2c 81       	ldd	r18, Y+4	; 0x04
    2846:	3d 81       	ldd	r19, Y+5	; 0x05
    2848:	21 15       	cp	r18, r1
    284a:	31 05       	cpc	r19, r1
    284c:	61 f0       	breq	.+24     	; 0x2866 <DIO_u8GetPinValue+0x64>
    284e:	52 c0       	rjmp	.+164    	; 0x28f4 <DIO_u8GetPinValue+0xf2>
    2850:	4c 81       	ldd	r20, Y+4	; 0x04
    2852:	5d 81       	ldd	r21, Y+5	; 0x05
    2854:	42 30       	cpi	r20, 0x02	; 2
    2856:	51 05       	cpc	r21, r1
    2858:	51 f1       	breq	.+84     	; 0x28ae <DIO_u8GetPinValue+0xac>
    285a:	8c 81       	ldd	r24, Y+4	; 0x04
    285c:	9d 81       	ldd	r25, Y+5	; 0x05
    285e:	83 30       	cpi	r24, 0x03	; 3
    2860:	91 05       	cpc	r25, r1
    2862:	b9 f1       	breq	.+110    	; 0x28d2 <DIO_u8GetPinValue+0xd0>
    2864:	47 c0       	rjmp	.+142    	; 0x28f4 <DIO_u8GetPinValue+0xf2>
        {
            case PORTA:
                DIO_u8StorePinValue = GET_BIT(DIO_PINA, Copy_u8PinNumber);
    2866:	e9 e3       	ldi	r30, 0x39	; 57
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	28 2f       	mov	r18, r24
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	88 2f       	mov	r24, r24
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a9 01       	movw	r20, r18
    2878:	02 c0       	rjmp	.+4      	; 0x287e <DIO_u8GetPinValue+0x7c>
    287a:	55 95       	asr	r21
    287c:	47 95       	ror	r20
    287e:	8a 95       	dec	r24
    2880:	e2 f7       	brpl	.-8      	; 0x287a <DIO_u8GetPinValue+0x78>
    2882:	ca 01       	movw	r24, r20
    2884:	81 70       	andi	r24, 0x01	; 1
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	35 c0       	rjmp	.+106    	; 0x28f4 <DIO_u8GetPinValue+0xf2>
            break;

            case PORTB:
                DIO_u8StorePinValue = GET_BIT(DIO_PINB, Copy_u8PinNumber);
    288a:	e6 e3       	ldi	r30, 0x36	; 54
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	88 2f       	mov	r24, r24
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a9 01       	movw	r20, r18
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <DIO_u8GetPinValue+0xa0>
    289e:	55 95       	asr	r21
    28a0:	47 95       	ror	r20
    28a2:	8a 95       	dec	r24
    28a4:	e2 f7       	brpl	.-8      	; 0x289e <DIO_u8GetPinValue+0x9c>
    28a6:	ca 01       	movw	r24, r20
    28a8:	81 70       	andi	r24, 0x01	; 1
    28aa:	89 83       	std	Y+1, r24	; 0x01
    28ac:	23 c0       	rjmp	.+70     	; 0x28f4 <DIO_u8GetPinValue+0xf2>
            break;

            case PORTC:
                DIO_u8StorePinValue = GET_BIT(DIO_PINC, Copy_u8PinNumber);
    28ae:	e3 e3       	ldi	r30, 0x33	; 51
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	a9 01       	movw	r20, r18
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <DIO_u8GetPinValue+0xc4>
    28c2:	55 95       	asr	r21
    28c4:	47 95       	ror	r20
    28c6:	8a 95       	dec	r24
    28c8:	e2 f7       	brpl	.-8      	; 0x28c2 <DIO_u8GetPinValue+0xc0>
    28ca:	ca 01       	movw	r24, r20
    28cc:	81 70       	andi	r24, 0x01	; 1
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	11 c0       	rjmp	.+34     	; 0x28f4 <DIO_u8GetPinValue+0xf2>
            break;

            case PORTD:
                DIO_u8StorePinValue = GET_BIT(DIO_PIND, Copy_u8PinNumber);
    28d2:	e0 e3       	ldi	r30, 0x30	; 48
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	88 2f       	mov	r24, r24
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a9 01       	movw	r20, r18
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <DIO_u8GetPinValue+0xe8>
    28e6:	55 95       	asr	r21
    28e8:	47 95       	ror	r20
    28ea:	8a 95       	dec	r24
    28ec:	e2 f7       	brpl	.-8      	; 0x28e6 <DIO_u8GetPinValue+0xe4>
    28ee:	ca 01       	movw	r24, r20
    28f0:	81 70       	andi	r24, 0x01	; 1
    28f2:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {

    }
    return(DIO_u8StorePinValue);
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <DIO_voidSetPortSpecificDirection>:

void DIO_voidSetPortSpecificDirection (u8 Copy_u8PortName, u8 Copy_u8PinDirection)
{
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	00 d0       	rcall	.+0      	; 0x290c <DIO_voidSetPortSpecificDirection+0x6>
    290c:	00 d0       	rcall	.+0      	; 0x290e <DIO_voidSetPortSpecificDirection+0x8>
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PinDirection <= 0XFF)
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	84 30       	cpi	r24, 0x04	; 4
    291a:	90 f5       	brcc	.+100    	; 0x2980 <DIO_voidSetPortSpecificDirection+0x7a>
    {
        switch (Copy_u8PortName)
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	3c 83       	std	Y+4, r19	; 0x04
    2924:	2b 83       	std	Y+3, r18	; 0x03
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	9c 81       	ldd	r25, Y+4	; 0x04
    292a:	81 30       	cpi	r24, 0x01	; 1
    292c:	91 05       	cpc	r25, r1
    292e:	d1 f0       	breq	.+52     	; 0x2964 <DIO_voidSetPortSpecificDirection+0x5e>
    2930:	2b 81       	ldd	r18, Y+3	; 0x03
    2932:	3c 81       	ldd	r19, Y+4	; 0x04
    2934:	22 30       	cpi	r18, 0x02	; 2
    2936:	31 05       	cpc	r19, r1
    2938:	2c f4       	brge	.+10     	; 0x2944 <DIO_voidSetPortSpecificDirection+0x3e>
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	9c 81       	ldd	r25, Y+4	; 0x04
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	61 f0       	breq	.+24     	; 0x295a <DIO_voidSetPortSpecificDirection+0x54>
    2942:	1e c0       	rjmp	.+60     	; 0x2980 <DIO_voidSetPortSpecificDirection+0x7a>
    2944:	2b 81       	ldd	r18, Y+3	; 0x03
    2946:	3c 81       	ldd	r19, Y+4	; 0x04
    2948:	22 30       	cpi	r18, 0x02	; 2
    294a:	31 05       	cpc	r19, r1
    294c:	81 f0       	breq	.+32     	; 0x296e <DIO_voidSetPortSpecificDirection+0x68>
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	83 30       	cpi	r24, 0x03	; 3
    2954:	91 05       	cpc	r25, r1
    2956:	81 f0       	breq	.+32     	; 0x2978 <DIO_voidSetPortSpecificDirection+0x72>
    2958:	13 c0       	rjmp	.+38     	; 0x2980 <DIO_voidSetPortSpecificDirection+0x7a>
        {
            case PORTA:
                DIO_DDRA = Copy_u8PinDirection;
    295a:	ea e3       	ldi	r30, 0x3A	; 58
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	80 83       	st	Z, r24
    2962:	0e c0       	rjmp	.+28     	; 0x2980 <DIO_voidSetPortSpecificDirection+0x7a>
            break;

            case PORTB:
                DIO_DDRB = Copy_u8PinDirection;
    2964:	e7 e3       	ldi	r30, 0x37	; 55
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	80 83       	st	Z, r24
    296c:	09 c0       	rjmp	.+18     	; 0x2980 <DIO_voidSetPortSpecificDirection+0x7a>
            break;

            case PORTC:
                DIO_DDRC = Copy_u8PinDirection;
    296e:	e4 e3       	ldi	r30, 0x34	; 52
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	80 83       	st	Z, r24
    2976:	04 c0       	rjmp	.+8      	; 0x2980 <DIO_voidSetPortSpecificDirection+0x7a>
            break;

            case PORTD:
                DIO_DDRD = Copy_u8PinDirection;
    2978:	e1 e3       	ldi	r30, 0x31	; 49
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	80 83       	st	Z, r24
    }
    else
    {

    }
}
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	08 95       	ret

0000298e <DIO_voidSetPortSpecificValue>:

void DIO_voidSetPortSpecificValue (u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	00 d0       	rcall	.+0      	; 0x2994 <DIO_voidSetPortSpecificValue+0x6>
    2994:	00 d0       	rcall	.+0      	; 0x2996 <DIO_voidSetPortSpecificValue+0x8>
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	89 83       	std	Y+1, r24	; 0x01
    299c:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PortValue <= 0XFF)
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	84 30       	cpi	r24, 0x04	; 4
    29a2:	90 f5       	brcc	.+100    	; 0x2a08 <DIO_voidSetPortSpecificValue+0x7a>
    {
        switch (Copy_u8PortName)
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	3c 83       	std	Y+4, r19	; 0x04
    29ac:	2b 83       	std	Y+3, r18	; 0x03
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	81 30       	cpi	r24, 0x01	; 1
    29b4:	91 05       	cpc	r25, r1
    29b6:	d1 f0       	breq	.+52     	; 0x29ec <DIO_voidSetPortSpecificValue+0x5e>
    29b8:	2b 81       	ldd	r18, Y+3	; 0x03
    29ba:	3c 81       	ldd	r19, Y+4	; 0x04
    29bc:	22 30       	cpi	r18, 0x02	; 2
    29be:	31 05       	cpc	r19, r1
    29c0:	2c f4       	brge	.+10     	; 0x29cc <DIO_voidSetPortSpecificValue+0x3e>
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	9c 81       	ldd	r25, Y+4	; 0x04
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	61 f0       	breq	.+24     	; 0x29e2 <DIO_voidSetPortSpecificValue+0x54>
    29ca:	1e c0       	rjmp	.+60     	; 0x2a08 <DIO_voidSetPortSpecificValue+0x7a>
    29cc:	2b 81       	ldd	r18, Y+3	; 0x03
    29ce:	3c 81       	ldd	r19, Y+4	; 0x04
    29d0:	22 30       	cpi	r18, 0x02	; 2
    29d2:	31 05       	cpc	r19, r1
    29d4:	81 f0       	breq	.+32     	; 0x29f6 <DIO_voidSetPortSpecificValue+0x68>
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	9c 81       	ldd	r25, Y+4	; 0x04
    29da:	83 30       	cpi	r24, 0x03	; 3
    29dc:	91 05       	cpc	r25, r1
    29de:	81 f0       	breq	.+32     	; 0x2a00 <DIO_voidSetPortSpecificValue+0x72>
    29e0:	13 c0       	rjmp	.+38     	; 0x2a08 <DIO_voidSetPortSpecificValue+0x7a>
        {
            case PORTA:
                DIO_PORTA = Copy_u8PortValue;
    29e2:	eb e3       	ldi	r30, 0x3B	; 59
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	80 83       	st	Z, r24
    29ea:	0e c0       	rjmp	.+28     	; 0x2a08 <DIO_voidSetPortSpecificValue+0x7a>
            break;

            case PORTB:
                DIO_PORTB = Copy_u8PortValue;
    29ec:	e8 e3       	ldi	r30, 0x38	; 56
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	80 83       	st	Z, r24
    29f4:	09 c0       	rjmp	.+18     	; 0x2a08 <DIO_voidSetPortSpecificValue+0x7a>
            break;

            case PORTC:
                DIO_PORTC = Copy_u8PortValue;
    29f6:	e5 e3       	ldi	r30, 0x35	; 53
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	80 83       	st	Z, r24
    29fe:	04 c0       	rjmp	.+8      	; 0x2a08 <DIO_voidSetPortSpecificValue+0x7a>
            break;

            case PORTD:
                DIO_PORTD = Copy_u8PortValue;
    2a00:	e2 e3       	ldi	r30, 0x32	; 50
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	80 83       	st	Z, r24
    }
    else
    {

    }
}
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <DIO_voidSetPortDirection+0x6>
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <DIO_voidSetPortDirection+0x8>
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PortValue <= OUTPUT)
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	84 30       	cpi	r24, 0x04	; 4
    2a2a:	08 f0       	brcs	.+2      	; 0x2a2e <DIO_voidSetPortDirection+0x18>
    2a2c:	5e c0       	rjmp	.+188    	; 0x2aea <DIO_voidSetPortDirection+0xd4>
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	82 30       	cpi	r24, 0x02	; 2
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <DIO_voidSetPortDirection+0x20>
    2a34:	5a c0       	rjmp	.+180    	; 0x2aea <DIO_voidSetPortDirection+0xd4>
    {
        switch (Copy_u8PortName)
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	3c 83       	std	Y+4, r19	; 0x04
    2a3e:	2b 83       	std	Y+3, r18	; 0x03
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	9c 81       	ldd	r25, Y+4	; 0x04
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	91 05       	cpc	r25, r1
    2a48:	21 f1       	breq	.+72     	; 0x2a92 <DIO_voidSetPortDirection+0x7c>
    2a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a4e:	22 30       	cpi	r18, 0x02	; 2
    2a50:	31 05       	cpc	r19, r1
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <DIO_voidSetPortDirection+0x48>
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	61 f0       	breq	.+24     	; 0x2a74 <DIO_voidSetPortDirection+0x5e>
    2a5c:	46 c0       	rjmp	.+140    	; 0x2aea <DIO_voidSetPortDirection+0xd4>
    2a5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a60:	3c 81       	ldd	r19, Y+4	; 0x04
    2a62:	22 30       	cpi	r18, 0x02	; 2
    2a64:	31 05       	cpc	r19, r1
    2a66:	21 f1       	breq	.+72     	; 0x2ab0 <DIO_voidSetPortDirection+0x9a>
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	83 30       	cpi	r24, 0x03	; 3
    2a6e:	91 05       	cpc	r25, r1
    2a70:	71 f1       	breq	.+92     	; 0x2ace <DIO_voidSetPortDirection+0xb8>
    2a72:	3b c0       	rjmp	.+118    	; 0x2aea <DIO_voidSetPortDirection+0xd4>
        {
            case PORTA:
                if(Copy_u8PortValue == OUTPUT)
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	81 30       	cpi	r24, 0x01	; 1
    2a78:	29 f4       	brne	.+10     	; 0x2a84 <DIO_voidSetPortDirection+0x6e>
                {
                    DIO_DDRA = 0XFF;
    2a7a:	ea e3       	ldi	r30, 0x3A	; 58
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	8f ef       	ldi	r24, 0xFF	; 255
    2a80:	80 83       	st	Z, r24
    2a82:	33 c0       	rjmp	.+102    	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	88 23       	and	r24, r24
    2a88:	81 f5       	brne	.+96     	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRA = 0X00;
    2a8a:	ea e3       	ldi	r30, 0x3A	; 58
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	10 82       	st	Z, r1
    2a90:	2c c0       	rjmp	.+88     	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                {

                }
            break;
            case PORTB:
                if(Copy_u8PortValue == OUTPUT)
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	81 30       	cpi	r24, 0x01	; 1
    2a96:	29 f4       	brne	.+10     	; 0x2aa2 <DIO_voidSetPortDirection+0x8c>
                {
                    DIO_DDRB = 0XFF;
    2a98:	e7 e3       	ldi	r30, 0x37	; 55
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	8f ef       	ldi	r24, 0xFF	; 255
    2a9e:	80 83       	st	Z, r24
    2aa0:	24 c0       	rjmp	.+72     	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	88 23       	and	r24, r24
    2aa6:	09 f5       	brne	.+66     	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRB = 0X00;
    2aa8:	e7 e3       	ldi	r30, 0x37	; 55
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	10 82       	st	Z, r1
    2aae:	1d c0       	rjmp	.+58     	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                {

                }
            break;
            case PORTC:
                if(Copy_u8PortValue == OUTPUT)
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	81 30       	cpi	r24, 0x01	; 1
    2ab4:	29 f4       	brne	.+10     	; 0x2ac0 <DIO_voidSetPortDirection+0xaa>
                {
                    DIO_DDRC = 0XFF;
    2ab6:	e4 e3       	ldi	r30, 0x34	; 52
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	8f ef       	ldi	r24, 0xFF	; 255
    2abc:	80 83       	st	Z, r24
    2abe:	15 c0       	rjmp	.+42     	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	88 23       	and	r24, r24
    2ac4:	91 f4       	brne	.+36     	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRC = 0X00;
    2ac6:	e4 e3       	ldi	r30, 0x34	; 52
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	10 82       	st	Z, r1
    2acc:	0e c0       	rjmp	.+28     	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                {

                }
            break;
            case PORTD:
                if(Copy_u8PortValue == OUTPUT)
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	81 30       	cpi	r24, 0x01	; 1
    2ad2:	29 f4       	brne	.+10     	; 0x2ade <DIO_voidSetPortDirection+0xc8>
                {
                    DIO_DDRD = 0XFF;
    2ad4:	e1 e3       	ldi	r30, 0x31	; 49
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	8f ef       	ldi	r24, 0xFF	; 255
    2ada:	80 83       	st	Z, r24
    2adc:	06 c0       	rjmp	.+12     	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	88 23       	and	r24, r24
    2ae2:	19 f4       	brne	.+6      	; 0x2aea <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRD = 0X00;
    2ae4:	e1 e3       	ldi	r30, 0x31	; 49
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	10 82       	st	Z, r1
    }
    else
    {

    }
}
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	08 95       	ret

00002af8 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    2af8:	df 93       	push	r29
    2afa:	cf 93       	push	r28
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <DIO_voidSetPortValue+0x6>
    2afe:	00 d0       	rcall	.+0      	; 0x2b00 <DIO_voidSetPortValue+0x8>
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	89 83       	std	Y+1, r24	; 0x01
    2b06:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PortValue <= HIGH)
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	84 30       	cpi	r24, 0x04	; 4
    2b0c:	08 f0       	brcs	.+2      	; 0x2b10 <DIO_voidSetPortValue+0x18>
    2b0e:	5e c0       	rjmp	.+188    	; 0x2bcc <DIO_voidSetPortValue+0xd4>
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	82 30       	cpi	r24, 0x02	; 2
    2b14:	08 f0       	brcs	.+2      	; 0x2b18 <DIO_voidSetPortValue+0x20>
    2b16:	5a c0       	rjmp	.+180    	; 0x2bcc <DIO_voidSetPortValue+0xd4>
    {
        switch (Copy_u8PortName)
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	3c 83       	std	Y+4, r19	; 0x04
    2b20:	2b 83       	std	Y+3, r18	; 0x03
    2b22:	8b 81       	ldd	r24, Y+3	; 0x03
    2b24:	9c 81       	ldd	r25, Y+4	; 0x04
    2b26:	81 30       	cpi	r24, 0x01	; 1
    2b28:	91 05       	cpc	r25, r1
    2b2a:	21 f1       	breq	.+72     	; 0x2b74 <DIO_voidSetPortValue+0x7c>
    2b2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b30:	22 30       	cpi	r18, 0x02	; 2
    2b32:	31 05       	cpc	r19, r1
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <DIO_voidSetPortValue+0x48>
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	61 f0       	breq	.+24     	; 0x2b56 <DIO_voidSetPortValue+0x5e>
    2b3e:	46 c0       	rjmp	.+140    	; 0x2bcc <DIO_voidSetPortValue+0xd4>
    2b40:	2b 81       	ldd	r18, Y+3	; 0x03
    2b42:	3c 81       	ldd	r19, Y+4	; 0x04
    2b44:	22 30       	cpi	r18, 0x02	; 2
    2b46:	31 05       	cpc	r19, r1
    2b48:	21 f1       	breq	.+72     	; 0x2b92 <DIO_voidSetPortValue+0x9a>
    2b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4e:	83 30       	cpi	r24, 0x03	; 3
    2b50:	91 05       	cpc	r25, r1
    2b52:	71 f1       	breq	.+92     	; 0x2bb0 <DIO_voidSetPortValue+0xb8>
    2b54:	3b c0       	rjmp	.+118    	; 0x2bcc <DIO_voidSetPortValue+0xd4>
        {
            case PORTA:
                if(Copy_u8PortValue == HIGH)
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	81 30       	cpi	r24, 0x01	; 1
    2b5a:	29 f4       	brne	.+10     	; 0x2b66 <DIO_voidSetPortValue+0x6e>
                {
                    DIO_PORTA = 0XFF;
    2b5c:	eb e3       	ldi	r30, 0x3B	; 59
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	8f ef       	ldi	r24, 0xFF	; 255
    2b62:	80 83       	st	Z, r24
    2b64:	33 c0       	rjmp	.+102    	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == LOW)
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	88 23       	and	r24, r24
    2b6a:	81 f5       	brne	.+96     	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTA = 0X00;
    2b6c:	eb e3       	ldi	r30, 0x3B	; 59
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	10 82       	st	Z, r1
    2b72:	2c c0       	rjmp	.+88     	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                {

                }
            break;
            case PORTB:
                if(Copy_u8PortValue == HIGH)
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	81 30       	cpi	r24, 0x01	; 1
    2b78:	29 f4       	brne	.+10     	; 0x2b84 <DIO_voidSetPortValue+0x8c>
                {
                    DIO_PORTB = 0XFF;
    2b7a:	e8 e3       	ldi	r30, 0x38	; 56
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	8f ef       	ldi	r24, 0xFF	; 255
    2b80:	80 83       	st	Z, r24
    2b82:	24 c0       	rjmp	.+72     	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == LOW)
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	88 23       	and	r24, r24
    2b88:	09 f5       	brne	.+66     	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTB = 0X00;
    2b8a:	e8 e3       	ldi	r30, 0x38	; 56
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	10 82       	st	Z, r1
    2b90:	1d c0       	rjmp	.+58     	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                {

                }
            break;
            case PORTC:
                if(Copy_u8PortValue == HIGH)
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	81 30       	cpi	r24, 0x01	; 1
    2b96:	29 f4       	brne	.+10     	; 0x2ba2 <DIO_voidSetPortValue+0xaa>
                {
                    DIO_PORTC = 0XFF;
    2b98:	e5 e3       	ldi	r30, 0x35	; 53
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	8f ef       	ldi	r24, 0xFF	; 255
    2b9e:	80 83       	st	Z, r24
    2ba0:	15 c0       	rjmp	.+42     	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	88 23       	and	r24, r24
    2ba6:	91 f4       	brne	.+36     	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTC = 0X00;
    2ba8:	e5 e3       	ldi	r30, 0x35	; 53
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	10 82       	st	Z, r1
    2bae:	0e c0       	rjmp	.+28     	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                {

                }
            break;
            case PORTD:
                if(Copy_u8PortValue == HIGH)
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	81 30       	cpi	r24, 0x01	; 1
    2bb4:	29 f4       	brne	.+10     	; 0x2bc0 <DIO_voidSetPortValue+0xc8>
                {
                    DIO_PORTD = 0XFF;
    2bb6:	e2 e3       	ldi	r30, 0x32	; 50
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	8f ef       	ldi	r24, 0xFF	; 255
    2bbc:	80 83       	st	Z, r24
    2bbe:	06 c0       	rjmp	.+12     	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == LOW)
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	88 23       	and	r24, r24
    2bc4:	19 f4       	brne	.+6      	; 0x2bcc <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTD = 0X00;
    2bc6:	e2 e3       	ldi	r30, 0x32	; 50
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	10 82       	st	Z, r1
    }
    else
    {

    }
}
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue (u8 Copy_u8PortName)
{
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <DIO_u8GetPortValue+0x6>
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <DIO_u8GetPortValue+0x8>
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    2be6:	8a 83       	std	Y+2, r24	; 0x02
	u8 DIO_u8StorePinValue = 0x00;
    2be8:	19 82       	std	Y+1, r1	; 0x01
    
    if(Copy_u8PortName <= PORTD)
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	84 30       	cpi	r24, 0x04	; 4
    2bee:	08 f0       	brcs	.+2      	; 0x2bf2 <DIO_u8GetPortValue+0x18>
    2bf0:	3e c0       	rjmp	.+124    	; 0x2c6e <DIO_u8GetPortValue+0x94>
    {
	    switch(Copy_u8PortName)
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	3c 83       	std	Y+4, r19	; 0x04
    2bfa:	2b 83       	std	Y+3, r18	; 0x03
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2c00:	81 30       	cpi	r24, 0x01	; 1
    2c02:	91 05       	cpc	r25, r1
    2c04:	e9 f0       	breq	.+58     	; 0x2c40 <DIO_u8GetPortValue+0x66>
    2c06:	2b 81       	ldd	r18, Y+3	; 0x03
    2c08:	3c 81       	ldd	r19, Y+4	; 0x04
    2c0a:	22 30       	cpi	r18, 0x02	; 2
    2c0c:	31 05       	cpc	r19, r1
    2c0e:	2c f4       	brge	.+10     	; 0x2c1a <DIO_u8GetPortValue+0x40>
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	61 f0       	breq	.+24     	; 0x2c30 <DIO_u8GetPortValue+0x56>
    2c18:	2a c0       	rjmp	.+84     	; 0x2c6e <DIO_u8GetPortValue+0x94>
    2c1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c1e:	22 30       	cpi	r18, 0x02	; 2
    2c20:	31 05       	cpc	r19, r1
    2c22:	b1 f0       	breq	.+44     	; 0x2c50 <DIO_u8GetPortValue+0x76>
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	9c 81       	ldd	r25, Y+4	; 0x04
    2c28:	83 30       	cpi	r24, 0x03	; 3
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	c9 f0       	breq	.+50     	; 0x2c60 <DIO_u8GetPortValue+0x86>
    2c2e:	1f c0       	rjmp	.+62     	; 0x2c6e <DIO_u8GetPortValue+0x94>
	    {
	    	case PORTA:
	    		if(DIO_PINA == 0XFF)
    2c30:	e9 e3       	ldi	r30, 0x39	; 57
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	8f 3f       	cpi	r24, 0xFF	; 255
    2c38:	d1 f4       	brne	.+52     	; 0x2c6e <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    2c3a:	8f ef       	ldi	r24, 0xFF	; 255
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	17 c0       	rjmp	.+46     	; 0x2c6e <DIO_u8GetPortValue+0x94>
                {

                }
	    	break;
	    	case PORTB:
	    		if(DIO_PINB == 0XFF)
    2c40:	e6 e3       	ldi	r30, 0x36	; 54
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	8f 3f       	cpi	r24, 0xFF	; 255
    2c48:	91 f4       	brne	.+36     	; 0x2c6e <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    2c4a:	8f ef       	ldi	r24, 0xFF	; 255
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    2c4e:	0f c0       	rjmp	.+30     	; 0x2c6e <DIO_u8GetPortValue+0x94>
                {

                }
	    	break;
	    	case PORTC:
	    		if(DIO_PINC == 0XFF)
    2c50:	e3 e3       	ldi	r30, 0x33	; 51
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	8f 3f       	cpi	r24, 0xFF	; 255
    2c58:	51 f4       	brne	.+20     	; 0x2c6e <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	07 c0       	rjmp	.+14     	; 0x2c6e <DIO_u8GetPortValue+0x94>
                {

                }
	    	break;
	    	case PORTD:
	    		if(DIO_PIND == 0XFF)
    2c60:	e0 e3       	ldi	r30, 0x30	; 48
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	8f 3f       	cpi	r24, 0xFF	; 255
    2c68:	11 f4       	brne	.+4      	; 0x2c6e <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    2c6a:	8f ef       	ldi	r24, 0xFF	; 255
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    else
    {

    }

	return(DIO_u8StorePinValue);
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <DDIO_voidSetPortPullUp>:

void DDIO_voidSetPortPullUp(u8 Copy_u8PortName)
{
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <DDIO_voidSetPortPullUp+0x6>
    2c84:	0f 92       	push	r0
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8PortName <= PORTD)
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	84 30       	cpi	r24, 0x04	; 4
    2c90:	08 f0       	brcs	.+2      	; 0x2c94 <DDIO_voidSetPortPullUp+0x16>
    2c92:	3e c0       	rjmp	.+124    	; 0x2d10 <DDIO_voidSetPortPullUp+0x92>
    {
	    switch(Copy_u8PortName)
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	3b 83       	std	Y+3, r19	; 0x03
    2c9c:	2a 83       	std	Y+2, r18	; 0x02
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	e9 f0       	breq	.+58     	; 0x2ce2 <DDIO_voidSetPortPullUp+0x64>
    2ca8:	2a 81       	ldd	r18, Y+2	; 0x02
    2caa:	3b 81       	ldd	r19, Y+3	; 0x03
    2cac:	22 30       	cpi	r18, 0x02	; 2
    2cae:	31 05       	cpc	r19, r1
    2cb0:	2c f4       	brge	.+10     	; 0x2cbc <DDIO_voidSetPortPullUp+0x3e>
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	61 f0       	breq	.+24     	; 0x2cd2 <DDIO_voidSetPortPullUp+0x54>
    2cba:	2a c0       	rjmp	.+84     	; 0x2d10 <DDIO_voidSetPortPullUp+0x92>
    2cbc:	2a 81       	ldd	r18, Y+2	; 0x02
    2cbe:	3b 81       	ldd	r19, Y+3	; 0x03
    2cc0:	22 30       	cpi	r18, 0x02	; 2
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	b1 f0       	breq	.+44     	; 0x2cf2 <DDIO_voidSetPortPullUp+0x74>
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cca:	83 30       	cpi	r24, 0x03	; 3
    2ccc:	91 05       	cpc	r25, r1
    2cce:	c9 f0       	breq	.+50     	; 0x2d02 <DDIO_voidSetPortPullUp+0x84>
    2cd0:	1f c0       	rjmp	.+62     	; 0x2d10 <DDIO_voidSetPortPullUp+0x92>
	    {
	    	case PORTA:
	    		DIO_DDRA = 0X00;
    2cd2:	ea e3       	ldi	r30, 0x3A	; 58
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	10 82       	st	Z, r1
	    		DIO_PORTA = 0XFF;
    2cd8:	eb e3       	ldi	r30, 0x3B	; 59
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	8f ef       	ldi	r24, 0xFF	; 255
    2cde:	80 83       	st	Z, r24
    2ce0:	17 c0       	rjmp	.+46     	; 0x2d10 <DDIO_voidSetPortPullUp+0x92>
	    	break;
	    	case PORTB:
	    		DIO_DDRB = 0X00;
    2ce2:	e7 e3       	ldi	r30, 0x37	; 55
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	10 82       	st	Z, r1
	    		DIO_PORTB = 0XFF;
    2ce8:	e8 e3       	ldi	r30, 0x38	; 56
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	8f ef       	ldi	r24, 0xFF	; 255
    2cee:	80 83       	st	Z, r24
    2cf0:	0f c0       	rjmp	.+30     	; 0x2d10 <DDIO_voidSetPortPullUp+0x92>
	    	break;
	    	case PORTC:
	    		DIO_DDRC = 0X00;
    2cf2:	e4 e3       	ldi	r30, 0x34	; 52
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	10 82       	st	Z, r1
	    		DIO_PORTC = 0XFF;
    2cf8:	e5 e3       	ldi	r30, 0x35	; 53
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	8f ef       	ldi	r24, 0xFF	; 255
    2cfe:	80 83       	st	Z, r24
    2d00:	07 c0       	rjmp	.+14     	; 0x2d10 <DDIO_voidSetPortPullUp+0x92>
	    	break;
	    	case PORTD:
	    		DIO_DDRD = 0X00;
    2d02:	e1 e3       	ldi	r30, 0x31	; 49
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	10 82       	st	Z, r1
	    		DIO_PORTD = 0XFF;
    2d08:	e2 e3       	ldi	r30, 0x32	; 50
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	8f ef       	ldi	r24, 0xFF	; 255
    2d0e:	80 83       	st	Z, r24
    }
    else
    {
        
    }
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <ADC_voidInit>:


         

void ADC_voidInit(void)
{
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    /*Select The Prescaler = 64*/
    ADCSRA &= ADC_PRESCALER_MASK_CLR;
    2d24:	a6 e2       	ldi	r26, 0x26	; 38
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	e6 e2       	ldi	r30, 0x26	; 38
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 7f       	andi	r24, 0xF8	; 248
    2d30:	8c 93       	st	X, r24
    ADCSRA |= ADC_PRESCALER_SELECT_VALUE;
    2d32:	a6 e2       	ldi	r26, 0x26	; 38
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	e6 e2       	ldi	r30, 0x26	; 38
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	86 60       	ori	r24, 0x06	; 6
    2d3e:	8c 93       	st	X, r24
    /*Adjustment*/
    #if ADC_RESULT_ADJUSTMENT == ACD_LEFT_ADJUST
        SET_BIT(ADMUX, ADMUX_ADLAR);
    2d40:	a7 e2       	ldi	r26, 0x27	; 39
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e7 e2       	ldi	r30, 0x27	; 39
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	80 62       	ori	r24, 0x20	; 32
    2d4c:	8c 93       	st	X, r24
    #elif ADC_RESULT_ADJUSTMENT == ACD_RIGHT_ADJUST
        CLR_BIT(ADMUX, ADMUX_ADLAR);
    #endif
    /*Default Choose ACD Channel */
    ADMUX &= ADC_Channel_MASK_CLR;
    2d4e:	a7 e2       	ldi	r26, 0x27	; 39
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e7 e2       	ldi	r30, 0x27	; 39
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	80 7e       	andi	r24, 0xE0	; 224
    2d5a:	8c 93       	st	X, r24
    ADMUX |= ADC_Channel_0;
    2d5c:	a7 e2       	ldi	r26, 0x27	; 39
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e7 e2       	ldi	r30, 0x27	; 39
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	8c 93       	st	X, r24
    /*Select Mode Of ADC*/
    #if ADC_MODE_SELECT == ADC_SINGLE_CONVERSION_MODE
        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    2d68:	a6 e2       	ldi	r26, 0x26	; 38
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	e6 e2       	ldi	r30, 0x26	; 38
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	8f 7d       	andi	r24, 0xDF	; 223
    2d74:	8c 93       	st	X, r24
        SET_BIT(ADCSRA, ADCSRA_ADATE);
        SFIOR &= ADC_AUTO_TRIG_SRC_MASK_CLR;
        SFIOR |= ADC_AUTO_TRIG_SRC_FREE_RUNNING_MSK;
    #endif
    /*Referance voltage*/
    ADCSRA &= ADC_REFERANCE_VOLTAGE_MASK_CLR;
    2d76:	a6 e2       	ldi	r26, 0x26	; 38
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e6 e2       	ldi	r30, 0x26	; 38
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	8f 73       	andi	r24, 0x3F	; 63
    2d82:	8c 93       	st	X, r24
    ADCSRA |= ADC_REFERANCE_VOLTAGE_SELECT_VALUE;
    2d84:	a6 e2       	ldi	r26, 0x26	; 38
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e6 e2       	ldi	r30, 0x26	; 38
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	80 64       	ori	r24, 0x40	; 64
    2d90:	8c 93       	st	X, r24
    /*Enable ADC*/
    SET_BIT(ADCSRA, ADCSRA_ADEN);   
    2d92:	a6 e2       	ldi	r26, 0x26	; 38
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e6 e2       	ldi	r30, 0x26	; 38
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	80 68       	ori	r24, 0x80	; 128
    2d9e:	8c 93       	st	X, r24
}
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <ACD_voidStartConversionSynchronous>:




u8 ACD_voidStartConversionSynchronous(u8 Copu_u8ADCChannel)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	0f 92       	push	r0
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	89 83       	std	Y+1, r24	; 0x01
    /* Choose ACD Channel */
    ADMUX &= ADC_Channel_MASK_CLR;
    2db2:	a7 e2       	ldi	r26, 0x27	; 39
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	e7 e2       	ldi	r30, 0x27	; 39
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	80 7e       	andi	r24, 0xE0	; 224
    2dbe:	8c 93       	st	X, r24
    ADMUX |= Copu_u8ADCChannel;
    2dc0:	a7 e2       	ldi	r26, 0x27	; 39
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	e7 e2       	ldi	r30, 0x27	; 39
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	90 81       	ld	r25, Z
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	89 2b       	or	r24, r25
    2dce:	8c 93       	st	X, r24
    /*Trigger ADC*/
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    2dd0:	a6 e2       	ldi	r26, 0x26	; 38
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	e6 e2       	ldi	r30, 0x26	; 38
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	80 64       	ori	r24, 0x40	; 64
    2ddc:	8c 93       	st	X, r24
    /*Polling (Busy Wait) Till The ADC End Conversion*/
    while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
    2dde:	e6 e2       	ldi	r30, 0x26	; 38
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	82 95       	swap	r24
    2de6:	8f 70       	andi	r24, 0x0F	; 15
    2de8:	88 2f       	mov	r24, r24
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	81 70       	andi	r24, 0x01	; 1
    2dee:	90 70       	andi	r25, 0x00	; 0
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	a9 f3       	breq	.-22     	; 0x2dde <ACD_voidStartConversionSynchronous+0x38>

    /*Clear ADC Flag*/
    SET_BIT(ADCSRA, ADCSRA_ADIF);
    2df4:	a6 e2       	ldi	r26, 0x26	; 38
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e6 e2       	ldi	r30, 0x26	; 38
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	80 61       	ori	r24, 0x10	; 16
    2e00:	8c 93       	st	X, r24

    /*Return The Digital Value*/
    #if ADC_RESULT_ADJUSTMENT == ACD_LEFT_ADJUST
        return (ADCH);
    2e02:	e5 e2       	ldi	r30, 0x25	; 37
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    #elif ADC_RESULT_ADJUSTMENT == ACD_RIGHT_ADJUST
        return (ADCL);
    #endif
}
    2e08:	0f 90       	pop	r0
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	08 95       	ret

00002e10 <ADC_voidMapping>:

u8 ADC_voidMapping(u16 Copy_u8XMaxValue, u16 Copy_u8XMinValue, u8 Copy_u8YMaxValue, u8 Copy_u8YMinValue, u16 Copy_u8X)
{
    2e10:	0f 93       	push	r16
    2e12:	1f 93       	push	r17
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
    2e1c:	2a 97       	sbiw	r28, 0x0a	; 10
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	9c 83       	std	Y+4, r25	; 0x04
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
    2e2c:	7e 83       	std	Y+6, r23	; 0x06
    2e2e:	6d 83       	std	Y+5, r22	; 0x05
    2e30:	4f 83       	std	Y+7, r20	; 0x07
    2e32:	28 87       	std	Y+8, r18	; 0x08
    2e34:	1a 87       	std	Y+10, r17	; 0x0a
    2e36:	09 87       	std	Y+9, r16	; 0x09
	u8 Local_u8Slope = 0;
    2e38:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Value = 0;
    2e3a:	19 82       	std	Y+1, r1	; 0x01
	Local_u8Slope = (Copy_u8YMaxValue - Copy_u8YMinValue) / (Copy_u8XMaxValue - Copy_u8XMinValue);
    2e3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e3e:	28 2f       	mov	r18, r24
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	88 85       	ldd	r24, Y+8	; 0x08
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a9 01       	movw	r20, r18
    2e4a:	48 1b       	sub	r20, r24
    2e4c:	59 0b       	sbc	r21, r25
    2e4e:	ca 01       	movw	r24, r20
    2e50:	ac 01       	movw	r20, r24
    2e52:	2b 81       	ldd	r18, Y+3	; 0x03
    2e54:	3c 81       	ldd	r19, Y+4	; 0x04
    2e56:	8d 81       	ldd	r24, Y+5	; 0x05
    2e58:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5a:	28 1b       	sub	r18, r24
    2e5c:	39 0b       	sbc	r19, r25
    2e5e:	ca 01       	movw	r24, r20
    2e60:	b9 01       	movw	r22, r18
    2e62:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__udivmodhi4>
    2e66:	cb 01       	movw	r24, r22
    2e68:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8Value = Local_u8Slope * Copy_u8X;
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	ac 01       	movw	r20, r24
    2e76:	24 9f       	mul	r18, r20
    2e78:	c0 01       	movw	r24, r0
    2e7a:	25 9f       	mul	r18, r21
    2e7c:	90 0d       	add	r25, r0
    2e7e:	34 9f       	mul	r19, r20
    2e80:	90 0d       	add	r25, r0
    2e82:	11 24       	eor	r1, r1
    2e84:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8Value);
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e88:	2a 96       	adiw	r28, 0x0a	; 10
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	08 95       	ret

00002e9e <ACD_voidStartConversionASynchronous>:

void(*ADC_NotificationFunction)(u8 *) = NULL_POINTER;
void ACD_voidStartConversionASynchronous(u8 Copu_u8ADCChannel, void(*NotificationFunction)(u8 *))
{
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <ACD_voidStartConversionASynchronous+0x6>
    2ea4:	0f 92       	push	r0
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	89 83       	std	Y+1, r24	; 0x01
    2eac:	7b 83       	std	Y+3, r23	; 0x03
    2eae:	6a 83       	std	Y+2, r22	; 0x02
    ADC_NotificationFunction = NotificationFunction;
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb4:	90 93 fc 01 	sts	0x01FC, r25
    2eb8:	80 93 fb 01 	sts	0x01FB, r24
    /* Choose ACD Channel */
    ADMUX &= ADC_Channel_MASK_CLR;
    2ebc:	a7 e2       	ldi	r26, 0x27	; 39
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e7 e2       	ldi	r30, 0x27	; 39
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	80 7e       	andi	r24, 0xE0	; 224
    2ec8:	8c 93       	st	X, r24
    ADMUX |= Copu_u8ADCChannel;
    2eca:	a7 e2       	ldi	r26, 0x27	; 39
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e7 e2       	ldi	r30, 0x27	; 39
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	90 81       	ld	r25, Z
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	89 2b       	or	r24, r25
    2ed8:	8c 93       	st	X, r24
    /*Enable PIE*/
    SET_BIT(ADCSRA, ADCSRA_ADIE);
    2eda:	a6 e2       	ldi	r26, 0x26	; 38
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	e6 e2       	ldi	r30, 0x26	; 38
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	88 60       	ori	r24, 0x08	; 8
    2ee6:	8c 93       	st	X, r24
    /*Trigger ADC*/
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    2ee8:	a6 e2       	ldi	r26, 0x26	; 38
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	e6 e2       	ldi	r30, 0x26	; 38
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	80 64       	ori	r24, 0x40	; 64
    2ef4:	8c 93       	st	X, r24
}
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <__vector_16>:

u8 ADC_u8Result = 0;
void __vector_16(void)   __attribute__((signal));
void __vector_16(void)
{
    2f02:	1f 92       	push	r1
    2f04:	0f 92       	push	r0
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	0f 92       	push	r0
    2f0a:	11 24       	eor	r1, r1
    2f0c:	2f 93       	push	r18
    2f0e:	3f 93       	push	r19
    2f10:	4f 93       	push	r20
    2f12:	5f 93       	push	r21
    2f14:	6f 93       	push	r22
    2f16:	7f 93       	push	r23
    2f18:	8f 93       	push	r24
    2f1a:	9f 93       	push	r25
    2f1c:	af 93       	push	r26
    2f1e:	bf 93       	push	r27
    2f20:	ef 93       	push	r30
    2f22:	ff 93       	push	r31
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    if(ADC_NotificationFunction != NULL_POINTER)
    2f2c:	80 91 fb 01 	lds	r24, 0x01FB
    2f30:	90 91 fc 01 	lds	r25, 0x01FC
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	61 f0       	breq	.+24     	; 0x2f50 <__vector_16+0x4e>
    {
        #if ADC_RESULT_ADJUSTMENT == ACD_LEFT_ADJUST
            ADC_u8Result = ADCH;
    2f38:	e5 e2       	ldi	r30, 0x25	; 37
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 93 fd 01 	sts	0x01FD, r24
            ADC_NotificationFunction(&ADC_u8Result);
    2f42:	e0 91 fb 01 	lds	r30, 0x01FB
    2f46:	f0 91 fc 01 	lds	r31, 0x01FC
    2f4a:	8d ef       	ldi	r24, 0xFD	; 253
    2f4c:	91 e0       	ldi	r25, 0x01	; 1
    2f4e:	09 95       	icall
    }
    else
    {
        
    }
}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	ff 91       	pop	r31
    2f56:	ef 91       	pop	r30
    2f58:	bf 91       	pop	r27
    2f5a:	af 91       	pop	r26
    2f5c:	9f 91       	pop	r25
    2f5e:	8f 91       	pop	r24
    2f60:	7f 91       	pop	r23
    2f62:	6f 91       	pop	r22
    2f64:	5f 91       	pop	r21
    2f66:	4f 91       	pop	r20
    2f68:	3f 91       	pop	r19
    2f6a:	2f 91       	pop	r18
    2f6c:	0f 90       	pop	r0
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	0f 90       	pop	r0
    2f72:	1f 90       	pop	r1
    2f74:	18 95       	reti

00002f76 <ULTRA_voidInit>:
#include "ULTRA_config.h"
#include "ULTRA_interface.h"


void ULTRA_voidInit()
{
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    TIMER_voidTimer1Init();
    2f7e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <TIMER_voidTimer1Init>
    GIE_voidEnableGlobalInterrupt();
    2f82:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <GIE_voidEnableGlobalInterrupt>
    ICU_voidControlInterrupt(ENABLE);
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <ICU_voidControlInterrupt>
    ICU_voidSenceModetrigger(RISING_EDGE);
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ICU_voidSenceModetrigger>

    DIO_voidSetPinDirection(ECHO_PORT, ECHO_PIN, INPUT);
    2f92:	83 e0       	ldi	r24, 0x03	; 3
    2f94:	66 e0       	ldi	r22, 0x06	; 6
    2f96:	40 e0       	ldi	r20, 0x00	; 0
    2f98:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(TRIG_PORT_SELECTION, TRIG_PIN_SELECTION, OUTPUT);
    2f9c:	83 e0       	ldi	r24, 0x03	; 3
    2f9e:	61 e0       	ldi	r22, 0x01	; 1
    2fa0:	41 e0       	ldi	r20, 0x01	; 1
    2fa2:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
}
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <ULTR_u16Calculations>:

u16 ULTR_u16Calculations(void)
{
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	ea 97       	sbiw	r28, 0x3a	; 58
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    volatile u16 ON          = 0;
    2fc0:	1a aa       	std	Y+50, r1	; 0x32
    2fc2:	19 aa       	std	Y+49, r1	; 0x31
    volatile u16 Duration    = 0;
    2fc4:	1c aa       	std	Y+52, r1	; 0x34
    2fc6:	1b aa       	std	Y+51, r1	; 0x33
    volatile u16 Distance    = 0;
    2fc8:	1e aa       	std	Y+54, r1	; 0x36
    2fca:	1d aa       	std	Y+53, r1	; 0x35
    volatile u16 A1_Reading  = 0;
    2fcc:	18 ae       	std	Y+56, r1	; 0x38
    2fce:	1f aa       	std	Y+55, r1	; 0x37
    volatile u16 A2_Reading  = 0;
    2fd0:	1a ae       	std	Y+58, r1	; 0x3a
    2fd2:	19 ae       	std	Y+57, r1	; 0x39

    //Clear Flag
    SET_BIT(TIFR, TIFR_ICF1);
    2fd4:	a8 e5       	ldi	r26, 0x58	; 88
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e8 e5       	ldi	r30, 0x58	; 88
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	80 62       	ori	r24, 0x20	; 32
    2fe2:	11 96       	adiw	r26, 0x01	; 1
    2fe4:	9c 93       	st	X, r25
    2fe6:	8e 93       	st	-X, r24

    //Trig Ultrasonic To Work
    DIO_voidSetPinValue(TRIG_PORT_SELECTION, TRIG_PIN_SELECTION, LOW);
    2fe8:	83 e0       	ldi	r24, 0x03	; 3
    2fea:	61 e0       	ldi	r22, 0x01	; 1
    2fec:	40 e0       	ldi	r20, 0x00	; 0
    2fee:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	a0 e0       	ldi	r26, 0x00	; 0
    2ff8:	b0 e4       	ldi	r27, 0x40	; 64
    2ffa:	8d a7       	std	Y+45, r24	; 0x2d
    2ffc:	9e a7       	std	Y+46, r25	; 0x2e
    2ffe:	af a7       	std	Y+47, r26	; 0x2f
    3000:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3002:	6d a5       	ldd	r22, Y+45	; 0x2d
    3004:	7e a5       	ldd	r23, Y+46	; 0x2e
    3006:	8f a5       	ldd	r24, Y+47	; 0x2f
    3008:	98 a9       	ldd	r25, Y+48	; 0x30
    300a:	2b ea       	ldi	r18, 0xAB	; 171
    300c:	3a ea       	ldi	r19, 0xAA	; 170
    300e:	4a e2       	ldi	r20, 0x2A	; 42
    3010:	50 e4       	ldi	r21, 0x40	; 64
    3012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	89 a7       	std	Y+41, r24	; 0x29
    301c:	9a a7       	std	Y+42, r25	; 0x2a
    301e:	ab a7       	std	Y+43, r26	; 0x2b
    3020:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3022:	69 a5       	ldd	r22, Y+41	; 0x29
    3024:	7a a5       	ldd	r23, Y+42	; 0x2a
    3026:	8b a5       	ldd	r24, Y+43	; 0x2b
    3028:	9c a5       	ldd	r25, Y+44	; 0x2c
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e8       	ldi	r20, 0x80	; 128
    3030:	5f e3       	ldi	r21, 0x3F	; 63
    3032:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3036:	88 23       	and	r24, r24
    3038:	1c f4       	brge	.+6      	; 0x3040 <ULTR_u16Calculations+0x94>
		__ticks = 1;
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	88 a7       	std	Y+40, r24	; 0x28
    303e:	91 c0       	rjmp	.+290    	; 0x3162 <ULTR_u16Calculations+0x1b6>
	else if (__tmp > 255)
    3040:	69 a5       	ldd	r22, Y+41	; 0x29
    3042:	7a a5       	ldd	r23, Y+42	; 0x2a
    3044:	8b a5       	ldd	r24, Y+43	; 0x2b
    3046:	9c a5       	ldd	r25, Y+44	; 0x2c
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	4f e7       	ldi	r20, 0x7F	; 127
    304e:	53 e4       	ldi	r21, 0x43	; 67
    3050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3054:	18 16       	cp	r1, r24
    3056:	0c f0       	brlt	.+2      	; 0x305a <ULTR_u16Calculations+0xae>
    3058:	7b c0       	rjmp	.+246    	; 0x3150 <ULTR_u16Calculations+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    305a:	6d a5       	ldd	r22, Y+45	; 0x2d
    305c:	7e a5       	ldd	r23, Y+46	; 0x2e
    305e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3060:	98 a9       	ldd	r25, Y+48	; 0x30
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	4a e7       	ldi	r20, 0x7A	; 122
    3068:	54 e4       	ldi	r21, 0x44	; 68
    306a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	8c a3       	std	Y+36, r24	; 0x24
    3074:	9d a3       	std	Y+37, r25	; 0x25
    3076:	ae a3       	std	Y+38, r26	; 0x26
    3078:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307a:	6c a1       	ldd	r22, Y+36	; 0x24
    307c:	7d a1       	ldd	r23, Y+37	; 0x25
    307e:	8e a1       	ldd	r24, Y+38	; 0x26
    3080:	9f a1       	ldd	r25, Y+39	; 0x27
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	4a ef       	ldi	r20, 0xFA	; 250
    3088:	54 e4       	ldi	r21, 0x44	; 68
    308a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	88 a3       	std	Y+32, r24	; 0x20
    3094:	99 a3       	std	Y+33, r25	; 0x21
    3096:	aa a3       	std	Y+34, r26	; 0x22
    3098:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    309a:	68 a1       	ldd	r22, Y+32	; 0x20
    309c:	79 a1       	ldd	r23, Y+33	; 0x21
    309e:	8a a1       	ldd	r24, Y+34	; 0x22
    30a0:	9b a1       	ldd	r25, Y+35	; 0x23
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 e8       	ldi	r20, 0x80	; 128
    30a8:	5f e3       	ldi	r21, 0x3F	; 63
    30aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ae:	88 23       	and	r24, r24
    30b0:	2c f4       	brge	.+10     	; 0x30bc <ULTR_u16Calculations+0x110>
		__ticks = 1;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	9f 8f       	std	Y+31, r25	; 0x1f
    30b8:	8e 8f       	std	Y+30, r24	; 0x1e
    30ba:	3f c0       	rjmp	.+126    	; 0x313a <ULTR_u16Calculations+0x18e>
	else if (__tmp > 65535)
    30bc:	68 a1       	ldd	r22, Y+32	; 0x20
    30be:	79 a1       	ldd	r23, Y+33	; 0x21
    30c0:	8a a1       	ldd	r24, Y+34	; 0x22
    30c2:	9b a1       	ldd	r25, Y+35	; 0x23
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	3f ef       	ldi	r19, 0xFF	; 255
    30c8:	4f e7       	ldi	r20, 0x7F	; 127
    30ca:	57 e4       	ldi	r21, 0x47	; 71
    30cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d0:	18 16       	cp	r1, r24
    30d2:	4c f5       	brge	.+82     	; 0x3126 <ULTR_u16Calculations+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d4:	6c a1       	ldd	r22, Y+36	; 0x24
    30d6:	7d a1       	ldd	r23, Y+37	; 0x25
    30d8:	8e a1       	ldd	r24, Y+38	; 0x26
    30da:	9f a1       	ldd	r25, Y+39	; 0x27
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e2       	ldi	r20, 0x20	; 32
    30e2:	51 e4       	ldi	r21, 0x41	; 65
    30e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	9f 8f       	std	Y+31, r25	; 0x1f
    30fa:	8e 8f       	std	Y+30, r24	; 0x1e
    30fc:	0f c0       	rjmp	.+30     	; 0x311c <ULTR_u16Calculations+0x170>
    30fe:	88 ec       	ldi	r24, 0xC8	; 200
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9d 8f       	std	Y+29, r25	; 0x1d
    3104:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3106:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3108:	9d 8d       	ldd	r25, Y+29	; 0x1d
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <ULTR_u16Calculations+0x15e>
    310e:	9d 8f       	std	Y+29, r25	; 0x1d
    3110:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3112:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3114:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	9f 8f       	std	Y+31, r25	; 0x1f
    311a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    311e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3120:	00 97       	sbiw	r24, 0x00	; 0
    3122:	69 f7       	brne	.-38     	; 0x30fe <ULTR_u16Calculations+0x152>
    3124:	24 c0       	rjmp	.+72     	; 0x316e <ULTR_u16Calculations+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3126:	68 a1       	ldd	r22, Y+32	; 0x20
    3128:	79 a1       	ldd	r23, Y+33	; 0x21
    312a:	8a a1       	ldd	r24, Y+34	; 0x22
    312c:	9b a1       	ldd	r25, Y+35	; 0x23
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	9f 8f       	std	Y+31, r25	; 0x1f
    3138:	8e 8f       	std	Y+30, r24	; 0x1e
    313a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    313c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    313e:	9b 8f       	std	Y+27, r25	; 0x1b
    3140:	8a 8f       	std	Y+26, r24	; 0x1a
    3142:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3144:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <ULTR_u16Calculations+0x19a>
    314a:	9b 8f       	std	Y+27, r25	; 0x1b
    314c:	8a 8f       	std	Y+26, r24	; 0x1a
    314e:	0f c0       	rjmp	.+30     	; 0x316e <ULTR_u16Calculations+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3150:	69 a5       	ldd	r22, Y+41	; 0x29
    3152:	7a a5       	ldd	r23, Y+42	; 0x2a
    3154:	8b a5       	ldd	r24, Y+43	; 0x2b
    3156:	9c a5       	ldd	r25, Y+44	; 0x2c
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	88 a7       	std	Y+40, r24	; 0x28
    3162:	88 a5       	ldd	r24, Y+40	; 0x28
    3164:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3166:	89 8d       	ldd	r24, Y+25	; 0x19
    3168:	8a 95       	dec	r24
    316a:	f1 f7       	brne	.-4      	; 0x3168 <ULTR_u16Calculations+0x1bc>
    316c:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(2);
    DIO_voidSetPinValue(TRIG_PORT_SELECTION, TRIG_PIN_SELECTION, HIGH);
    316e:	83 e0       	ldi	r24, 0x03	; 3
    3170:	61 e0       	ldi	r22, 0x01	; 1
    3172:	41 e0       	ldi	r20, 0x01	; 1
    3174:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	a0 e2       	ldi	r26, 0x20	; 32
    317e:	b1 e4       	ldi	r27, 0x41	; 65
    3180:	8d 8b       	std	Y+21, r24	; 0x15
    3182:	9e 8b       	std	Y+22, r25	; 0x16
    3184:	af 8b       	std	Y+23, r26	; 0x17
    3186:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3188:	6d 89       	ldd	r22, Y+21	; 0x15
    318a:	7e 89       	ldd	r23, Y+22	; 0x16
    318c:	8f 89       	ldd	r24, Y+23	; 0x17
    318e:	98 8d       	ldd	r25, Y+24	; 0x18
    3190:	2b ea       	ldi	r18, 0xAB	; 171
    3192:	3a ea       	ldi	r19, 0xAA	; 170
    3194:	4a e2       	ldi	r20, 0x2A	; 42
    3196:	50 e4       	ldi	r21, 0x40	; 64
    3198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	89 8b       	std	Y+17, r24	; 0x11
    31a2:	9a 8b       	std	Y+18, r25	; 0x12
    31a4:	ab 8b       	std	Y+19, r26	; 0x13
    31a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    31a8:	69 89       	ldd	r22, Y+17	; 0x11
    31aa:	7a 89       	ldd	r23, Y+18	; 0x12
    31ac:	8b 89       	ldd	r24, Y+19	; 0x13
    31ae:	9c 89       	ldd	r25, Y+20	; 0x14
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	40 e8       	ldi	r20, 0x80	; 128
    31b6:	5f e3       	ldi	r21, 0x3F	; 63
    31b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31bc:	88 23       	and	r24, r24
    31be:	1c f4       	brge	.+6      	; 0x31c6 <ULTR_u16Calculations+0x21a>
		__ticks = 1;
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	88 8b       	std	Y+16, r24	; 0x10
    31c4:	91 c0       	rjmp	.+290    	; 0x32e8 <ULTR_u16Calculations+0x33c>
	else if (__tmp > 255)
    31c6:	69 89       	ldd	r22, Y+17	; 0x11
    31c8:	7a 89       	ldd	r23, Y+18	; 0x12
    31ca:	8b 89       	ldd	r24, Y+19	; 0x13
    31cc:	9c 89       	ldd	r25, Y+20	; 0x14
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	4f e7       	ldi	r20, 0x7F	; 127
    31d4:	53 e4       	ldi	r21, 0x43	; 67
    31d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31da:	18 16       	cp	r1, r24
    31dc:	0c f0       	brlt	.+2      	; 0x31e0 <ULTR_u16Calculations+0x234>
    31de:	7b c0       	rjmp	.+246    	; 0x32d6 <ULTR_u16Calculations+0x32a>
	{
		_delay_ms(__us / 1000.0);
    31e0:	6d 89       	ldd	r22, Y+21	; 0x15
    31e2:	7e 89       	ldd	r23, Y+22	; 0x16
    31e4:	8f 89       	ldd	r24, Y+23	; 0x17
    31e6:	98 8d       	ldd	r25, Y+24	; 0x18
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	4a e7       	ldi	r20, 0x7A	; 122
    31ee:	54 e4       	ldi	r21, 0x44	; 68
    31f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	8c 87       	std	Y+12, r24	; 0x0c
    31fa:	9d 87       	std	Y+13, r25	; 0x0d
    31fc:	ae 87       	std	Y+14, r26	; 0x0e
    31fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3200:	6c 85       	ldd	r22, Y+12	; 0x0c
    3202:	7d 85       	ldd	r23, Y+13	; 0x0d
    3204:	8e 85       	ldd	r24, Y+14	; 0x0e
    3206:	9f 85       	ldd	r25, Y+15	; 0x0f
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	4a ef       	ldi	r20, 0xFA	; 250
    320e:	54 e4       	ldi	r21, 0x44	; 68
    3210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	88 87       	std	Y+8, r24	; 0x08
    321a:	99 87       	std	Y+9, r25	; 0x09
    321c:	aa 87       	std	Y+10, r26	; 0x0a
    321e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3220:	68 85       	ldd	r22, Y+8	; 0x08
    3222:	79 85       	ldd	r23, Y+9	; 0x09
    3224:	8a 85       	ldd	r24, Y+10	; 0x0a
    3226:	9b 85       	ldd	r25, Y+11	; 0x0b
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e8       	ldi	r20, 0x80	; 128
    322e:	5f e3       	ldi	r21, 0x3F	; 63
    3230:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3234:	88 23       	and	r24, r24
    3236:	2c f4       	brge	.+10     	; 0x3242 <ULTR_u16Calculations+0x296>
		__ticks = 1;
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	9f 83       	std	Y+7, r25	; 0x07
    323e:	8e 83       	std	Y+6, r24	; 0x06
    3240:	3f c0       	rjmp	.+126    	; 0x32c0 <ULTR_u16Calculations+0x314>
	else if (__tmp > 65535)
    3242:	68 85       	ldd	r22, Y+8	; 0x08
    3244:	79 85       	ldd	r23, Y+9	; 0x09
    3246:	8a 85       	ldd	r24, Y+10	; 0x0a
    3248:	9b 85       	ldd	r25, Y+11	; 0x0b
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	3f ef       	ldi	r19, 0xFF	; 255
    324e:	4f e7       	ldi	r20, 0x7F	; 127
    3250:	57 e4       	ldi	r21, 0x47	; 71
    3252:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3256:	18 16       	cp	r1, r24
    3258:	4c f5       	brge	.+82     	; 0x32ac <ULTR_u16Calculations+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325a:	6c 85       	ldd	r22, Y+12	; 0x0c
    325c:	7d 85       	ldd	r23, Y+13	; 0x0d
    325e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3260:	9f 85       	ldd	r25, Y+15	; 0x0f
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e2       	ldi	r20, 0x20	; 32
    3268:	51 e4       	ldi	r21, 0x41	; 65
    326a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	bc 01       	movw	r22, r24
    3274:	cd 01       	movw	r24, r26
    3276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	9f 83       	std	Y+7, r25	; 0x07
    3280:	8e 83       	std	Y+6, r24	; 0x06
    3282:	0f c0       	rjmp	.+30     	; 0x32a2 <ULTR_u16Calculations+0x2f6>
    3284:	88 ec       	ldi	r24, 0xC8	; 200
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	9d 83       	std	Y+5, r25	; 0x05
    328a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    328c:	8c 81       	ldd	r24, Y+4	; 0x04
    328e:	9d 81       	ldd	r25, Y+5	; 0x05
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <ULTR_u16Calculations+0x2e4>
    3294:	9d 83       	std	Y+5, r25	; 0x05
    3296:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3298:	8e 81       	ldd	r24, Y+6	; 0x06
    329a:	9f 81       	ldd	r25, Y+7	; 0x07
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	9f 83       	std	Y+7, r25	; 0x07
    32a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a2:	8e 81       	ldd	r24, Y+6	; 0x06
    32a4:	9f 81       	ldd	r25, Y+7	; 0x07
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	69 f7       	brne	.-38     	; 0x3284 <ULTR_u16Calculations+0x2d8>
    32aa:	24 c0       	rjmp	.+72     	; 0x32f4 <ULTR_u16Calculations+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ac:	68 85       	ldd	r22, Y+8	; 0x08
    32ae:	79 85       	ldd	r23, Y+9	; 0x09
    32b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    32b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	9f 83       	std	Y+7, r25	; 0x07
    32be:	8e 83       	std	Y+6, r24	; 0x06
    32c0:	8e 81       	ldd	r24, Y+6	; 0x06
    32c2:	9f 81       	ldd	r25, Y+7	; 0x07
    32c4:	9b 83       	std	Y+3, r25	; 0x03
    32c6:	8a 83       	std	Y+2, r24	; 0x02
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	9b 81       	ldd	r25, Y+3	; 0x03
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	f1 f7       	brne	.-4      	; 0x32cc <ULTR_u16Calculations+0x320>
    32d0:	9b 83       	std	Y+3, r25	; 0x03
    32d2:	8a 83       	std	Y+2, r24	; 0x02
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <ULTR_u16Calculations+0x348>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32d6:	69 89       	ldd	r22, Y+17	; 0x11
    32d8:	7a 89       	ldd	r23, Y+18	; 0x12
    32da:	8b 89       	ldd	r24, Y+19	; 0x13
    32dc:	9c 89       	ldd	r25, Y+20	; 0x14
    32de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	88 8b       	std	Y+16, r24	; 0x10
    32e8:	88 89       	ldd	r24, Y+16	; 0x10
    32ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	8a 95       	dec	r24
    32f0:	f1 f7       	brne	.-4      	; 0x32ee <ULTR_u16Calculations+0x342>
    32f2:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    DIO_voidSetPinValue(TRIG_PORT_SELECTION, TRIG_PIN_SELECTION, LOW);
    32f4:	83 e0       	ldi	r24, 0x03	; 3
    32f6:	61 e0       	ldi	r22, 0x01	; 1
    32f8:	40 e0       	ldi	r20, 0x00	; 0
    32fa:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>

    ICU_voidSenceModetrigger(RISING_EDGE);
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ICU_voidSenceModetrigger>
    while (GET_BIT(TIFR, TIFR_ICF1) == 0);
    3304:	e8 e5       	ldi	r30, 0x58	; 88
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	91 81       	ldd	r25, Z+1	; 0x01
    330c:	80 72       	andi	r24, 0x20	; 32
    330e:	90 70       	andi	r25, 0x00	; 0
    3310:	00 97       	sbiw	r24, 0x00	; 0
    3312:	c1 f3       	breq	.-16     	; 0x3304 <ULTR_u16Calculations+0x358>
    A1_Reading = ICR1;
    3314:	e6 e4       	ldi	r30, 0x46	; 70
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	80 81       	ld	r24, Z
    331a:	91 81       	ldd	r25, Z+1	; 0x01
    331c:	98 af       	std	Y+56, r25	; 0x38
    331e:	8f ab       	std	Y+55, r24	; 0x37
    SET_BIT(TIFR, TIFR_ICF1);
    3320:	a8 e5       	ldi	r26, 0x58	; 88
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	e8 e5       	ldi	r30, 0x58	; 88
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	91 81       	ldd	r25, Z+1	; 0x01
    332c:	80 62       	ori	r24, 0x20	; 32
    332e:	11 96       	adiw	r26, 0x01	; 1
    3330:	9c 93       	st	X, r25
    3332:	8e 93       	st	-X, r24

    ICU_voidSenceModetrigger(FALLING_EDGE);
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ICU_voidSenceModetrigger>
    while (GET_BIT(TIFR, TIFR_ICF1) == 0);
    333a:	e8 e5       	ldi	r30, 0x58	; 88
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	91 81       	ldd	r25, Z+1	; 0x01
    3342:	80 72       	andi	r24, 0x20	; 32
    3344:	90 70       	andi	r25, 0x00	; 0
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	c1 f3       	breq	.-16     	; 0x333a <ULTR_u16Calculations+0x38e>
    A2_Reading = ICR1;
    334a:	e6 e4       	ldi	r30, 0x46	; 70
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	91 81       	ldd	r25, Z+1	; 0x01
    3352:	9a af       	std	Y+58, r25	; 0x3a
    3354:	89 af       	std	Y+57, r24	; 0x39
    SET_BIT(TIFR, TIFR_ICF1);
    3356:	a8 e5       	ldi	r26, 0x58	; 88
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	e8 e5       	ldi	r30, 0x58	; 88
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	91 81       	ldd	r25, Z+1	; 0x01
    3362:	80 62       	ori	r24, 0x20	; 32
    3364:	11 96       	adiw	r26, 0x01	; 1
    3366:	9c 93       	st	X, r25
    3368:	8e 93       	st	-X, r24
    TCNT1 = 0;
    336a:	ec e4       	ldi	r30, 0x4C	; 76
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	11 82       	std	Z+1, r1	; 0x01
    3370:	10 82       	st	Z, r1
    ICU_voidControlInterrupt(DISABLE);
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <ICU_voidControlInterrupt>

    ON = A2_Reading - A1_Reading;
    3378:	29 ad       	ldd	r18, Y+57	; 0x39
    337a:	3a ad       	ldd	r19, Y+58	; 0x3a
    337c:	8f a9       	ldd	r24, Y+55	; 0x37
    337e:	98 ad       	ldd	r25, Y+56	; 0x38
    3380:	a9 01       	movw	r20, r18
    3382:	48 1b       	sub	r20, r24
    3384:	59 0b       	sbc	r21, r25
    3386:	ca 01       	movw	r24, r20
    3388:	9a ab       	std	Y+50, r25	; 0x32
    338a:	89 ab       	std	Y+49, r24	; 0x31
    Distance = (ON* 34600)/(8000000*2);
    338c:	89 a9       	ldd	r24, Y+49	; 0x31
    338e:	9a a9       	ldd	r25, Y+50	; 0x32
    3390:	cc 01       	movw	r24, r24
    3392:	a0 e0       	ldi	r26, 0x00	; 0
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	28 e2       	ldi	r18, 0x28	; 40
    3398:	37 e8       	ldi	r19, 0x87	; 135
    339a:	40 e0       	ldi	r20, 0x00	; 0
    339c:	50 e0       	ldi	r21, 0x00	; 0
    339e:	bc 01       	movw	r22, r24
    33a0:	cd 01       	movw	r24, r26
    33a2:	0e 94 4b 29 	call	0x5296	; 0x5296 <__mulsi3>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	34 e2       	ldi	r19, 0x24	; 36
    33ae:	44 ef       	ldi	r20, 0xF4	; 244
    33b0:	50 e0       	ldi	r21, 0x00	; 0
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 7e 29 	call	0x52fc	; 0x52fc <__divmodsi4>
    33ba:	da 01       	movw	r26, r20
    33bc:	c9 01       	movw	r24, r18
    33be:	9e ab       	std	Y+54, r25	; 0x36
    33c0:	8d ab       	std	Y+53, r24	; 0x35


    return(Distance);
    33c2:	8d a9       	ldd	r24, Y+53	; 0x35
    33c4:	9e a9       	ldd	r25, Y+54	; 0x36
}
    33c6:	ea 96       	adiw	r28, 0x3a	; 58
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <SSD_voidDisplayNumbers>:
                                     0b00000111,
                                     0b01111111,
                                     0b01101111};

void SSD_voidDisplayNumbers (u8 Copy_u8PortName, u8 Copy_u8DisplayNumber, u8 Copy_u8Type)
{
    33d8:	df 93       	push	r29
    33da:	cf 93       	push	r28
    33dc:	00 d0       	rcall	.+0      	; 0x33de <SSD_voidDisplayNumbers+0x6>
    33de:	00 d0       	rcall	.+0      	; 0x33e0 <SSD_voidDisplayNumbers+0x8>
    33e0:	0f 92       	push	r0
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    33e6:	89 83       	std	Y+1, r24	; 0x01
    33e8:	6a 83       	std	Y+2, r22	; 0x02
    33ea:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8DisplayNumber <= 9 && Copy_u8Type <= CommanAnode)
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	84 30       	cpi	r24, 0x04	; 4
    33f0:	90 f5       	brcc	.+100    	; 0x3456 <SSD_voidDisplayNumbers+0x7e>
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	8a 30       	cpi	r24, 0x0A	; 10
    33f6:	78 f5       	brcc	.+94     	; 0x3456 <SSD_voidDisplayNumbers+0x7e>
    33f8:	8b 81       	ldd	r24, Y+3	; 0x03
    33fa:	82 30       	cpi	r24, 0x02	; 2
    33fc:	60 f5       	brcc	.+88     	; 0x3456 <SSD_voidDisplayNumbers+0x7e>
    {
        switch (Copy_u8PortName)
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	88 2f       	mov	r24, r24
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	39 f5       	brne	.+78     	; 0x3456 <SSD_voidDisplayNumbers+0x7e>
        {
            case PORTA:
                    switch(Copy_u8Type)
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	28 2f       	mov	r18, r24
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	3d 83       	std	Y+5, r19	; 0x05
    3410:	2c 83       	std	Y+4, r18	; 0x04
    3412:	8c 81       	ldd	r24, Y+4	; 0x04
    3414:	9d 81       	ldd	r25, Y+5	; 0x05
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	31 f0       	breq	.+12     	; 0x3426 <SSD_voidDisplayNumbers+0x4e>
    341a:	2c 81       	ldd	r18, Y+4	; 0x04
    341c:	3d 81       	ldd	r19, Y+5	; 0x05
    341e:	21 30       	cpi	r18, 0x01	; 1
    3420:	31 05       	cpc	r19, r1
    3422:	61 f0       	breq	.+24     	; 0x343c <SSD_voidDisplayNumbers+0x64>
    3424:	18 c0       	rjmp	.+48     	; 0x3456 <SSD_voidDisplayNumbers+0x7e>
                    {
                        case CommanCathod:
                            DIO_voidSetPortSpecificValue(PORTA, Global_u8ArrayStoreNumbers[Copy_u8DisplayNumber]);
    3426:	8a 81       	ldd	r24, Y+2	; 0x02
    3428:	88 2f       	mov	r24, r24
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	fc 01       	movw	r30, r24
    342e:	ef 53       	subi	r30, 0x3F	; 63
    3430:	fe 4f       	sbci	r31, 0xFE	; 254
    3432:	90 81       	ld	r25, Z
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	69 2f       	mov	r22, r25
    3438:	0e 94 c7 14 	call	0x298e	; 0x298e <DIO_voidSetPortSpecificValue>
                        case CommanAnode:
                            DIO_voidSetPortSpecificValue(PORTA, ~Global_u8ArrayStoreNumbers[Copy_u8DisplayNumber]);
    343c:	8a 81       	ldd	r24, Y+2	; 0x02
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	fc 01       	movw	r30, r24
    3444:	ef 53       	subi	r30, 0x3F	; 63
    3446:	fe 4f       	sbci	r31, 0xFE	; 254
    3448:	80 81       	ld	r24, Z
    344a:	98 2f       	mov	r25, r24
    344c:	90 95       	com	r25
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	69 2f       	mov	r22, r25
    3452:	0e 94 c7 14 	call	0x298e	; 0x298e <DIO_voidSetPortSpecificValue>
    else
    {
        
    }   
           
}
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	08 95       	ret

00003466 <SMD_voidInit>:
u16 Local_u16TurnsNumber = 0;



void SMD_voidInit(void)
{
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPortSpecificDirection(SMD_PORT, SMD_PORT_PINS);
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	6f e0       	ldi	r22, 0x0F	; 15
    3472:	0e 94 83 14 	call	0x2906	; 0x2906 <DIO_voidSetPortSpecificDirection>
}
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <SMD_voidContralFullStep>:
void SMD_voidContralFullStep (u16 Copy_u16Angle)
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
    3484:	ae 97       	sbiw	r28, 0x2e	; 46
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	9e a7       	std	Y+46, r25	; 0x2e
    3492:	8d a7       	std	Y+45, r24	; 0x2d
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    3494:	80 91 fe 01 	lds	r24, 0x01FE
    3498:	28 2f       	mov	r18, r24
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	8d a5       	ldd	r24, Y+45	; 0x2d
    349e:	9e a5       	ldd	r25, Y+46	; 0x2e
    34a0:	b9 01       	movw	r22, r18
    34a2:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__udivmodhi4>
    34a6:	cb 01       	movw	r24, r22
    34a8:	90 93 00 02 	sts	0x0200, r25
    34ac:	80 93 ff 01 	sts	0x01FF, r24
    u16 Local_u16LoopCounter = 0;
    34b0:	1c a6       	std	Y+44, r1	; 0x2c
    34b2:	1b a6       	std	Y+43, r1	; 0x2b
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 4; Local_u16LoopCounter++)
    34b4:	1c a6       	std	Y+44, r1	; 0x2c
    34b6:	1b a6       	std	Y+43, r1	; 0x2b
    34b8:	ab c1       	rjmp	.+854    	; 0x3810 <SMD_voidContralFullStep+0x394>
    {
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	60 e0       	ldi	r22, 0x00	; 0
    34be:	41 e0       	ldi	r20, 0x01	; 1
    34c0:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	61 e0       	ldi	r22, 0x01	; 1
    34c8:	40 e0       	ldi	r20, 0x00	; 0
    34ca:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	62 e0       	ldi	r22, 0x02	; 2
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	63 e0       	ldi	r22, 0x03	; 3
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	a0 e2       	ldi	r26, 0x20	; 32
    34e8:	b1 e4       	ldi	r27, 0x41	; 65
    34ea:	8f a3       	std	Y+39, r24	; 0x27
    34ec:	98 a7       	std	Y+40, r25	; 0x28
    34ee:	a9 a7       	std	Y+41, r26	; 0x29
    34f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f2:	6f a1       	ldd	r22, Y+39	; 0x27
    34f4:	78 a5       	ldd	r23, Y+40	; 0x28
    34f6:	89 a5       	ldd	r24, Y+41	; 0x29
    34f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	4a ef       	ldi	r20, 0xFA	; 250
    3500:	54 e4       	ldi	r21, 0x44	; 68
    3502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	8b a3       	std	Y+35, r24	; 0x23
    350c:	9c a3       	std	Y+36, r25	; 0x24
    350e:	ad a3       	std	Y+37, r26	; 0x25
    3510:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3512:	6b a1       	ldd	r22, Y+35	; 0x23
    3514:	7c a1       	ldd	r23, Y+36	; 0x24
    3516:	8d a1       	ldd	r24, Y+37	; 0x25
    3518:	9e a1       	ldd	r25, Y+38	; 0x26
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e8       	ldi	r20, 0x80	; 128
    3520:	5f e3       	ldi	r21, 0x3F	; 63
    3522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3526:	88 23       	and	r24, r24
    3528:	2c f4       	brge	.+10     	; 0x3534 <SMD_voidContralFullStep+0xb8>
		__ticks = 1;
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	9a a3       	std	Y+34, r25	; 0x22
    3530:	89 a3       	std	Y+33, r24	; 0x21
    3532:	3f c0       	rjmp	.+126    	; 0x35b2 <SMD_voidContralFullStep+0x136>
	else if (__tmp > 65535)
    3534:	6b a1       	ldd	r22, Y+35	; 0x23
    3536:	7c a1       	ldd	r23, Y+36	; 0x24
    3538:	8d a1       	ldd	r24, Y+37	; 0x25
    353a:	9e a1       	ldd	r25, Y+38	; 0x26
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	3f ef       	ldi	r19, 0xFF	; 255
    3540:	4f e7       	ldi	r20, 0x7F	; 127
    3542:	57 e4       	ldi	r21, 0x47	; 71
    3544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3548:	18 16       	cp	r1, r24
    354a:	4c f5       	brge	.+82     	; 0x359e <SMD_voidContralFullStep+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354c:	6f a1       	ldd	r22, Y+39	; 0x27
    354e:	78 a5       	ldd	r23, Y+40	; 0x28
    3550:	89 a5       	ldd	r24, Y+41	; 0x29
    3552:	9a a5       	ldd	r25, Y+42	; 0x2a
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e2       	ldi	r20, 0x20	; 32
    355a:	51 e4       	ldi	r21, 0x41	; 65
    355c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	bc 01       	movw	r22, r24
    3566:	cd 01       	movw	r24, r26
    3568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	9a a3       	std	Y+34, r25	; 0x22
    3572:	89 a3       	std	Y+33, r24	; 0x21
    3574:	0f c0       	rjmp	.+30     	; 0x3594 <SMD_voidContralFullStep+0x118>
    3576:	88 ec       	ldi	r24, 0xC8	; 200
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	98 a3       	std	Y+32, r25	; 0x20
    357c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    357e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3580:	98 a1       	ldd	r25, Y+32	; 0x20
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <SMD_voidContralFullStep+0x106>
    3586:	98 a3       	std	Y+32, r25	; 0x20
    3588:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358a:	89 a1       	ldd	r24, Y+33	; 0x21
    358c:	9a a1       	ldd	r25, Y+34	; 0x22
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	9a a3       	std	Y+34, r25	; 0x22
    3592:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3594:	89 a1       	ldd	r24, Y+33	; 0x21
    3596:	9a a1       	ldd	r25, Y+34	; 0x22
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	69 f7       	brne	.-38     	; 0x3576 <SMD_voidContralFullStep+0xfa>
    359c:	14 c0       	rjmp	.+40     	; 0x35c6 <SMD_voidContralFullStep+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359e:	6b a1       	ldd	r22, Y+35	; 0x23
    35a0:	7c a1       	ldd	r23, Y+36	; 0x24
    35a2:	8d a1       	ldd	r24, Y+37	; 0x25
    35a4:	9e a1       	ldd	r25, Y+38	; 0x26
    35a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	9a a3       	std	Y+34, r25	; 0x22
    35b0:	89 a3       	std	Y+33, r24	; 0x21
    35b2:	89 a1       	ldd	r24, Y+33	; 0x21
    35b4:	9a a1       	ldd	r25, Y+34	; 0x22
    35b6:	9e 8f       	std	Y+30, r25	; 0x1e
    35b8:	8d 8f       	std	Y+29, r24	; 0x1d
    35ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	f1 f7       	brne	.-4      	; 0x35be <SMD_voidContralFullStep+0x142>
    35c2:	9e 8f       	std	Y+30, r25	; 0x1e
    35c4:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	60 e0       	ldi	r22, 0x00	; 0
    35ca:	40 e0       	ldi	r20, 0x00	; 0
    35cc:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	61 e0       	ldi	r22, 0x01	; 1
    35d4:	41 e0       	ldi	r20, 0x01	; 1
    35d6:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	62 e0       	ldi	r22, 0x02	; 2
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	63 e0       	ldi	r22, 0x03	; 3
    35e8:	40 e0       	ldi	r20, 0x00	; 0
    35ea:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	a0 e2       	ldi	r26, 0x20	; 32
    35f4:	b1 e4       	ldi	r27, 0x41	; 65
    35f6:	89 8f       	std	Y+25, r24	; 0x19
    35f8:	9a 8f       	std	Y+26, r25	; 0x1a
    35fa:	ab 8f       	std	Y+27, r26	; 0x1b
    35fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	4a ef       	ldi	r20, 0xFA	; 250
    360c:	54 e4       	ldi	r21, 0x44	; 68
    360e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	8d 8b       	std	Y+21, r24	; 0x15
    3618:	9e 8b       	std	Y+22, r25	; 0x16
    361a:	af 8b       	std	Y+23, r26	; 0x17
    361c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    361e:	6d 89       	ldd	r22, Y+21	; 0x15
    3620:	7e 89       	ldd	r23, Y+22	; 0x16
    3622:	8f 89       	ldd	r24, Y+23	; 0x17
    3624:	98 8d       	ldd	r25, Y+24	; 0x18
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e8       	ldi	r20, 0x80	; 128
    362c:	5f e3       	ldi	r21, 0x3F	; 63
    362e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3632:	88 23       	and	r24, r24
    3634:	2c f4       	brge	.+10     	; 0x3640 <SMD_voidContralFullStep+0x1c4>
		__ticks = 1;
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	9c 8b       	std	Y+20, r25	; 0x14
    363c:	8b 8b       	std	Y+19, r24	; 0x13
    363e:	3f c0       	rjmp	.+126    	; 0x36be <SMD_voidContralFullStep+0x242>
	else if (__tmp > 65535)
    3640:	6d 89       	ldd	r22, Y+21	; 0x15
    3642:	7e 89       	ldd	r23, Y+22	; 0x16
    3644:	8f 89       	ldd	r24, Y+23	; 0x17
    3646:	98 8d       	ldd	r25, Y+24	; 0x18
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	3f ef       	ldi	r19, 0xFF	; 255
    364c:	4f e7       	ldi	r20, 0x7F	; 127
    364e:	57 e4       	ldi	r21, 0x47	; 71
    3650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3654:	18 16       	cp	r1, r24
    3656:	4c f5       	brge	.+82     	; 0x36aa <SMD_voidContralFullStep+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3658:	69 8d       	ldd	r22, Y+25	; 0x19
    365a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    365c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    365e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e2       	ldi	r20, 0x20	; 32
    3666:	51 e4       	ldi	r21, 0x41	; 65
    3668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	bc 01       	movw	r22, r24
    3672:	cd 01       	movw	r24, r26
    3674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	9c 8b       	std	Y+20, r25	; 0x14
    367e:	8b 8b       	std	Y+19, r24	; 0x13
    3680:	0f c0       	rjmp	.+30     	; 0x36a0 <SMD_voidContralFullStep+0x224>
    3682:	88 ec       	ldi	r24, 0xC8	; 200
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	9a 8b       	std	Y+18, r25	; 0x12
    3688:	89 8b       	std	Y+17, r24	; 0x11
    368a:	89 89       	ldd	r24, Y+17	; 0x11
    368c:	9a 89       	ldd	r25, Y+18	; 0x12
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	f1 f7       	brne	.-4      	; 0x368e <SMD_voidContralFullStep+0x212>
    3692:	9a 8b       	std	Y+18, r25	; 0x12
    3694:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3696:	8b 89       	ldd	r24, Y+19	; 0x13
    3698:	9c 89       	ldd	r25, Y+20	; 0x14
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	9c 8b       	std	Y+20, r25	; 0x14
    369e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a0:	8b 89       	ldd	r24, Y+19	; 0x13
    36a2:	9c 89       	ldd	r25, Y+20	; 0x14
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	69 f7       	brne	.-38     	; 0x3682 <SMD_voidContralFullStep+0x206>
    36a8:	14 c0       	rjmp	.+40     	; 0x36d2 <SMD_voidContralFullStep+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36aa:	6d 89       	ldd	r22, Y+21	; 0x15
    36ac:	7e 89       	ldd	r23, Y+22	; 0x16
    36ae:	8f 89       	ldd	r24, Y+23	; 0x17
    36b0:	98 8d       	ldd	r25, Y+24	; 0x18
    36b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	9c 8b       	std	Y+20, r25	; 0x14
    36bc:	8b 8b       	std	Y+19, r24	; 0x13
    36be:	8b 89       	ldd	r24, Y+19	; 0x13
    36c0:	9c 89       	ldd	r25, Y+20	; 0x14
    36c2:	98 8b       	std	Y+16, r25	; 0x10
    36c4:	8f 87       	std	Y+15, r24	; 0x0f
    36c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c8:	98 89       	ldd	r25, Y+16	; 0x10
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	f1 f7       	brne	.-4      	; 0x36ca <SMD_voidContralFullStep+0x24e>
    36ce:	98 8b       	std	Y+16, r25	; 0x10
    36d0:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	40 e0       	ldi	r20, 0x00	; 0
    36d8:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	61 e0       	ldi	r22, 0x01	; 1
    36e0:	40 e0       	ldi	r20, 0x00	; 0
    36e2:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	62 e0       	ldi	r22, 0x02	; 2
    36ea:	41 e0       	ldi	r20, 0x01	; 1
    36ec:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	63 e0       	ldi	r22, 0x03	; 3
    36f4:	40 e0       	ldi	r20, 0x00	; 0
    36f6:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	a0 e2       	ldi	r26, 0x20	; 32
    3700:	b1 e4       	ldi	r27, 0x41	; 65
    3702:	8b 87       	std	Y+11, r24	; 0x0b
    3704:	9c 87       	std	Y+12, r25	; 0x0c
    3706:	ad 87       	std	Y+13, r26	; 0x0d
    3708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    370a:	6b 85       	ldd	r22, Y+11	; 0x0b
    370c:	7c 85       	ldd	r23, Y+12	; 0x0c
    370e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3710:	9e 85       	ldd	r25, Y+14	; 0x0e
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	4a ef       	ldi	r20, 0xFA	; 250
    3718:	54 e4       	ldi	r21, 0x44	; 68
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	8f 83       	std	Y+7, r24	; 0x07
    3724:	98 87       	std	Y+8, r25	; 0x08
    3726:	a9 87       	std	Y+9, r26	; 0x09
    3728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    372a:	6f 81       	ldd	r22, Y+7	; 0x07
    372c:	78 85       	ldd	r23, Y+8	; 0x08
    372e:	89 85       	ldd	r24, Y+9	; 0x09
    3730:	9a 85       	ldd	r25, Y+10	; 0x0a
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    373e:	88 23       	and	r24, r24
    3740:	2c f4       	brge	.+10     	; 0x374c <SMD_voidContralFullStep+0x2d0>
		__ticks = 1;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	9e 83       	std	Y+6, r25	; 0x06
    3748:	8d 83       	std	Y+5, r24	; 0x05
    374a:	3f c0       	rjmp	.+126    	; 0x37ca <SMD_voidContralFullStep+0x34e>
	else if (__tmp > 65535)
    374c:	6f 81       	ldd	r22, Y+7	; 0x07
    374e:	78 85       	ldd	r23, Y+8	; 0x08
    3750:	89 85       	ldd	r24, Y+9	; 0x09
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	3f ef       	ldi	r19, 0xFF	; 255
    3758:	4f e7       	ldi	r20, 0x7F	; 127
    375a:	57 e4       	ldi	r21, 0x47	; 71
    375c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3760:	18 16       	cp	r1, r24
    3762:	4c f5       	brge	.+82     	; 0x37b6 <SMD_voidContralFullStep+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3764:	6b 85       	ldd	r22, Y+11	; 0x0b
    3766:	7c 85       	ldd	r23, Y+12	; 0x0c
    3768:	8d 85       	ldd	r24, Y+13	; 0x0d
    376a:	9e 85       	ldd	r25, Y+14	; 0x0e
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e2       	ldi	r20, 0x20	; 32
    3772:	51 e4       	ldi	r21, 0x41	; 65
    3774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	bc 01       	movw	r22, r24
    377e:	cd 01       	movw	r24, r26
    3780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	9e 83       	std	Y+6, r25	; 0x06
    378a:	8d 83       	std	Y+5, r24	; 0x05
    378c:	0f c0       	rjmp	.+30     	; 0x37ac <SMD_voidContralFullStep+0x330>
    378e:	88 ec       	ldi	r24, 0xC8	; 200
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	9c 83       	std	Y+4, r25	; 0x04
    3794:	8b 83       	std	Y+3, r24	; 0x03
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	9c 81       	ldd	r25, Y+4	; 0x04
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <SMD_voidContralFullStep+0x31e>
    379e:	9c 83       	std	Y+4, r25	; 0x04
    37a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a2:	8d 81       	ldd	r24, Y+5	; 0x05
    37a4:	9e 81       	ldd	r25, Y+6	; 0x06
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	9e 83       	std	Y+6, r25	; 0x06
    37aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ac:	8d 81       	ldd	r24, Y+5	; 0x05
    37ae:	9e 81       	ldd	r25, Y+6	; 0x06
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	69 f7       	brne	.-38     	; 0x378e <SMD_voidContralFullStep+0x312>
    37b4:	14 c0       	rjmp	.+40     	; 0x37de <SMD_voidContralFullStep+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b6:	6f 81       	ldd	r22, Y+7	; 0x07
    37b8:	78 85       	ldd	r23, Y+8	; 0x08
    37ba:	89 85       	ldd	r24, Y+9	; 0x09
    37bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	9e 83       	std	Y+6, r25	; 0x06
    37c8:	8d 83       	std	Y+5, r24	; 0x05
    37ca:	8d 81       	ldd	r24, Y+5	; 0x05
    37cc:	9e 81       	ldd	r25, Y+6	; 0x06
    37ce:	9a 83       	std	Y+2, r25	; 0x02
    37d0:	89 83       	std	Y+1, r24	; 0x01
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	9a 81       	ldd	r25, Y+2	; 0x02
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <SMD_voidContralFullStep+0x35a>
    37da:	9a 83       	std	Y+2, r25	; 0x02
    37dc:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	40 e0       	ldi	r20, 0x00	; 0
    37e4:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	61 e0       	ldi	r22, 0x01	; 1
    37ec:	40 e0       	ldi	r20, 0x00	; 0
    37ee:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	62 e0       	ldi	r22, 0x02	; 2
    37f6:	40 e0       	ldi	r20, 0x00	; 0
    37f8:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	63 e0       	ldi	r22, 0x03	; 3
    3800:	41 e0       	ldi	r20, 0x01	; 1
    3802:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
void SMD_voidContralFullStep (u16 Copy_u16Angle)
{
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    u16 Local_u16LoopCounter = 0;
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 4; Local_u16LoopCounter++)
    3806:	8b a5       	ldd	r24, Y+43	; 0x2b
    3808:	9c a5       	ldd	r25, Y+44	; 0x2c
    380a:	01 96       	adiw	r24, 0x01	; 1
    380c:	9c a7       	std	Y+44, r25	; 0x2c
    380e:	8b a7       	std	Y+43, r24	; 0x2b
    3810:	80 91 ff 01 	lds	r24, 0x01FF
    3814:	90 91 00 02 	lds	r25, 0x0200
    3818:	9c 01       	movw	r18, r24
    381a:	36 95       	lsr	r19
    381c:	27 95       	ror	r18
    381e:	36 95       	lsr	r19
    3820:	27 95       	ror	r18
    3822:	8b a5       	ldd	r24, Y+43	; 0x2b
    3824:	9c a5       	ldd	r25, Y+44	; 0x2c
    3826:	28 17       	cp	r18, r24
    3828:	39 07       	cpc	r19, r25
    382a:	08 f0       	brcs	.+2      	; 0x382e <SMD_voidContralFullStep+0x3b2>
    382c:	46 ce       	rjmp	.-884    	; 0x34ba <SMD_voidContralFullStep+0x3e>
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    }
}
    382e:	ae 96       	adiw	r28, 0x2e	; 46
    3830:	0f b6       	in	r0, 0x3f	; 63
    3832:	f8 94       	cli
    3834:	de bf       	out	0x3e, r29	; 62
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	cd bf       	out	0x3d, r28	; 61
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	08 95       	ret

00003840 <SMD_voidContralHalfStep>:
void SMD_voidContralHalfStep (u16 Copy_u16Angle)
{
    3840:	0f 93       	push	r16
    3842:	1f 93       	push	r17
    3844:	df 93       	push	r29
    3846:	cf 93       	push	r28
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
    384c:	c6 56       	subi	r28, 0x66	; 102
    384e:	d0 40       	sbci	r29, 0x00	; 0
    3850:	0f b6       	in	r0, 0x3f	; 63
    3852:	f8 94       	cli
    3854:	de bf       	out	0x3e, r29	; 62
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	cd bf       	out	0x3d, r28	; 61
    385a:	fe 01       	movw	r30, r28
    385c:	eb 59       	subi	r30, 0x9B	; 155
    385e:	ff 4f       	sbci	r31, 0xFF	; 255
    3860:	91 83       	std	Z+1, r25	; 0x01
    3862:	80 83       	st	Z, r24
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    3864:	80 91 fe 01 	lds	r24, 0x01FE
    3868:	28 2f       	mov	r18, r24
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	fe 01       	movw	r30, r28
    386e:	eb 59       	subi	r30, 0x9B	; 155
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	80 81       	ld	r24, Z
    3874:	91 81       	ldd	r25, Z+1	; 0x01
    3876:	b9 01       	movw	r22, r18
    3878:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__udivmodhi4>
    387c:	cb 01       	movw	r24, r22
    387e:	90 93 00 02 	sts	0x0200, r25
    3882:	80 93 ff 01 	sts	0x01FF, r24
    u16 Local_u16LoopCounter = 0;
    3886:	fe 01       	movw	r30, r28
    3888:	ed 59       	subi	r30, 0x9D	; 157
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	11 82       	std	Z+1, r1	; 0x01
    388e:	10 82       	st	Z, r1
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 8; Local_u16LoopCounter++)
    3890:	fe 01       	movw	r30, r28
    3892:	ed 59       	subi	r30, 0x9D	; 157
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	11 82       	std	Z+1, r1	; 0x01
    3898:	10 82       	st	Z, r1
    389a:	5f c4       	rjmp	.+2238   	; 0x415a <SMD_voidContralHalfStep+0x91a>
    {
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	60 e0       	ldi	r22, 0x00	; 0
    38a0:	41 e0       	ldi	r20, 0x01	; 1
    38a2:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	61 e0       	ldi	r22, 0x01	; 1
    38aa:	40 e0       	ldi	r20, 0x00	; 0
    38ac:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	62 e0       	ldi	r22, 0x02	; 2
    38b4:	40 e0       	ldi	r20, 0x00	; 0
    38b6:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	63 e0       	ldi	r22, 0x03	; 3
    38be:	40 e0       	ldi	r20, 0x00	; 0
    38c0:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    38c4:	fe 01       	movw	r30, r28
    38c6:	e1 5a       	subi	r30, 0xA1	; 161
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	a0 e2       	ldi	r26, 0x20	; 32
    38d0:	b1 e4       	ldi	r27, 0x41	; 65
    38d2:	80 83       	st	Z, r24
    38d4:	91 83       	std	Z+1, r25	; 0x01
    38d6:	a2 83       	std	Z+2, r26	; 0x02
    38d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38da:	8e 01       	movw	r16, r28
    38dc:	05 5a       	subi	r16, 0xA5	; 165
    38de:	1f 4f       	sbci	r17, 0xFF	; 255
    38e0:	fe 01       	movw	r30, r28
    38e2:	e1 5a       	subi	r30, 0xA1	; 161
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	60 81       	ld	r22, Z
    38e8:	71 81       	ldd	r23, Z+1	; 0x01
    38ea:	82 81       	ldd	r24, Z+2	; 0x02
    38ec:	93 81       	ldd	r25, Z+3	; 0x03
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	4a ef       	ldi	r20, 0xFA	; 250
    38f4:	54 e4       	ldi	r21, 0x44	; 68
    38f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	f8 01       	movw	r30, r16
    3900:	80 83       	st	Z, r24
    3902:	91 83       	std	Z+1, r25	; 0x01
    3904:	a2 83       	std	Z+2, r26	; 0x02
    3906:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3908:	fe 01       	movw	r30, r28
    390a:	e5 5a       	subi	r30, 0xA5	; 165
    390c:	ff 4f       	sbci	r31, 0xFF	; 255
    390e:	60 81       	ld	r22, Z
    3910:	71 81       	ldd	r23, Z+1	; 0x01
    3912:	82 81       	ldd	r24, Z+2	; 0x02
    3914:	93 81       	ldd	r25, Z+3	; 0x03
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	40 e8       	ldi	r20, 0x80	; 128
    391c:	5f e3       	ldi	r21, 0x3F	; 63
    391e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3922:	88 23       	and	r24, r24
    3924:	44 f4       	brge	.+16     	; 0x3936 <SMD_voidContralHalfStep+0xf6>
		__ticks = 1;
    3926:	fe 01       	movw	r30, r28
    3928:	e7 5a       	subi	r30, 0xA7	; 167
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	91 83       	std	Z+1, r25	; 0x01
    3932:	80 83       	st	Z, r24
    3934:	64 c0       	rjmp	.+200    	; 0x39fe <SMD_voidContralHalfStep+0x1be>
	else if (__tmp > 65535)
    3936:	fe 01       	movw	r30, r28
    3938:	e5 5a       	subi	r30, 0xA5	; 165
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	60 81       	ld	r22, Z
    393e:	71 81       	ldd	r23, Z+1	; 0x01
    3940:	82 81       	ldd	r24, Z+2	; 0x02
    3942:	93 81       	ldd	r25, Z+3	; 0x03
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	3f ef       	ldi	r19, 0xFF	; 255
    3948:	4f e7       	ldi	r20, 0x7F	; 127
    394a:	57 e4       	ldi	r21, 0x47	; 71
    394c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3950:	18 16       	cp	r1, r24
    3952:	0c f0       	brlt	.+2      	; 0x3956 <SMD_voidContralHalfStep+0x116>
    3954:	43 c0       	rjmp	.+134    	; 0x39dc <SMD_voidContralHalfStep+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3956:	fe 01       	movw	r30, r28
    3958:	e1 5a       	subi	r30, 0xA1	; 161
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e2       	ldi	r20, 0x20	; 32
    396a:	51 e4       	ldi	r21, 0x41	; 65
    396c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	8e 01       	movw	r16, r28
    3976:	07 5a       	subi	r16, 0xA7	; 167
    3978:	1f 4f       	sbci	r17, 0xFF	; 255
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	f8 01       	movw	r30, r16
    3988:	91 83       	std	Z+1, r25	; 0x01
    398a:	80 83       	st	Z, r24
    398c:	1f c0       	rjmp	.+62     	; 0x39cc <SMD_voidContralHalfStep+0x18c>
    398e:	fe 01       	movw	r30, r28
    3990:	e9 5a       	subi	r30, 0xA9	; 169
    3992:	ff 4f       	sbci	r31, 0xFF	; 255
    3994:	88 ec       	ldi	r24, 0xC8	; 200
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	91 83       	std	Z+1, r25	; 0x01
    399a:	80 83       	st	Z, r24
    399c:	fe 01       	movw	r30, r28
    399e:	e9 5a       	subi	r30, 0xA9	; 169
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <SMD_voidContralHalfStep+0x166>
    39aa:	fe 01       	movw	r30, r28
    39ac:	e9 5a       	subi	r30, 0xA9	; 169
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	91 83       	std	Z+1, r25	; 0x01
    39b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b4:	de 01       	movw	r26, r28
    39b6:	a7 5a       	subi	r26, 0xA7	; 167
    39b8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ba:	fe 01       	movw	r30, r28
    39bc:	e7 5a       	subi	r30, 0xA7	; 167
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	80 81       	ld	r24, Z
    39c2:	91 81       	ldd	r25, Z+1	; 0x01
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	11 96       	adiw	r26, 0x01	; 1
    39c8:	9c 93       	st	X, r25
    39ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39cc:	fe 01       	movw	r30, r28
    39ce:	e7 5a       	subi	r30, 0xA7	; 167
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	80 81       	ld	r24, Z
    39d4:	91 81       	ldd	r25, Z+1	; 0x01
    39d6:	00 97       	sbiw	r24, 0x00	; 0
    39d8:	d1 f6       	brne	.-76     	; 0x398e <SMD_voidContralHalfStep+0x14e>
    39da:	27 c0       	rjmp	.+78     	; 0x3a2a <SMD_voidContralHalfStep+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39dc:	8e 01       	movw	r16, r28
    39de:	07 5a       	subi	r16, 0xA7	; 167
    39e0:	1f 4f       	sbci	r17, 0xFF	; 255
    39e2:	fe 01       	movw	r30, r28
    39e4:	e5 5a       	subi	r30, 0xA5	; 165
    39e6:	ff 4f       	sbci	r31, 0xFF	; 255
    39e8:	60 81       	ld	r22, Z
    39ea:	71 81       	ldd	r23, Z+1	; 0x01
    39ec:	82 81       	ldd	r24, Z+2	; 0x02
    39ee:	93 81       	ldd	r25, Z+3	; 0x03
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	f8 01       	movw	r30, r16
    39fa:	91 83       	std	Z+1, r25	; 0x01
    39fc:	80 83       	st	Z, r24
    39fe:	de 01       	movw	r26, r28
    3a00:	ab 5a       	subi	r26, 0xAB	; 171
    3a02:	bf 4f       	sbci	r27, 0xFF	; 255
    3a04:	fe 01       	movw	r30, r28
    3a06:	e7 5a       	subi	r30, 0xA7	; 167
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 81       	ld	r24, Z
    3a0c:	91 81       	ldd	r25, Z+1	; 0x01
    3a0e:	8d 93       	st	X+, r24
    3a10:	9c 93       	st	X, r25
    3a12:	fe 01       	movw	r30, r28
    3a14:	eb 5a       	subi	r30, 0xAB	; 171
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 81       	ld	r24, Z
    3a1a:	91 81       	ldd	r25, Z+1	; 0x01
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	f1 f7       	brne	.-4      	; 0x3a1c <SMD_voidContralHalfStep+0x1dc>
    3a20:	fe 01       	movw	r30, r28
    3a22:	eb 5a       	subi	r30, 0xAB	; 171
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	80 83       	st	Z, r24
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	60 e0       	ldi	r22, 0x00	; 0
    3a2e:	41 e0       	ldi	r20, 0x01	; 1
    3a30:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	61 e0       	ldi	r22, 0x01	; 1
    3a38:	41 e0       	ldi	r20, 0x01	; 1
    3a3a:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	62 e0       	ldi	r22, 0x02	; 2
    3a42:	40 e0       	ldi	r20, 0x00	; 0
    3a44:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	63 e0       	ldi	r22, 0x03	; 3
    3a4c:	40 e0       	ldi	r20, 0x00	; 0
    3a4e:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    3a52:	fe 01       	movw	r30, r28
    3a54:	ef 5a       	subi	r30, 0xAF	; 175
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	a0 e2       	ldi	r26, 0x20	; 32
    3a5e:	b1 e4       	ldi	r27, 0x41	; 65
    3a60:	80 83       	st	Z, r24
    3a62:	91 83       	std	Z+1, r25	; 0x01
    3a64:	a2 83       	std	Z+2, r26	; 0x02
    3a66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a68:	8e 01       	movw	r16, r28
    3a6a:	03 5b       	subi	r16, 0xB3	; 179
    3a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6e:	fe 01       	movw	r30, r28
    3a70:	ef 5a       	subi	r30, 0xAF	; 175
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	60 81       	ld	r22, Z
    3a76:	71 81       	ldd	r23, Z+1	; 0x01
    3a78:	82 81       	ldd	r24, Z+2	; 0x02
    3a7a:	93 81       	ldd	r25, Z+3	; 0x03
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	4a ef       	ldi	r20, 0xFA	; 250
    3a82:	54 e4       	ldi	r21, 0x44	; 68
    3a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	f8 01       	movw	r30, r16
    3a8e:	80 83       	st	Z, r24
    3a90:	91 83       	std	Z+1, r25	; 0x01
    3a92:	a2 83       	std	Z+2, r26	; 0x02
    3a94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a96:	fe 01       	movw	r30, r28
    3a98:	e3 5b       	subi	r30, 0xB3	; 179
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	60 81       	ld	r22, Z
    3a9e:	71 81       	ldd	r23, Z+1	; 0x01
    3aa0:	82 81       	ldd	r24, Z+2	; 0x02
    3aa2:	93 81       	ldd	r25, Z+3	; 0x03
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	40 e8       	ldi	r20, 0x80	; 128
    3aaa:	5f e3       	ldi	r21, 0x3F	; 63
    3aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab0:	88 23       	and	r24, r24
    3ab2:	44 f4       	brge	.+16     	; 0x3ac4 <SMD_voidContralHalfStep+0x284>
		__ticks = 1;
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	e5 5b       	subi	r30, 0xB5	; 181
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	91 83       	std	Z+1, r25	; 0x01
    3ac0:	80 83       	st	Z, r24
    3ac2:	64 c0       	rjmp	.+200    	; 0x3b8c <SMD_voidContralHalfStep+0x34c>
	else if (__tmp > 65535)
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	e3 5b       	subi	r30, 0xB3	; 179
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	60 81       	ld	r22, Z
    3acc:	71 81       	ldd	r23, Z+1	; 0x01
    3ace:	82 81       	ldd	r24, Z+2	; 0x02
    3ad0:	93 81       	ldd	r25, Z+3	; 0x03
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	3f ef       	ldi	r19, 0xFF	; 255
    3ad6:	4f e7       	ldi	r20, 0x7F	; 127
    3ad8:	57 e4       	ldi	r21, 0x47	; 71
    3ada:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ade:	18 16       	cp	r1, r24
    3ae0:	0c f0       	brlt	.+2      	; 0x3ae4 <SMD_voidContralHalfStep+0x2a4>
    3ae2:	43 c0       	rjmp	.+134    	; 0x3b6a <SMD_voidContralHalfStep+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	ef 5a       	subi	r30, 0xAF	; 175
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	60 81       	ld	r22, Z
    3aec:	71 81       	ldd	r23, Z+1	; 0x01
    3aee:	82 81       	ldd	r24, Z+2	; 0x02
    3af0:	93 81       	ldd	r25, Z+3	; 0x03
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	40 e2       	ldi	r20, 0x20	; 32
    3af8:	51 e4       	ldi	r21, 0x41	; 65
    3afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	8e 01       	movw	r16, r28
    3b04:	05 5b       	subi	r16, 0xB5	; 181
    3b06:	1f 4f       	sbci	r17, 0xFF	; 255
    3b08:	bc 01       	movw	r22, r24
    3b0a:	cd 01       	movw	r24, r26
    3b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	f8 01       	movw	r30, r16
    3b16:	91 83       	std	Z+1, r25	; 0x01
    3b18:	80 83       	st	Z, r24
    3b1a:	1f c0       	rjmp	.+62     	; 0x3b5a <SMD_voidContralHalfStep+0x31a>
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e7 5b       	subi	r30, 0xB7	; 183
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	88 ec       	ldi	r24, 0xC8	; 200
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	91 83       	std	Z+1, r25	; 0x01
    3b28:	80 83       	st	Z, r24
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	e7 5b       	subi	r30, 0xB7	; 183
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	80 81       	ld	r24, Z
    3b32:	91 81       	ldd	r25, Z+1	; 0x01
    3b34:	01 97       	sbiw	r24, 0x01	; 1
    3b36:	f1 f7       	brne	.-4      	; 0x3b34 <SMD_voidContralHalfStep+0x2f4>
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e7 5b       	subi	r30, 0xB7	; 183
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	91 83       	std	Z+1, r25	; 0x01
    3b40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b42:	de 01       	movw	r26, r28
    3b44:	a5 5b       	subi	r26, 0xB5	; 181
    3b46:	bf 4f       	sbci	r27, 0xFF	; 255
    3b48:	fe 01       	movw	r30, r28
    3b4a:	e5 5b       	subi	r30, 0xB5	; 181
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	80 81       	ld	r24, Z
    3b50:	91 81       	ldd	r25, Z+1	; 0x01
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	11 96       	adiw	r26, 0x01	; 1
    3b56:	9c 93       	st	X, r25
    3b58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e5 5b       	subi	r30, 0xB5	; 181
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	80 81       	ld	r24, Z
    3b62:	91 81       	ldd	r25, Z+1	; 0x01
    3b64:	00 97       	sbiw	r24, 0x00	; 0
    3b66:	d1 f6       	brne	.-76     	; 0x3b1c <SMD_voidContralHalfStep+0x2dc>
    3b68:	27 c0       	rjmp	.+78     	; 0x3bb8 <SMD_voidContralHalfStep+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6a:	8e 01       	movw	r16, r28
    3b6c:	05 5b       	subi	r16, 0xB5	; 181
    3b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b70:	fe 01       	movw	r30, r28
    3b72:	e3 5b       	subi	r30, 0xB3	; 179
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	60 81       	ld	r22, Z
    3b78:	71 81       	ldd	r23, Z+1	; 0x01
    3b7a:	82 81       	ldd	r24, Z+2	; 0x02
    3b7c:	93 81       	ldd	r25, Z+3	; 0x03
    3b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	f8 01       	movw	r30, r16
    3b88:	91 83       	std	Z+1, r25	; 0x01
    3b8a:	80 83       	st	Z, r24
    3b8c:	de 01       	movw	r26, r28
    3b8e:	a9 5b       	subi	r26, 0xB9	; 185
    3b90:	bf 4f       	sbci	r27, 0xFF	; 255
    3b92:	fe 01       	movw	r30, r28
    3b94:	e5 5b       	subi	r30, 0xB5	; 181
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	80 81       	ld	r24, Z
    3b9a:	91 81       	ldd	r25, Z+1	; 0x01
    3b9c:	8d 93       	st	X+, r24
    3b9e:	9c 93       	st	X, r25
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	e9 5b       	subi	r30, 0xB9	; 185
    3ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba6:	80 81       	ld	r24, Z
    3ba8:	91 81       	ldd	r25, Z+1	; 0x01
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	f1 f7       	brne	.-4      	; 0x3baa <SMD_voidContralHalfStep+0x36a>
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e9 5b       	subi	r30, 0xB9	; 185
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	91 83       	std	Z+1, r25	; 0x01
    3bb6:	80 83       	st	Z, r24
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	60 e0       	ldi	r22, 0x00	; 0
    3bbc:	40 e0       	ldi	r20, 0x00	; 0
    3bbe:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	61 e0       	ldi	r22, 0x01	; 1
    3bc6:	41 e0       	ldi	r20, 0x01	; 1
    3bc8:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	62 e0       	ldi	r22, 0x02	; 2
    3bd0:	40 e0       	ldi	r20, 0x00	; 0
    3bd2:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	63 e0       	ldi	r22, 0x03	; 3
    3bda:	40 e0       	ldi	r20, 0x00	; 0
    3bdc:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    3be0:	fe 01       	movw	r30, r28
    3be2:	ed 5b       	subi	r30, 0xBD	; 189
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	a0 e2       	ldi	r26, 0x20	; 32
    3bec:	b1 e4       	ldi	r27, 0x41	; 65
    3bee:	80 83       	st	Z, r24
    3bf0:	91 83       	std	Z+1, r25	; 0x01
    3bf2:	a2 83       	std	Z+2, r26	; 0x02
    3bf4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf6:	8e 01       	movw	r16, r28
    3bf8:	01 5c       	subi	r16, 0xC1	; 193
    3bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	ed 5b       	subi	r30, 0xBD	; 189
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	60 81       	ld	r22, Z
    3c04:	71 81       	ldd	r23, Z+1	; 0x01
    3c06:	82 81       	ldd	r24, Z+2	; 0x02
    3c08:	93 81       	ldd	r25, Z+3	; 0x03
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	4a ef       	ldi	r20, 0xFA	; 250
    3c10:	54 e4       	ldi	r21, 0x44	; 68
    3c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	f8 01       	movw	r30, r16
    3c1c:	80 83       	st	Z, r24
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	a2 83       	std	Z+2, r26	; 0x02
    3c22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c24:	fe 01       	movw	r30, r28
    3c26:	ff 96       	adiw	r30, 0x3f	; 63
    3c28:	60 81       	ld	r22, Z
    3c2a:	71 81       	ldd	r23, Z+1	; 0x01
    3c2c:	82 81       	ldd	r24, Z+2	; 0x02
    3c2e:	93 81       	ldd	r25, Z+3	; 0x03
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	40 e8       	ldi	r20, 0x80	; 128
    3c36:	5f e3       	ldi	r21, 0x3F	; 63
    3c38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c3c:	88 23       	and	r24, r24
    3c3e:	2c f4       	brge	.+10     	; 0x3c4a <SMD_voidContralHalfStep+0x40a>
		__ticks = 1;
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9e af       	std	Y+62, r25	; 0x3e
    3c46:	8d af       	std	Y+61, r24	; 0x3d
    3c48:	46 c0       	rjmp	.+140    	; 0x3cd6 <SMD_voidContralHalfStep+0x496>
	else if (__tmp > 65535)
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	ff 96       	adiw	r30, 0x3f	; 63
    3c4e:	60 81       	ld	r22, Z
    3c50:	71 81       	ldd	r23, Z+1	; 0x01
    3c52:	82 81       	ldd	r24, Z+2	; 0x02
    3c54:	93 81       	ldd	r25, Z+3	; 0x03
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	3f ef       	ldi	r19, 0xFF	; 255
    3c5a:	4f e7       	ldi	r20, 0x7F	; 127
    3c5c:	57 e4       	ldi	r21, 0x47	; 71
    3c5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c62:	18 16       	cp	r1, r24
    3c64:	64 f5       	brge	.+88     	; 0x3cbe <SMD_voidContralHalfStep+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c66:	fe 01       	movw	r30, r28
    3c68:	ed 5b       	subi	r30, 0xBD	; 189
    3c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6c:	60 81       	ld	r22, Z
    3c6e:	71 81       	ldd	r23, Z+1	; 0x01
    3c70:	82 81       	ldd	r24, Z+2	; 0x02
    3c72:	93 81       	ldd	r25, Z+3	; 0x03
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	40 e2       	ldi	r20, 0x20	; 32
    3c7a:	51 e4       	ldi	r21, 0x41	; 65
    3c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	bc 01       	movw	r22, r24
    3c86:	cd 01       	movw	r24, r26
    3c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	9e af       	std	Y+62, r25	; 0x3e
    3c92:	8d af       	std	Y+61, r24	; 0x3d
    3c94:	0f c0       	rjmp	.+30     	; 0x3cb4 <SMD_voidContralHalfStep+0x474>
    3c96:	88 ec       	ldi	r24, 0xC8	; 200
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	9c af       	std	Y+60, r25	; 0x3c
    3c9c:	8b af       	std	Y+59, r24	; 0x3b
    3c9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ca0:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	f1 f7       	brne	.-4      	; 0x3ca2 <SMD_voidContralHalfStep+0x462>
    3ca6:	9c af       	std	Y+60, r25	; 0x3c
    3ca8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3caa:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cac:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cae:	01 97       	sbiw	r24, 0x01	; 1
    3cb0:	9e af       	std	Y+62, r25	; 0x3e
    3cb2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cb8:	00 97       	sbiw	r24, 0x00	; 0
    3cba:	69 f7       	brne	.-38     	; 0x3c96 <SMD_voidContralHalfStep+0x456>
    3cbc:	16 c0       	rjmp	.+44     	; 0x3cea <SMD_voidContralHalfStep+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	ff 96       	adiw	r30, 0x3f	; 63
    3cc2:	60 81       	ld	r22, Z
    3cc4:	71 81       	ldd	r23, Z+1	; 0x01
    3cc6:	82 81       	ldd	r24, Z+2	; 0x02
    3cc8:	93 81       	ldd	r25, Z+3	; 0x03
    3cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	9e af       	std	Y+62, r25	; 0x3e
    3cd4:	8d af       	std	Y+61, r24	; 0x3d
    3cd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cda:	9a af       	std	Y+58, r25	; 0x3a
    3cdc:	89 af       	std	Y+57, r24	; 0x39
    3cde:	89 ad       	ldd	r24, Y+57	; 0x39
    3ce0:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ce2:	01 97       	sbiw	r24, 0x01	; 1
    3ce4:	f1 f7       	brne	.-4      	; 0x3ce2 <SMD_voidContralHalfStep+0x4a2>
    3ce6:	9a af       	std	Y+58, r25	; 0x3a
    3ce8:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	60 e0       	ldi	r22, 0x00	; 0
    3cee:	40 e0       	ldi	r20, 0x00	; 0
    3cf0:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	61 e0       	ldi	r22, 0x01	; 1
    3cf8:	41 e0       	ldi	r20, 0x01	; 1
    3cfa:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	62 e0       	ldi	r22, 0x02	; 2
    3d02:	41 e0       	ldi	r20, 0x01	; 1
    3d04:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	63 e0       	ldi	r22, 0x03	; 3
    3d0c:	40 e0       	ldi	r20, 0x00	; 0
    3d0e:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	a0 e2       	ldi	r26, 0x20	; 32
    3d18:	b1 e4       	ldi	r27, 0x41	; 65
    3d1a:	8d ab       	std	Y+53, r24	; 0x35
    3d1c:	9e ab       	std	Y+54, r25	; 0x36
    3d1e:	af ab       	std	Y+55, r26	; 0x37
    3d20:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d22:	6d a9       	ldd	r22, Y+53	; 0x35
    3d24:	7e a9       	ldd	r23, Y+54	; 0x36
    3d26:	8f a9       	ldd	r24, Y+55	; 0x37
    3d28:	98 ad       	ldd	r25, Y+56	; 0x38
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	4a ef       	ldi	r20, 0xFA	; 250
    3d30:	54 e4       	ldi	r21, 0x44	; 68
    3d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	89 ab       	std	Y+49, r24	; 0x31
    3d3c:	9a ab       	std	Y+50, r25	; 0x32
    3d3e:	ab ab       	std	Y+51, r26	; 0x33
    3d40:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d42:	69 a9       	ldd	r22, Y+49	; 0x31
    3d44:	7a a9       	ldd	r23, Y+50	; 0x32
    3d46:	8b a9       	ldd	r24, Y+51	; 0x33
    3d48:	9c a9       	ldd	r25, Y+52	; 0x34
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	40 e8       	ldi	r20, 0x80	; 128
    3d50:	5f e3       	ldi	r21, 0x3F	; 63
    3d52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d56:	88 23       	and	r24, r24
    3d58:	2c f4       	brge	.+10     	; 0x3d64 <SMD_voidContralHalfStep+0x524>
		__ticks = 1;
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	98 ab       	std	Y+48, r25	; 0x30
    3d60:	8f a7       	std	Y+47, r24	; 0x2f
    3d62:	3f c0       	rjmp	.+126    	; 0x3de2 <SMD_voidContralHalfStep+0x5a2>
	else if (__tmp > 65535)
    3d64:	69 a9       	ldd	r22, Y+49	; 0x31
    3d66:	7a a9       	ldd	r23, Y+50	; 0x32
    3d68:	8b a9       	ldd	r24, Y+51	; 0x33
    3d6a:	9c a9       	ldd	r25, Y+52	; 0x34
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	3f ef       	ldi	r19, 0xFF	; 255
    3d70:	4f e7       	ldi	r20, 0x7F	; 127
    3d72:	57 e4       	ldi	r21, 0x47	; 71
    3d74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d78:	18 16       	cp	r1, r24
    3d7a:	4c f5       	brge	.+82     	; 0x3dce <SMD_voidContralHalfStep+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d7c:	6d a9       	ldd	r22, Y+53	; 0x35
    3d7e:	7e a9       	ldd	r23, Y+54	; 0x36
    3d80:	8f a9       	ldd	r24, Y+55	; 0x37
    3d82:	98 ad       	ldd	r25, Y+56	; 0x38
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	40 e2       	ldi	r20, 0x20	; 32
    3d8a:	51 e4       	ldi	r21, 0x41	; 65
    3d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	bc 01       	movw	r22, r24
    3d96:	cd 01       	movw	r24, r26
    3d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	98 ab       	std	Y+48, r25	; 0x30
    3da2:	8f a7       	std	Y+47, r24	; 0x2f
    3da4:	0f c0       	rjmp	.+30     	; 0x3dc4 <SMD_voidContralHalfStep+0x584>
    3da6:	88 ec       	ldi	r24, 0xC8	; 200
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	9e a7       	std	Y+46, r25	; 0x2e
    3dac:	8d a7       	std	Y+45, r24	; 0x2d
    3dae:	8d a5       	ldd	r24, Y+45	; 0x2d
    3db0:	9e a5       	ldd	r25, Y+46	; 0x2e
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	f1 f7       	brne	.-4      	; 0x3db2 <SMD_voidContralHalfStep+0x572>
    3db6:	9e a7       	std	Y+46, r25	; 0x2e
    3db8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dba:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dbc:	98 a9       	ldd	r25, Y+48	; 0x30
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	98 ab       	std	Y+48, r25	; 0x30
    3dc2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dc6:	98 a9       	ldd	r25, Y+48	; 0x30
    3dc8:	00 97       	sbiw	r24, 0x00	; 0
    3dca:	69 f7       	brne	.-38     	; 0x3da6 <SMD_voidContralHalfStep+0x566>
    3dcc:	14 c0       	rjmp	.+40     	; 0x3df6 <SMD_voidContralHalfStep+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dce:	69 a9       	ldd	r22, Y+49	; 0x31
    3dd0:	7a a9       	ldd	r23, Y+50	; 0x32
    3dd2:	8b a9       	ldd	r24, Y+51	; 0x33
    3dd4:	9c a9       	ldd	r25, Y+52	; 0x34
    3dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	98 ab       	std	Y+48, r25	; 0x30
    3de0:	8f a7       	std	Y+47, r24	; 0x2f
    3de2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3de4:	98 a9       	ldd	r25, Y+48	; 0x30
    3de6:	9c a7       	std	Y+44, r25	; 0x2c
    3de8:	8b a7       	std	Y+43, r24	; 0x2b
    3dea:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dec:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dee:	01 97       	sbiw	r24, 0x01	; 1
    3df0:	f1 f7       	brne	.-4      	; 0x3dee <SMD_voidContralHalfStep+0x5ae>
    3df2:	9c a7       	std	Y+44, r25	; 0x2c
    3df4:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	60 e0       	ldi	r22, 0x00	; 0
    3dfa:	40 e0       	ldi	r20, 0x00	; 0
    3dfc:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	61 e0       	ldi	r22, 0x01	; 1
    3e04:	40 e0       	ldi	r20, 0x00	; 0
    3e06:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	62 e0       	ldi	r22, 0x02	; 2
    3e0e:	41 e0       	ldi	r20, 0x01	; 1
    3e10:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	63 e0       	ldi	r22, 0x03	; 3
    3e18:	40 e0       	ldi	r20, 0x00	; 0
    3e1a:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	a0 e2       	ldi	r26, 0x20	; 32
    3e24:	b1 e4       	ldi	r27, 0x41	; 65
    3e26:	8f a3       	std	Y+39, r24	; 0x27
    3e28:	98 a7       	std	Y+40, r25	; 0x28
    3e2a:	a9 a7       	std	Y+41, r26	; 0x29
    3e2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e2e:	6f a1       	ldd	r22, Y+39	; 0x27
    3e30:	78 a5       	ldd	r23, Y+40	; 0x28
    3e32:	89 a5       	ldd	r24, Y+41	; 0x29
    3e34:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	4a ef       	ldi	r20, 0xFA	; 250
    3e3c:	54 e4       	ldi	r21, 0x44	; 68
    3e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	8b a3       	std	Y+35, r24	; 0x23
    3e48:	9c a3       	std	Y+36, r25	; 0x24
    3e4a:	ad a3       	std	Y+37, r26	; 0x25
    3e4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e4e:	6b a1       	ldd	r22, Y+35	; 0x23
    3e50:	7c a1       	ldd	r23, Y+36	; 0x24
    3e52:	8d a1       	ldd	r24, Y+37	; 0x25
    3e54:	9e a1       	ldd	r25, Y+38	; 0x26
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	40 e8       	ldi	r20, 0x80	; 128
    3e5c:	5f e3       	ldi	r21, 0x3F	; 63
    3e5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e62:	88 23       	and	r24, r24
    3e64:	2c f4       	brge	.+10     	; 0x3e70 <SMD_voidContralHalfStep+0x630>
		__ticks = 1;
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	9a a3       	std	Y+34, r25	; 0x22
    3e6c:	89 a3       	std	Y+33, r24	; 0x21
    3e6e:	3f c0       	rjmp	.+126    	; 0x3eee <SMD_voidContralHalfStep+0x6ae>
	else if (__tmp > 65535)
    3e70:	6b a1       	ldd	r22, Y+35	; 0x23
    3e72:	7c a1       	ldd	r23, Y+36	; 0x24
    3e74:	8d a1       	ldd	r24, Y+37	; 0x25
    3e76:	9e a1       	ldd	r25, Y+38	; 0x26
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	3f ef       	ldi	r19, 0xFF	; 255
    3e7c:	4f e7       	ldi	r20, 0x7F	; 127
    3e7e:	57 e4       	ldi	r21, 0x47	; 71
    3e80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e84:	18 16       	cp	r1, r24
    3e86:	4c f5       	brge	.+82     	; 0x3eda <SMD_voidContralHalfStep+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e88:	6f a1       	ldd	r22, Y+39	; 0x27
    3e8a:	78 a5       	ldd	r23, Y+40	; 0x28
    3e8c:	89 a5       	ldd	r24, Y+41	; 0x29
    3e8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	40 e2       	ldi	r20, 0x20	; 32
    3e96:	51 e4       	ldi	r21, 0x41	; 65
    3e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	bc 01       	movw	r22, r24
    3ea2:	cd 01       	movw	r24, r26
    3ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	9a a3       	std	Y+34, r25	; 0x22
    3eae:	89 a3       	std	Y+33, r24	; 0x21
    3eb0:	0f c0       	rjmp	.+30     	; 0x3ed0 <SMD_voidContralHalfStep+0x690>
    3eb2:	88 ec       	ldi	r24, 0xC8	; 200
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	98 a3       	std	Y+32, r25	; 0x20
    3eb8:	8f 8f       	std	Y+31, r24	; 0x1f
    3eba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ebc:	98 a1       	ldd	r25, Y+32	; 0x20
    3ebe:	01 97       	sbiw	r24, 0x01	; 1
    3ec0:	f1 f7       	brne	.-4      	; 0x3ebe <SMD_voidContralHalfStep+0x67e>
    3ec2:	98 a3       	std	Y+32, r25	; 0x20
    3ec4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ec8:	9a a1       	ldd	r25, Y+34	; 0x22
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	9a a3       	std	Y+34, r25	; 0x22
    3ece:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ed2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ed4:	00 97       	sbiw	r24, 0x00	; 0
    3ed6:	69 f7       	brne	.-38     	; 0x3eb2 <SMD_voidContralHalfStep+0x672>
    3ed8:	14 c0       	rjmp	.+40     	; 0x3f02 <SMD_voidContralHalfStep+0x6c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eda:	6b a1       	ldd	r22, Y+35	; 0x23
    3edc:	7c a1       	ldd	r23, Y+36	; 0x24
    3ede:	8d a1       	ldd	r24, Y+37	; 0x25
    3ee0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	9a a3       	std	Y+34, r25	; 0x22
    3eec:	89 a3       	std	Y+33, r24	; 0x21
    3eee:	89 a1       	ldd	r24, Y+33	; 0x21
    3ef0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ef2:	9e 8f       	std	Y+30, r25	; 0x1e
    3ef4:	8d 8f       	std	Y+29, r24	; 0x1d
    3ef6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ef8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3efa:	01 97       	sbiw	r24, 0x01	; 1
    3efc:	f1 f7       	brne	.-4      	; 0x3efa <SMD_voidContralHalfStep+0x6ba>
    3efe:	9e 8f       	std	Y+30, r25	; 0x1e
    3f00:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	60 e0       	ldi	r22, 0x00	; 0
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	61 e0       	ldi	r22, 0x01	; 1
    3f10:	40 e0       	ldi	r20, 0x00	; 0
    3f12:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    3f16:	80 e0       	ldi	r24, 0x00	; 0
    3f18:	62 e0       	ldi	r22, 0x02	; 2
    3f1a:	41 e0       	ldi	r20, 0x01	; 1
    3f1c:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	63 e0       	ldi	r22, 0x03	; 3
    3f24:	41 e0       	ldi	r20, 0x01	; 1
    3f26:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	a0 e2       	ldi	r26, 0x20	; 32
    3f30:	b1 e4       	ldi	r27, 0x41	; 65
    3f32:	89 8f       	std	Y+25, r24	; 0x19
    3f34:	9a 8f       	std	Y+26, r25	; 0x1a
    3f36:	ab 8f       	std	Y+27, r26	; 0x1b
    3f38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f3a:	69 8d       	ldd	r22, Y+25	; 0x19
    3f3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	4a ef       	ldi	r20, 0xFA	; 250
    3f48:	54 e4       	ldi	r21, 0x44	; 68
    3f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	8d 8b       	std	Y+21, r24	; 0x15
    3f54:	9e 8b       	std	Y+22, r25	; 0x16
    3f56:	af 8b       	std	Y+23, r26	; 0x17
    3f58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f60:	98 8d       	ldd	r25, Y+24	; 0x18
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	40 e8       	ldi	r20, 0x80	; 128
    3f68:	5f e3       	ldi	r21, 0x3F	; 63
    3f6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f6e:	88 23       	and	r24, r24
    3f70:	2c f4       	brge	.+10     	; 0x3f7c <SMD_voidContralHalfStep+0x73c>
		__ticks = 1;
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	9c 8b       	std	Y+20, r25	; 0x14
    3f78:	8b 8b       	std	Y+19, r24	; 0x13
    3f7a:	3f c0       	rjmp	.+126    	; 0x3ffa <SMD_voidContralHalfStep+0x7ba>
	else if (__tmp > 65535)
    3f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f80:	8f 89       	ldd	r24, Y+23	; 0x17
    3f82:	98 8d       	ldd	r25, Y+24	; 0x18
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	3f ef       	ldi	r19, 0xFF	; 255
    3f88:	4f e7       	ldi	r20, 0x7F	; 127
    3f8a:	57 e4       	ldi	r21, 0x47	; 71
    3f8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f90:	18 16       	cp	r1, r24
    3f92:	4c f5       	brge	.+82     	; 0x3fe6 <SMD_voidContralHalfStep+0x7a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f94:	69 8d       	ldd	r22, Y+25	; 0x19
    3f96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	40 e2       	ldi	r20, 0x20	; 32
    3fa2:	51 e4       	ldi	r21, 0x41	; 65
    3fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	bc 01       	movw	r22, r24
    3fae:	cd 01       	movw	r24, r26
    3fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	9c 8b       	std	Y+20, r25	; 0x14
    3fba:	8b 8b       	std	Y+19, r24	; 0x13
    3fbc:	0f c0       	rjmp	.+30     	; 0x3fdc <SMD_voidContralHalfStep+0x79c>
    3fbe:	88 ec       	ldi	r24, 0xC8	; 200
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	9a 8b       	std	Y+18, r25	; 0x12
    3fc4:	89 8b       	std	Y+17, r24	; 0x11
    3fc6:	89 89       	ldd	r24, Y+17	; 0x11
    3fc8:	9a 89       	ldd	r25, Y+18	; 0x12
    3fca:	01 97       	sbiw	r24, 0x01	; 1
    3fcc:	f1 f7       	brne	.-4      	; 0x3fca <SMD_voidContralHalfStep+0x78a>
    3fce:	9a 8b       	std	Y+18, r25	; 0x12
    3fd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	9c 8b       	std	Y+20, r25	; 0x14
    3fda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    3fde:	9c 89       	ldd	r25, Y+20	; 0x14
    3fe0:	00 97       	sbiw	r24, 0x00	; 0
    3fe2:	69 f7       	brne	.-38     	; 0x3fbe <SMD_voidContralHalfStep+0x77e>
    3fe4:	14 c0       	rjmp	.+40     	; 0x400e <SMD_voidContralHalfStep+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    3fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    3fea:	8f 89       	ldd	r24, Y+23	; 0x17
    3fec:	98 8d       	ldd	r25, Y+24	; 0x18
    3fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	9c 8b       	std	Y+20, r25	; 0x14
    3ff8:	8b 8b       	std	Y+19, r24	; 0x13
    3ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    3ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ffe:	98 8b       	std	Y+16, r25	; 0x10
    4000:	8f 87       	std	Y+15, r24	; 0x0f
    4002:	8f 85       	ldd	r24, Y+15	; 0x0f
    4004:	98 89       	ldd	r25, Y+16	; 0x10
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	f1 f7       	brne	.-4      	; 0x4006 <SMD_voidContralHalfStep+0x7c6>
    400a:	98 8b       	std	Y+16, r25	; 0x10
    400c:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	60 e0       	ldi	r22, 0x00	; 0
    4012:	40 e0       	ldi	r20, 0x00	; 0
    4014:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	61 e0       	ldi	r22, 0x01	; 1
    401c:	40 e0       	ldi	r20, 0x00	; 0
    401e:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	62 e0       	ldi	r22, 0x02	; 2
    4026:	40 e0       	ldi	r20, 0x00	; 0
    4028:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	63 e0       	ldi	r22, 0x03	; 3
    4030:	41 e0       	ldi	r20, 0x01	; 1
    4032:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	a0 e2       	ldi	r26, 0x20	; 32
    403c:	b1 e4       	ldi	r27, 0x41	; 65
    403e:	8b 87       	std	Y+11, r24	; 0x0b
    4040:	9c 87       	std	Y+12, r25	; 0x0c
    4042:	ad 87       	std	Y+13, r26	; 0x0d
    4044:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4046:	6b 85       	ldd	r22, Y+11	; 0x0b
    4048:	7c 85       	ldd	r23, Y+12	; 0x0c
    404a:	8d 85       	ldd	r24, Y+13	; 0x0d
    404c:	9e 85       	ldd	r25, Y+14	; 0x0e
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	4a ef       	ldi	r20, 0xFA	; 250
    4054:	54 e4       	ldi	r21, 0x44	; 68
    4056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	8f 83       	std	Y+7, r24	; 0x07
    4060:	98 87       	std	Y+8, r25	; 0x08
    4062:	a9 87       	std	Y+9, r26	; 0x09
    4064:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4066:	6f 81       	ldd	r22, Y+7	; 0x07
    4068:	78 85       	ldd	r23, Y+8	; 0x08
    406a:	89 85       	ldd	r24, Y+9	; 0x09
    406c:	9a 85       	ldd	r25, Y+10	; 0x0a
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e8       	ldi	r20, 0x80	; 128
    4074:	5f e3       	ldi	r21, 0x3F	; 63
    4076:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    407a:	88 23       	and	r24, r24
    407c:	2c f4       	brge	.+10     	; 0x4088 <SMD_voidContralHalfStep+0x848>
		__ticks = 1;
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	9e 83       	std	Y+6, r25	; 0x06
    4084:	8d 83       	std	Y+5, r24	; 0x05
    4086:	3f c0       	rjmp	.+126    	; 0x4106 <SMD_voidContralHalfStep+0x8c6>
	else if (__tmp > 65535)
    4088:	6f 81       	ldd	r22, Y+7	; 0x07
    408a:	78 85       	ldd	r23, Y+8	; 0x08
    408c:	89 85       	ldd	r24, Y+9	; 0x09
    408e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	3f ef       	ldi	r19, 0xFF	; 255
    4094:	4f e7       	ldi	r20, 0x7F	; 127
    4096:	57 e4       	ldi	r21, 0x47	; 71
    4098:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    409c:	18 16       	cp	r1, r24
    409e:	4c f5       	brge	.+82     	; 0x40f2 <SMD_voidContralHalfStep+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    40a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    40a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    40a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	40 e2       	ldi	r20, 0x20	; 32
    40ae:	51 e4       	ldi	r21, 0x41	; 65
    40b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	bc 01       	movw	r22, r24
    40ba:	cd 01       	movw	r24, r26
    40bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c0:	dc 01       	movw	r26, r24
    40c2:	cb 01       	movw	r24, r22
    40c4:	9e 83       	std	Y+6, r25	; 0x06
    40c6:	8d 83       	std	Y+5, r24	; 0x05
    40c8:	0f c0       	rjmp	.+30     	; 0x40e8 <SMD_voidContralHalfStep+0x8a8>
    40ca:	88 ec       	ldi	r24, 0xC8	; 200
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	9c 83       	std	Y+4, r25	; 0x04
    40d0:	8b 83       	std	Y+3, r24	; 0x03
    40d2:	8b 81       	ldd	r24, Y+3	; 0x03
    40d4:	9c 81       	ldd	r25, Y+4	; 0x04
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	f1 f7       	brne	.-4      	; 0x40d6 <SMD_voidContralHalfStep+0x896>
    40da:	9c 83       	std	Y+4, r25	; 0x04
    40dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40de:	8d 81       	ldd	r24, Y+5	; 0x05
    40e0:	9e 81       	ldd	r25, Y+6	; 0x06
    40e2:	01 97       	sbiw	r24, 0x01	; 1
    40e4:	9e 83       	std	Y+6, r25	; 0x06
    40e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ea:	9e 81       	ldd	r25, Y+6	; 0x06
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	69 f7       	brne	.-38     	; 0x40ca <SMD_voidContralHalfStep+0x88a>
    40f0:	14 c0       	rjmp	.+40     	; 0x411a <SMD_voidContralHalfStep+0x8da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f2:	6f 81       	ldd	r22, Y+7	; 0x07
    40f4:	78 85       	ldd	r23, Y+8	; 0x08
    40f6:	89 85       	ldd	r24, Y+9	; 0x09
    40f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	9e 83       	std	Y+6, r25	; 0x06
    4104:	8d 83       	std	Y+5, r24	; 0x05
    4106:	8d 81       	ldd	r24, Y+5	; 0x05
    4108:	9e 81       	ldd	r25, Y+6	; 0x06
    410a:	9a 83       	std	Y+2, r25	; 0x02
    410c:	89 83       	std	Y+1, r24	; 0x01
    410e:	89 81       	ldd	r24, Y+1	; 0x01
    4110:	9a 81       	ldd	r25, Y+2	; 0x02
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	f1 f7       	brne	.-4      	; 0x4112 <SMD_voidContralHalfStep+0x8d2>
    4116:	9a 83       	std	Y+2, r25	; 0x02
    4118:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	60 e0       	ldi	r22, 0x00	; 0
    411e:	41 e0       	ldi	r20, 0x01	; 1
    4120:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	61 e0       	ldi	r22, 0x01	; 1
    4128:	40 e0       	ldi	r20, 0x00	; 0
    412a:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	62 e0       	ldi	r22, 0x02	; 2
    4132:	40 e0       	ldi	r20, 0x00	; 0
    4134:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	63 e0       	ldi	r22, 0x03	; 3
    413c:	41 e0       	ldi	r20, 0x01	; 1
    413e:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
void SMD_voidContralHalfStep (u16 Copy_u16Angle)
{
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    u16 Local_u16LoopCounter = 0;
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 8; Local_u16LoopCounter++)
    4142:	de 01       	movw	r26, r28
    4144:	ad 59       	subi	r26, 0x9D	; 157
    4146:	bf 4f       	sbci	r27, 0xFF	; 255
    4148:	fe 01       	movw	r30, r28
    414a:	ed 59       	subi	r30, 0x9D	; 157
    414c:	ff 4f       	sbci	r31, 0xFF	; 255
    414e:	80 81       	ld	r24, Z
    4150:	91 81       	ldd	r25, Z+1	; 0x01
    4152:	01 96       	adiw	r24, 0x01	; 1
    4154:	11 96       	adiw	r26, 0x01	; 1
    4156:	9c 93       	st	X, r25
    4158:	8e 93       	st	-X, r24
    415a:	80 91 ff 01 	lds	r24, 0x01FF
    415e:	90 91 00 02 	lds	r25, 0x0200
    4162:	9c 01       	movw	r18, r24
    4164:	36 95       	lsr	r19
    4166:	27 95       	ror	r18
    4168:	36 95       	lsr	r19
    416a:	27 95       	ror	r18
    416c:	36 95       	lsr	r19
    416e:	27 95       	ror	r18
    4170:	fe 01       	movw	r30, r28
    4172:	ed 59       	subi	r30, 0x9D	; 157
    4174:	ff 4f       	sbci	r31, 0xFF	; 255
    4176:	80 81       	ld	r24, Z
    4178:	91 81       	ldd	r25, Z+1	; 0x01
    417a:	28 17       	cp	r18, r24
    417c:	39 07       	cpc	r19, r25
    417e:	08 f0       	brcs	.+2      	; 0x4182 <SMD_voidContralHalfStep+0x942>
    4180:	8d cb       	rjmp	.-2278   	; 0x389c <SMD_voidContralHalfStep+0x5c>
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    }
}
    4182:	ca 59       	subi	r28, 0x9A	; 154
    4184:	df 4f       	sbci	r29, 0xFF	; 255
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	f8 94       	cli
    418a:	de bf       	out	0x3e, r29	; 62
    418c:	0f be       	out	0x3f, r0	; 63
    418e:	cd bf       	out	0x3d, r28	; 61
    4190:	cf 91       	pop	r28
    4192:	df 91       	pop	r29
    4194:	1f 91       	pop	r17
    4196:	0f 91       	pop	r16
    4198:	08 95       	ret

0000419a <SMD_voidStop>:

void SMD_voidStop(void)
{
    419a:	df 93       	push	r29
    419c:	cf 93       	push	r28
    419e:	cd b7       	in	r28, 0x3d	; 61
    41a0:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPortSpecificDirection(SMD_PORT, 0x00);
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	60 e0       	ldi	r22, 0x00	; 0
    41a6:	0e 94 83 14 	call	0x2906	; 0x2906 <DIO_voidSetPortSpecificDirection>
}
    41aa:	cf 91       	pop	r28
    41ac:	df 91       	pop	r29
    41ae:	08 95       	ret

000041b0 <LM35_voidInit>:
#include "LM35_private.h"
#include "LM35_config.h"


void LM35_voidInit(void)
{
    41b0:	df 93       	push	r29
    41b2:	cf 93       	push	r28
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(LM35_PORT, LM35_CHANNEL, INPUT);
    41b8:	80 e0       	ldi	r24, 0x00	; 0
    41ba:	60 e0       	ldi	r22, 0x00	; 0
    41bc:	40 e0       	ldi	r20, 0x00	; 0
    41be:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
	ADC_voidInit();
    41c2:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <ADC_voidInit>
}
    41c6:	cf 91       	pop	r28
    41c8:	df 91       	pop	r29
    41ca:	08 95       	ret

000041cc <LM35_u8GetTempratureSynchronous>:

static u8 StepSize = (u8)(5000UL / 256UL);
u8 LM35_u8GetTempratureSynchronous (void)
{
    41cc:	df 93       	push	r29
    41ce:	cf 93       	push	r28
    41d0:	00 d0       	rcall	.+0      	; 0x41d2 <LM35_u8GetTempratureSynchronous+0x6>
    41d2:	00 d0       	rcall	.+0      	; 0x41d4 <LM35_u8GetTempratureSynchronous+0x8>
    41d4:	cd b7       	in	r28, 0x3d	; 61
    41d6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8DigitalValue  = 0;
    41d8:	1c 82       	std	Y+4, r1	; 0x04
	u16 Local_u8AnalogValue  = 0;
    41da:	1b 82       	std	Y+3, r1	; 0x03
    41dc:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TempValue     = 0;
    41de:	19 82       	std	Y+1, r1	; 0x01
	
	Local_u8DigitalValue = ACD_voidStartConversionSynchronous(ADC_Channel_0);
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <ACD_voidStartConversionSynchronous>
    41e6:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8AnalogValue  = (u16) ((u8)Local_u8DigitalValue * (u8)StepSize);
    41e8:	8c 81       	ldd	r24, Y+4	; 0x04
    41ea:	28 2f       	mov	r18, r24
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	80 91 cb 01 	lds	r24, 0x01CB
    41f2:	88 2f       	mov	r24, r24
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	ac 01       	movw	r20, r24
    41f8:	24 9f       	mul	r18, r20
    41fa:	c0 01       	movw	r24, r0
    41fc:	25 9f       	mul	r18, r21
    41fe:	90 0d       	add	r25, r0
    4200:	34 9f       	mul	r19, r20
    4202:	90 0d       	add	r25, r0
    4204:	11 24       	eor	r1, r1
    4206:	9b 83       	std	Y+3, r25	; 0x03
    4208:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8TempValue    = (u8)((u32)Local_u8AnalogValue / 10UL);
    420a:	8a 81       	ldd	r24, Y+2	; 0x02
    420c:	9b 81       	ldd	r25, Y+3	; 0x03
    420e:	2a e0       	ldi	r18, 0x0A	; 10
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	b9 01       	movw	r22, r18
    4214:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__udivmodhi4>
    4218:	cb 01       	movw	r24, r22
    421a:	89 83       	std	Y+1, r24	; 0x01

	return(Local_u8TempValue);
    421c:	89 81       	ldd	r24, Y+1	; 0x01
}
    421e:	0f 90       	pop	r0
    4220:	0f 90       	pop	r0
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	08 95       	ret

0000422c <LM35_u8GetTempratureASynchronous>:

u8 TempValue   = 255;
void LM35_u8GetTempratureASynchronous(u8 *Ref_u8Digital)
{
    422c:	df 93       	push	r29
    422e:	cf 93       	push	r28
    4230:	00 d0       	rcall	.+0      	; 0x4232 <LM35_u8GetTempratureASynchronous+0x6>
    4232:	00 d0       	rcall	.+0      	; 0x4234 <LM35_u8GetTempratureASynchronous+0x8>
    4234:	0f 92       	push	r0
    4236:	cd b7       	in	r28, 0x3d	; 61
    4238:	de b7       	in	r29, 0x3e	; 62
    423a:	9d 83       	std	Y+5, r25	; 0x05
    423c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8DigitalValue  = 0;
    423e:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u8AnalogValue  = 0;
    4240:	1a 82       	std	Y+2, r1	; 0x02
    4242:	19 82       	std	Y+1, r1	; 0x01
	Local_u8AnalogValue = (u16) ((u8)(*Ref_u8Digital)) * (u8)StepSize;
    4244:	ec 81       	ldd	r30, Y+4	; 0x04
    4246:	fd 81       	ldd	r31, Y+5	; 0x05
    4248:	80 81       	ld	r24, Z
    424a:	28 2f       	mov	r18, r24
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	80 91 cb 01 	lds	r24, 0x01CB
    4252:	88 2f       	mov	r24, r24
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	ac 01       	movw	r20, r24
    4258:	24 9f       	mul	r18, r20
    425a:	c0 01       	movw	r24, r0
    425c:	25 9f       	mul	r18, r21
    425e:	90 0d       	add	r25, r0
    4260:	34 9f       	mul	r19, r20
    4262:	90 0d       	add	r25, r0
    4264:	11 24       	eor	r1, r1
    4266:	9a 83       	std	Y+2, r25	; 0x02
    4268:	89 83       	std	Y+1, r24	; 0x01
	TempValue = (u8)((u32)Local_u8AnalogValue / 10UL);
    426a:	89 81       	ldd	r24, Y+1	; 0x01
    426c:	9a 81       	ldd	r25, Y+2	; 0x02
    426e:	2a e0       	ldi	r18, 0x0A	; 10
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	b9 01       	movw	r22, r18
    4274:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__udivmodhi4>
    4278:	cb 01       	movw	r24, r22
    427a:	80 93 cc 01 	sts	0x01CC, r24

}
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	cf 91       	pop	r28
    428a:	df 91       	pop	r29
    428c:	08 95       	ret

0000428e <LM35_ASynchronous>:

u8 LM35_ASynchronous (void)
{
    428e:	df 93       	push	r29
    4290:	cf 93       	push	r28
    4292:	cd b7       	in	r28, 0x3d	; 61
    4294:	de b7       	in	r29, 0x3e	; 62
	ACD_voidStartConversionASynchronous(ADC_Channel_0, &LM35_u8GetTempratureASynchronous);
    4296:	26 e1       	ldi	r18, 0x16	; 22
    4298:	31 e2       	ldi	r19, 0x21	; 33
    429a:	80 e0       	ldi	r24, 0x00	; 0
    429c:	b9 01       	movw	r22, r18
    429e:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <ACD_voidStartConversionASynchronous>
	return(TempValue);
    42a2:	80 91 cc 01 	lds	r24, 0x01CC
}
    42a6:	cf 91       	pop	r28
    42a8:	df 91       	pop	r29
    42aa:	08 95       	ret

000042ac <voidSendCommand>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

static void voidSendCommand(u8 Copy_u8Command)
{
    42ac:	df 93       	push	r29
    42ae:	cf 93       	push	r28
    42b0:	cd b7       	in	r28, 0x3d	; 61
    42b2:	de b7       	in	r29, 0x3e	; 62
    42b4:	2f 97       	sbiw	r28, 0x0f	; 15
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	f8 94       	cli
    42ba:	de bf       	out	0x3e, r29	; 62
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	cd bf       	out	0x3d, r28	; 61
    42c0:	8f 87       	std	Y+15, r24	; 0x0f
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_Rw, LOW);
    42c2:	83 e0       	ldi	r24, 0x03	; 3
    42c4:	60 e0       	ldi	r22, 0x00	; 0
    42c6:	40 e0       	ldi	r20, 0x00	; 0
    42c8:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_RS, LOW);
    42cc:	83 e0       	ldi	r24, 0x03	; 3
    42ce:	61 e0       	ldi	r22, 0x01	; 1
    42d0:	40 e0       	ldi	r20, 0x00	; 0
    42d2:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>

    DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Command);
    42d6:	80 e0       	ldi	r24, 0x00	; 0
    42d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    42da:	0e 94 c7 14 	call	0x298e	; 0x298e <DIO_voidSetPortSpecificValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    42de:	83 e0       	ldi	r24, 0x03	; 3
    42e0:	62 e0       	ldi	r22, 0x02	; 2
    42e2:	40 e0       	ldi	r20, 0x00	; 0
    42e4:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, HIGH);
    42e8:	83 e0       	ldi	r24, 0x03	; 3
    42ea:	62 e0       	ldi	r22, 0x02	; 2
    42ec:	41 e0       	ldi	r20, 0x01	; 1
    42ee:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    42f2:	80 e0       	ldi	r24, 0x00	; 0
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	a0 e0       	ldi	r26, 0x00	; 0
    42f8:	b0 e4       	ldi	r27, 0x40	; 64
    42fa:	8b 87       	std	Y+11, r24	; 0x0b
    42fc:	9c 87       	std	Y+12, r25	; 0x0c
    42fe:	ad 87       	std	Y+13, r26	; 0x0d
    4300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4302:	6b 85       	ldd	r22, Y+11	; 0x0b
    4304:	7c 85       	ldd	r23, Y+12	; 0x0c
    4306:	8d 85       	ldd	r24, Y+13	; 0x0d
    4308:	9e 85       	ldd	r25, Y+14	; 0x0e
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	4a ef       	ldi	r20, 0xFA	; 250
    4310:	54 e4       	ldi	r21, 0x44	; 68
    4312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4316:	dc 01       	movw	r26, r24
    4318:	cb 01       	movw	r24, r22
    431a:	8f 83       	std	Y+7, r24	; 0x07
    431c:	98 87       	std	Y+8, r25	; 0x08
    431e:	a9 87       	std	Y+9, r26	; 0x09
    4320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4322:	6f 81       	ldd	r22, Y+7	; 0x07
    4324:	78 85       	ldd	r23, Y+8	; 0x08
    4326:	89 85       	ldd	r24, Y+9	; 0x09
    4328:	9a 85       	ldd	r25, Y+10	; 0x0a
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	40 e8       	ldi	r20, 0x80	; 128
    4330:	5f e3       	ldi	r21, 0x3F	; 63
    4332:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4336:	88 23       	and	r24, r24
    4338:	2c f4       	brge	.+10     	; 0x4344 <voidSendCommand+0x98>
		__ticks = 1;
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	9e 83       	std	Y+6, r25	; 0x06
    4340:	8d 83       	std	Y+5, r24	; 0x05
    4342:	3f c0       	rjmp	.+126    	; 0x43c2 <voidSendCommand+0x116>
	else if (__tmp > 65535)
    4344:	6f 81       	ldd	r22, Y+7	; 0x07
    4346:	78 85       	ldd	r23, Y+8	; 0x08
    4348:	89 85       	ldd	r24, Y+9	; 0x09
    434a:	9a 85       	ldd	r25, Y+10	; 0x0a
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	3f ef       	ldi	r19, 0xFF	; 255
    4350:	4f e7       	ldi	r20, 0x7F	; 127
    4352:	57 e4       	ldi	r21, 0x47	; 71
    4354:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4358:	18 16       	cp	r1, r24
    435a:	4c f5       	brge	.+82     	; 0x43ae <voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    435c:	6b 85       	ldd	r22, Y+11	; 0x0b
    435e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4360:	8d 85       	ldd	r24, Y+13	; 0x0d
    4362:	9e 85       	ldd	r25, Y+14	; 0x0e
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	40 e2       	ldi	r20, 0x20	; 32
    436a:	51 e4       	ldi	r21, 0x41	; 65
    436c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4370:	dc 01       	movw	r26, r24
    4372:	cb 01       	movw	r24, r22
    4374:	bc 01       	movw	r22, r24
    4376:	cd 01       	movw	r24, r26
    4378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	9e 83       	std	Y+6, r25	; 0x06
    4382:	8d 83       	std	Y+5, r24	; 0x05
    4384:	0f c0       	rjmp	.+30     	; 0x43a4 <voidSendCommand+0xf8>
    4386:	88 ec       	ldi	r24, 0xC8	; 200
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	9c 83       	std	Y+4, r25	; 0x04
    438c:	8b 83       	std	Y+3, r24	; 0x03
    438e:	8b 81       	ldd	r24, Y+3	; 0x03
    4390:	9c 81       	ldd	r25, Y+4	; 0x04
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	f1 f7       	brne	.-4      	; 0x4392 <voidSendCommand+0xe6>
    4396:	9c 83       	std	Y+4, r25	; 0x04
    4398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    439a:	8d 81       	ldd	r24, Y+5	; 0x05
    439c:	9e 81       	ldd	r25, Y+6	; 0x06
    439e:	01 97       	sbiw	r24, 0x01	; 1
    43a0:	9e 83       	std	Y+6, r25	; 0x06
    43a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a4:	8d 81       	ldd	r24, Y+5	; 0x05
    43a6:	9e 81       	ldd	r25, Y+6	; 0x06
    43a8:	00 97       	sbiw	r24, 0x00	; 0
    43aa:	69 f7       	brne	.-38     	; 0x4386 <voidSendCommand+0xda>
    43ac:	14 c0       	rjmp	.+40     	; 0x43d6 <voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ae:	6f 81       	ldd	r22, Y+7	; 0x07
    43b0:	78 85       	ldd	r23, Y+8	; 0x08
    43b2:	89 85       	ldd	r24, Y+9	; 0x09
    43b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ba:	dc 01       	movw	r26, r24
    43bc:	cb 01       	movw	r24, r22
    43be:	9e 83       	std	Y+6, r25	; 0x06
    43c0:	8d 83       	std	Y+5, r24	; 0x05
    43c2:	8d 81       	ldd	r24, Y+5	; 0x05
    43c4:	9e 81       	ldd	r25, Y+6	; 0x06
    43c6:	9a 83       	std	Y+2, r25	; 0x02
    43c8:	89 83       	std	Y+1, r24	; 0x01
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
    43cc:	9a 81       	ldd	r25, Y+2	; 0x02
    43ce:	01 97       	sbiw	r24, 0x01	; 1
    43d0:	f1 f7       	brne	.-4      	; 0x43ce <voidSendCommand+0x122>
    43d2:	9a 83       	std	Y+2, r25	; 0x02
    43d4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    43d6:	83 e0       	ldi	r24, 0x03	; 3
    43d8:	62 e0       	ldi	r22, 0x02	; 2
    43da:	40 e0       	ldi	r20, 0x00	; 0
    43dc:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
}
    43e0:	2f 96       	adiw	r28, 0x0f	; 15
    43e2:	0f b6       	in	r0, 0x3f	; 63
    43e4:	f8 94       	cli
    43e6:	de bf       	out	0x3e, r29	; 62
    43e8:	0f be       	out	0x3f, r0	; 63
    43ea:	cd bf       	out	0x3d, r28	; 61
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	08 95       	ret

000043f2 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    43f2:	df 93       	push	r29
    43f4:	cf 93       	push	r28
    43f6:	cd b7       	in	r28, 0x3d	; 61
    43f8:	de b7       	in	r29, 0x3e	; 62
    43fa:	2f 97       	sbiw	r28, 0x0f	; 15
    43fc:	0f b6       	in	r0, 0x3f	; 63
    43fe:	f8 94       	cli
    4400:	de bf       	out	0x3e, r29	; 62
    4402:	0f be       	out	0x3f, r0	; 63
    4404:	cd bf       	out	0x3d, r28	; 61
    4406:	8f 87       	std	Y+15, r24	; 0x0f

    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_RS, HIGH);
    4408:	83 e0       	ldi	r24, 0x03	; 3
    440a:	61 e0       	ldi	r22, 0x01	; 1
    440c:	41 e0       	ldi	r20, 0x01	; 1
    440e:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_Rw, LOW);
    4412:	83 e0       	ldi	r24, 0x03	; 3
    4414:	60 e0       	ldi	r22, 0x00	; 0
    4416:	40 e0       	ldi	r20, 0x00	; 0
    4418:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    

    DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Data);
    441c:	80 e0       	ldi	r24, 0x00	; 0
    441e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4420:	0e 94 c7 14 	call	0x298e	; 0x298e <DIO_voidSetPortSpecificValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    4424:	83 e0       	ldi	r24, 0x03	; 3
    4426:	62 e0       	ldi	r22, 0x02	; 2
    4428:	40 e0       	ldi	r20, 0x00	; 0
    442a:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, HIGH);
    442e:	83 e0       	ldi	r24, 0x03	; 3
    4430:	62 e0       	ldi	r22, 0x02	; 2
    4432:	41 e0       	ldi	r20, 0x01	; 1
    4434:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    4438:	80 e0       	ldi	r24, 0x00	; 0
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	a0 e0       	ldi	r26, 0x00	; 0
    443e:	b0 e4       	ldi	r27, 0x40	; 64
    4440:	8b 87       	std	Y+11, r24	; 0x0b
    4442:	9c 87       	std	Y+12, r25	; 0x0c
    4444:	ad 87       	std	Y+13, r26	; 0x0d
    4446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4448:	6b 85       	ldd	r22, Y+11	; 0x0b
    444a:	7c 85       	ldd	r23, Y+12	; 0x0c
    444c:	8d 85       	ldd	r24, Y+13	; 0x0d
    444e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	4a ef       	ldi	r20, 0xFA	; 250
    4456:	54 e4       	ldi	r21, 0x44	; 68
    4458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	8f 83       	std	Y+7, r24	; 0x07
    4462:	98 87       	std	Y+8, r25	; 0x08
    4464:	a9 87       	std	Y+9, r26	; 0x09
    4466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4468:	6f 81       	ldd	r22, Y+7	; 0x07
    446a:	78 85       	ldd	r23, Y+8	; 0x08
    446c:	89 85       	ldd	r24, Y+9	; 0x09
    446e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4470:	20 e0       	ldi	r18, 0x00	; 0
    4472:	30 e0       	ldi	r19, 0x00	; 0
    4474:	40 e8       	ldi	r20, 0x80	; 128
    4476:	5f e3       	ldi	r21, 0x3F	; 63
    4478:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    447c:	88 23       	and	r24, r24
    447e:	2c f4       	brge	.+10     	; 0x448a <LCD_voidSendData+0x98>
		__ticks = 1;
    4480:	81 e0       	ldi	r24, 0x01	; 1
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	9e 83       	std	Y+6, r25	; 0x06
    4486:	8d 83       	std	Y+5, r24	; 0x05
    4488:	3f c0       	rjmp	.+126    	; 0x4508 <LCD_voidSendData+0x116>
	else if (__tmp > 65535)
    448a:	6f 81       	ldd	r22, Y+7	; 0x07
    448c:	78 85       	ldd	r23, Y+8	; 0x08
    448e:	89 85       	ldd	r24, Y+9	; 0x09
    4490:	9a 85       	ldd	r25, Y+10	; 0x0a
    4492:	20 e0       	ldi	r18, 0x00	; 0
    4494:	3f ef       	ldi	r19, 0xFF	; 255
    4496:	4f e7       	ldi	r20, 0x7F	; 127
    4498:	57 e4       	ldi	r21, 0x47	; 71
    449a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    449e:	18 16       	cp	r1, r24
    44a0:	4c f5       	brge	.+82     	; 0x44f4 <LCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    44a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    44a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    44a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	40 e2       	ldi	r20, 0x20	; 32
    44b0:	51 e4       	ldi	r21, 0x41	; 65
    44b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	bc 01       	movw	r22, r24
    44bc:	cd 01       	movw	r24, r26
    44be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	9e 83       	std	Y+6, r25	; 0x06
    44c8:	8d 83       	std	Y+5, r24	; 0x05
    44ca:	0f c0       	rjmp	.+30     	; 0x44ea <LCD_voidSendData+0xf8>
    44cc:	88 ec       	ldi	r24, 0xC8	; 200
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	9c 83       	std	Y+4, r25	; 0x04
    44d2:	8b 83       	std	Y+3, r24	; 0x03
    44d4:	8b 81       	ldd	r24, Y+3	; 0x03
    44d6:	9c 81       	ldd	r25, Y+4	; 0x04
    44d8:	01 97       	sbiw	r24, 0x01	; 1
    44da:	f1 f7       	brne	.-4      	; 0x44d8 <LCD_voidSendData+0xe6>
    44dc:	9c 83       	std	Y+4, r25	; 0x04
    44de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44e0:	8d 81       	ldd	r24, Y+5	; 0x05
    44e2:	9e 81       	ldd	r25, Y+6	; 0x06
    44e4:	01 97       	sbiw	r24, 0x01	; 1
    44e6:	9e 83       	std	Y+6, r25	; 0x06
    44e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ea:	8d 81       	ldd	r24, Y+5	; 0x05
    44ec:	9e 81       	ldd	r25, Y+6	; 0x06
    44ee:	00 97       	sbiw	r24, 0x00	; 0
    44f0:	69 f7       	brne	.-38     	; 0x44cc <LCD_voidSendData+0xda>
    44f2:	14 c0       	rjmp	.+40     	; 0x451c <LCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44f4:	6f 81       	ldd	r22, Y+7	; 0x07
    44f6:	78 85       	ldd	r23, Y+8	; 0x08
    44f8:	89 85       	ldd	r24, Y+9	; 0x09
    44fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    44fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4500:	dc 01       	movw	r26, r24
    4502:	cb 01       	movw	r24, r22
    4504:	9e 83       	std	Y+6, r25	; 0x06
    4506:	8d 83       	std	Y+5, r24	; 0x05
    4508:	8d 81       	ldd	r24, Y+5	; 0x05
    450a:	9e 81       	ldd	r25, Y+6	; 0x06
    450c:	9a 83       	std	Y+2, r25	; 0x02
    450e:	89 83       	std	Y+1, r24	; 0x01
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	9a 81       	ldd	r25, Y+2	; 0x02
    4514:	01 97       	sbiw	r24, 0x01	; 1
    4516:	f1 f7       	brne	.-4      	; 0x4514 <LCD_voidSendData+0x122>
    4518:	9a 83       	std	Y+2, r25	; 0x02
    451a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    451c:	83 e0       	ldi	r24, 0x03	; 3
    451e:	62 e0       	ldi	r22, 0x02	; 2
    4520:	40 e0       	ldi	r20, 0x00	; 0
    4522:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
}
    4526:	2f 96       	adiw	r28, 0x0f	; 15
    4528:	0f b6       	in	r0, 0x3f	; 63
    452a:	f8 94       	cli
    452c:	de bf       	out	0x3e, r29	; 62
    452e:	0f be       	out	0x3f, r0	; 63
    4530:	cd bf       	out	0x3d, r28	; 61
    4532:	cf 91       	pop	r28
    4534:	df 91       	pop	r29
    4536:	08 95       	ret

00004538 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    4538:	df 93       	push	r29
    453a:	cf 93       	push	r28
    453c:	cd b7       	in	r28, 0x3d	; 61
    453e:	de b7       	in	r29, 0x3e	; 62
    4540:	2d 97       	sbiw	r28, 0x0d	; 13
    4542:	0f b6       	in	r0, 0x3f	; 63
    4544:	f8 94       	cli
    4546:	de bf       	out	0x3e, r29	; 62
    4548:	0f be       	out	0x3f, r0	; 63
    454a:	cd bf       	out	0x3d, r28	; 61
    454c:	9d 87       	std	Y+13, r25	; 0x0d
    454e:	8c 87       	std	Y+12, r24	; 0x0c

    u8 Local_u8SpllitedNumber[10];
    s8 Local_s8LoopCounter = 0;
    4550:	19 82       	std	Y+1, r1	; 0x01
    4552:	1f c0       	rjmp	.+62     	; 0x4592 <LCD_voidSendNumber+0x5a>
    while (Copy_u32Number != 0)
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
    4554:	89 81       	ldd	r24, Y+1	; 0x01
    4556:	e8 2f       	mov	r30, r24
    4558:	ff 27       	eor	r31, r31
    455a:	e7 fd       	sbrc	r30, 7
    455c:	f0 95       	com	r31
    455e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4560:	9d 85       	ldd	r25, Y+13	; 0x0d
    4562:	2a e0       	ldi	r18, 0x0A	; 10
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	b9 01       	movw	r22, r18
    4568:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__udivmodhi4>
    456c:	28 2f       	mov	r18, r24
    456e:	ce 01       	movw	r24, r28
    4570:	02 96       	adiw	r24, 0x02	; 2
    4572:	e8 0f       	add	r30, r24
    4574:	f9 1f       	adc	r31, r25
    4576:	20 83       	st	Z, r18
        Copy_u32Number /= 10;
    4578:	8c 85       	ldd	r24, Y+12	; 0x0c
    457a:	9d 85       	ldd	r25, Y+13	; 0x0d
    457c:	2a e0       	ldi	r18, 0x0A	; 10
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	b9 01       	movw	r22, r18
    4582:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__udivmodhi4>
    4586:	cb 01       	movw	r24, r22
    4588:	9d 87       	std	Y+13, r25	; 0x0d
    458a:	8c 87       	std	Y+12, r24	; 0x0c
        Local_s8LoopCounter++;
    458c:	89 81       	ldd	r24, Y+1	; 0x01
    458e:	8f 5f       	subi	r24, 0xFF	; 255
    4590:	89 83       	std	Y+1, r24	; 0x01
void LCD_voidSendNumber(u32 Copy_u32Number)
{

    u8 Local_u8SpllitedNumber[10];
    s8 Local_s8LoopCounter = 0;
    while (Copy_u32Number != 0)
    4592:	8c 85       	ldd	r24, Y+12	; 0x0c
    4594:	9d 85       	ldd	r25, Y+13	; 0x0d
    4596:	00 97       	sbiw	r24, 0x00	; 0
    4598:	e9 f6       	brne	.-70     	; 0x4554 <LCD_voidSendNumber+0x1c>
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    459a:	89 81       	ldd	r24, Y+1	; 0x01
    459c:	81 50       	subi	r24, 0x01	; 1
    459e:	89 83       	std	Y+1, r24	; 0x01
    45a0:	11 c0       	rjmp	.+34     	; 0x45c4 <LCD_voidSendNumber+0x8c>
    while (Local_s8LoopCounter >= 0)
    {
        LCD_voidSendData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	28 2f       	mov	r18, r24
    45a6:	33 27       	eor	r19, r19
    45a8:	27 fd       	sbrc	r18, 7
    45aa:	30 95       	com	r19
    45ac:	ce 01       	movw	r24, r28
    45ae:	02 96       	adiw	r24, 0x02	; 2
    45b0:	fc 01       	movw	r30, r24
    45b2:	e2 0f       	add	r30, r18
    45b4:	f3 1f       	adc	r31, r19
    45b6:	80 81       	ld	r24, Z
    45b8:	80 5d       	subi	r24, 0xD0	; 208
    45ba:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <LCD_voidSendData>
        Local_s8LoopCounter--;
    45be:	89 81       	ldd	r24, Y+1	; 0x01
    45c0:	81 50       	subi	r24, 0x01	; 1
    45c2:	89 83       	std	Y+1, r24	; 0x01
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    while (Local_s8LoopCounter >= 0)
    45c4:	89 81       	ldd	r24, Y+1	; 0x01
    45c6:	88 23       	and	r24, r24
    45c8:	64 f7       	brge	.-40     	; 0x45a2 <LCD_voidSendNumber+0x6a>
    {
        LCD_voidSendData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
        Local_s8LoopCounter--;
    }
    
}
    45ca:	2d 96       	adiw	r28, 0x0d	; 13
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	f8 94       	cli
    45d0:	de bf       	out	0x3e, r29	; 62
    45d2:	0f be       	out	0x3f, r0	; 63
    45d4:	cd bf       	out	0x3d, r28	; 61
    45d6:	cf 91       	pop	r28
    45d8:	df 91       	pop	r29
    45da:	08 95       	ret

000045dc <LCD_voidGotoXY>:

void LCD_voidGotoXY(u8 Copy_u8X, u8 Copy_u8Y)
{
    45dc:	df 93       	push	r29
    45de:	cf 93       	push	r28
    45e0:	00 d0       	rcall	.+0      	; 0x45e2 <LCD_voidGotoXY+0x6>
    45e2:	0f 92       	push	r0
    45e4:	cd b7       	in	r28, 0x3d	; 61
    45e6:	de b7       	in	r29, 0x3e	; 62
    45e8:	8a 83       	std	Y+2, r24	; 0x02
    45ea:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Address = 0;
    45ec:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8X == 0)
    45ee:	8a 81       	ldd	r24, Y+2	; 0x02
    45f0:	88 23       	and	r24, r24
    45f2:	19 f4       	brne	.+6      	; 0x45fa <LCD_voidGotoXY+0x1e>
    {
        Local_u8Address = Copy_u8Y;
    45f4:	8b 81       	ldd	r24, Y+3	; 0x03
    45f6:	89 83       	std	Y+1, r24	; 0x01
    45f8:	06 c0       	rjmp	.+12     	; 0x4606 <LCD_voidGotoXY+0x2a>
    }
    else if(Copy_u8X == 1)
    45fa:	8a 81       	ldd	r24, Y+2	; 0x02
    45fc:	81 30       	cpi	r24, 0x01	; 1
    45fe:	19 f4       	brne	.+6      	; 0x4606 <LCD_voidGotoXY+0x2a>
    {
        Local_u8Address = Copy_u8Y + 0x40;
    4600:	8b 81       	ldd	r24, Y+3	; 0x03
    4602:	80 5c       	subi	r24, 0xC0	; 192
    4604:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {

    }
    SET_BIT(Local_u8Address, 7);
    4606:	89 81       	ldd	r24, Y+1	; 0x01
    4608:	80 68       	ori	r24, 0x80	; 128
    460a:	89 83       	std	Y+1, r24	; 0x01
    voidSendCommand(Local_u8Address);
    460c:	89 81       	ldd	r24, Y+1	; 0x01
    460e:	0e 94 56 21 	call	0x42ac	; 0x42ac <voidSendCommand>
}
    4612:	0f 90       	pop	r0
    4614:	0f 90       	pop	r0
    4616:	0f 90       	pop	r0
    4618:	cf 91       	pop	r28
    461a:	df 91       	pop	r29
    461c:	08 95       	ret

0000461e <LCD_voidSendSrting>:

void LCD_voidSendSrting(const u8 * Ref_pu8String)
{
    461e:	df 93       	push	r29
    4620:	cf 93       	push	r28
    4622:	00 d0       	rcall	.+0      	; 0x4624 <LCD_voidSendSrting+0x6>
    4624:	0f 92       	push	r0
    4626:	cd b7       	in	r28, 0x3d	; 61
    4628:	de b7       	in	r29, 0x3e	; 62
    462a:	9b 83       	std	Y+3, r25	; 0x03
    462c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
    462e:	19 82       	std	Y+1, r1	; 0x01
    4630:	0e c0       	rjmp	.+28     	; 0x464e <LCD_voidSendSrting+0x30>
	while(Ref_pu8String[Local_u8LoopCounter] != NULL_TERMINATOR)
    {
		LCD_voidSendData(Ref_pu8String[Local_u8LoopCounter]);
    4632:	89 81       	ldd	r24, Y+1	; 0x01
    4634:	28 2f       	mov	r18, r24
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	8a 81       	ldd	r24, Y+2	; 0x02
    463a:	9b 81       	ldd	r25, Y+3	; 0x03
    463c:	fc 01       	movw	r30, r24
    463e:	e2 0f       	add	r30, r18
    4640:	f3 1f       	adc	r31, r19
    4642:	80 81       	ld	r24, Z
    4644:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <LCD_voidSendData>
		Local_u8LoopCounter++;
    4648:	89 81       	ldd	r24, Y+1	; 0x01
    464a:	8f 5f       	subi	r24, 0xFF	; 255
    464c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendSrting(const u8 * Ref_pu8String)
{
	u8 Local_u8LoopCounter = 0;
	while(Ref_pu8String[Local_u8LoopCounter] != NULL_TERMINATOR)
    464e:	89 81       	ldd	r24, Y+1	; 0x01
    4650:	28 2f       	mov	r18, r24
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	8a 81       	ldd	r24, Y+2	; 0x02
    4656:	9b 81       	ldd	r25, Y+3	; 0x03
    4658:	fc 01       	movw	r30, r24
    465a:	e2 0f       	add	r30, r18
    465c:	f3 1f       	adc	r31, r19
    465e:	80 81       	ld	r24, Z
    4660:	88 23       	and	r24, r24
    4662:	39 f7       	brne	.-50     	; 0x4632 <LCD_voidSendSrting+0x14>
    {
		LCD_voidSendData(Ref_pu8String[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
    4664:	0f 90       	pop	r0
    4666:	0f 90       	pop	r0
    4668:	0f 90       	pop	r0
    466a:	cf 91       	pop	r28
    466c:	df 91       	pop	r29
    466e:	08 95       	ret

00004670 <LCD_voidSendCustomCharacter>:

void LCD_voidSendCustomCharacter(u8 * Ref_pu8CharacterArray, u8 Copy_u8PatternNumber, u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
    4670:	df 93       	push	r29
    4672:	cf 93       	push	r28
    4674:	cd b7       	in	r28, 0x3d	; 61
    4676:	de b7       	in	r29, 0x3e	; 62
    4678:	27 97       	sbiw	r28, 0x07	; 7
    467a:	0f b6       	in	r0, 0x3f	; 63
    467c:	f8 94       	cli
    467e:	de bf       	out	0x3e, r29	; 62
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	9c 83       	std	Y+4, r25	; 0x04
    4686:	8b 83       	std	Y+3, r24	; 0x03
    4688:	6d 83       	std	Y+5, r22	; 0x05
    468a:	4e 83       	std	Y+6, r20	; 0x06
    468c:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8LoopCounter = 0;
    468e:	1a 82       	std	Y+2, r1	; 0x02
    /*CALCULATE THE CGRAM ADDRESS OF THE PATTERN = PatternNumber * 8 (The Frist Location)*/
    u8 Local_u8CGRAMAddress = Copy_u8PatternNumber * 8; 
    4690:	8d 81       	ldd	r24, Y+5	; 0x05
    4692:	88 2f       	mov	r24, r24
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	88 0f       	add	r24, r24
    4698:	99 1f       	adc	r25, r25
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	88 0f       	add	r24, r24
    46a0:	99 1f       	adc	r25, r25
    46a2:	89 83       	std	Y+1, r24	; 0x01
    /*SET THE 6th OF THE SET CGRAM ADDRESS*/
    SET_BIT(Local_u8CGRAMAddress, 6);
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
    46a6:	80 64       	ori	r24, 0x40	; 64
    46a8:	89 83       	std	Y+1, r24	; 0x01
    /*SEND THE CGRAM ADDRESS COMMAND TO LCD*/
    voidSendCommand(Local_u8CGRAMAddress);
    46aa:	89 81       	ldd	r24, Y+1	; 0x01
    46ac:	0e 94 56 21 	call	0x42ac	; 0x42ac <voidSendCommand>
    /*LOOP ON THE ARRAY AND SEND EASH ELEMENT TO THE LCD TO BE STORED*/
    for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    46b0:	1a 82       	std	Y+2, r1	; 0x02
    46b2:	0e c0       	rjmp	.+28     	; 0x46d0 <LCD_voidSendCustomCharacter+0x60>
    {
        LCD_voidSendData(Ref_pu8CharacterArray[Local_u8LoopCounter]);
    46b4:	8a 81       	ldd	r24, Y+2	; 0x02
    46b6:	28 2f       	mov	r18, r24
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	8b 81       	ldd	r24, Y+3	; 0x03
    46bc:	9c 81       	ldd	r25, Y+4	; 0x04
    46be:	fc 01       	movw	r30, r24
    46c0:	e2 0f       	add	r30, r18
    46c2:	f3 1f       	adc	r31, r19
    46c4:	80 81       	ld	r24, Z
    46c6:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <LCD_voidSendData>
    /*SET THE 6th OF THE SET CGRAM ADDRESS*/
    SET_BIT(Local_u8CGRAMAddress, 6);
    /*SEND THE CGRAM ADDRESS COMMAND TO LCD*/
    voidSendCommand(Local_u8CGRAMAddress);
    /*LOOP ON THE ARRAY AND SEND EASH ELEMENT TO THE LCD TO BE STORED*/
    for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    46ca:	8a 81       	ldd	r24, Y+2	; 0x02
    46cc:	8f 5f       	subi	r24, 0xFF	; 255
    46ce:	8a 83       	std	Y+2, r24	; 0x02
    46d0:	8a 81       	ldd	r24, Y+2	; 0x02
    46d2:	88 30       	cpi	r24, 0x08	; 8
    46d4:	78 f3       	brcs	.-34     	; 0x46b4 <LCD_voidSendCustomCharacter+0x44>
    {
        LCD_voidSendData(Ref_pu8CharacterArray[Local_u8LoopCounter]);
    }
    /*Send Command To DDRAM To Store The Data*/
    LCD_voidGotoXY(Copy_u8XPosition, Copy_u8YPosition);
    46d6:	8e 81       	ldd	r24, Y+6	; 0x06
    46d8:	6f 81       	ldd	r22, Y+7	; 0x07
    46da:	0e 94 ee 22 	call	0x45dc	; 0x45dc <LCD_voidGotoXY>
    /*Send The Pattern Number To Display*/
    LCD_voidSendData(Copy_u8PatternNumber);
    46de:	8d 81       	ldd	r24, Y+5	; 0x05
    46e0:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <LCD_voidSendData>
}
    46e4:	27 96       	adiw	r28, 0x07	; 7
    46e6:	0f b6       	in	r0, 0x3f	; 63
    46e8:	f8 94       	cli
    46ea:	de bf       	out	0x3e, r29	; 62
    46ec:	0f be       	out	0x3f, r0	; 63
    46ee:	cd bf       	out	0x3d, r28	; 61
    46f0:	cf 91       	pop	r28
    46f2:	df 91       	pop	r29
    46f4:	08 95       	ret

000046f6 <LCD_voidInit>:
void LCD_voidInit(void)
{
    46f6:	df 93       	push	r29
    46f8:	cf 93       	push	r28
    46fa:	cd b7       	in	r28, 0x3d	; 61
    46fc:	de b7       	in	r29, 0x3e	; 62
    46fe:	2e 97       	sbiw	r28, 0x0e	; 14
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	f8 94       	cli
    4704:	de bf       	out	0x3e, r29	; 62
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	cd bf       	out	0x3d, r28	; 61
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	a0 e2       	ldi	r26, 0x20	; 32
    4710:	b2 e4       	ldi	r27, 0x42	; 66
    4712:	8b 87       	std	Y+11, r24	; 0x0b
    4714:	9c 87       	std	Y+12, r25	; 0x0c
    4716:	ad 87       	std	Y+13, r26	; 0x0d
    4718:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    471a:	6b 85       	ldd	r22, Y+11	; 0x0b
    471c:	7c 85       	ldd	r23, Y+12	; 0x0c
    471e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4720:	9e 85       	ldd	r25, Y+14	; 0x0e
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	4a ef       	ldi	r20, 0xFA	; 250
    4728:	54 e4       	ldi	r21, 0x44	; 68
    472a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    472e:	dc 01       	movw	r26, r24
    4730:	cb 01       	movw	r24, r22
    4732:	8f 83       	std	Y+7, r24	; 0x07
    4734:	98 87       	std	Y+8, r25	; 0x08
    4736:	a9 87       	std	Y+9, r26	; 0x09
    4738:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    473a:	6f 81       	ldd	r22, Y+7	; 0x07
    473c:	78 85       	ldd	r23, Y+8	; 0x08
    473e:	89 85       	ldd	r24, Y+9	; 0x09
    4740:	9a 85       	ldd	r25, Y+10	; 0x0a
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	40 e8       	ldi	r20, 0x80	; 128
    4748:	5f e3       	ldi	r21, 0x3F	; 63
    474a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    474e:	88 23       	and	r24, r24
    4750:	2c f4       	brge	.+10     	; 0x475c <LCD_voidInit+0x66>
		__ticks = 1;
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	9e 83       	std	Y+6, r25	; 0x06
    4758:	8d 83       	std	Y+5, r24	; 0x05
    475a:	3f c0       	rjmp	.+126    	; 0x47da <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    475c:	6f 81       	ldd	r22, Y+7	; 0x07
    475e:	78 85       	ldd	r23, Y+8	; 0x08
    4760:	89 85       	ldd	r24, Y+9	; 0x09
    4762:	9a 85       	ldd	r25, Y+10	; 0x0a
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	3f ef       	ldi	r19, 0xFF	; 255
    4768:	4f e7       	ldi	r20, 0x7F	; 127
    476a:	57 e4       	ldi	r21, 0x47	; 71
    476c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4770:	18 16       	cp	r1, r24
    4772:	4c f5       	brge	.+82     	; 0x47c6 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4774:	6b 85       	ldd	r22, Y+11	; 0x0b
    4776:	7c 85       	ldd	r23, Y+12	; 0x0c
    4778:	8d 85       	ldd	r24, Y+13	; 0x0d
    477a:	9e 85       	ldd	r25, Y+14	; 0x0e
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	40 e2       	ldi	r20, 0x20	; 32
    4782:	51 e4       	ldi	r21, 0x41	; 65
    4784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4788:	dc 01       	movw	r26, r24
    478a:	cb 01       	movw	r24, r22
    478c:	bc 01       	movw	r22, r24
    478e:	cd 01       	movw	r24, r26
    4790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4794:	dc 01       	movw	r26, r24
    4796:	cb 01       	movw	r24, r22
    4798:	9e 83       	std	Y+6, r25	; 0x06
    479a:	8d 83       	std	Y+5, r24	; 0x05
    479c:	0f c0       	rjmp	.+30     	; 0x47bc <LCD_voidInit+0xc6>
    479e:	88 ec       	ldi	r24, 0xC8	; 200
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	9c 83       	std	Y+4, r25	; 0x04
    47a4:	8b 83       	std	Y+3, r24	; 0x03
    47a6:	8b 81       	ldd	r24, Y+3	; 0x03
    47a8:	9c 81       	ldd	r25, Y+4	; 0x04
    47aa:	01 97       	sbiw	r24, 0x01	; 1
    47ac:	f1 f7       	brne	.-4      	; 0x47aa <LCD_voidInit+0xb4>
    47ae:	9c 83       	std	Y+4, r25	; 0x04
    47b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b2:	8d 81       	ldd	r24, Y+5	; 0x05
    47b4:	9e 81       	ldd	r25, Y+6	; 0x06
    47b6:	01 97       	sbiw	r24, 0x01	; 1
    47b8:	9e 83       	std	Y+6, r25	; 0x06
    47ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47bc:	8d 81       	ldd	r24, Y+5	; 0x05
    47be:	9e 81       	ldd	r25, Y+6	; 0x06
    47c0:	00 97       	sbiw	r24, 0x00	; 0
    47c2:	69 f7       	brne	.-38     	; 0x479e <LCD_voidInit+0xa8>
    47c4:	14 c0       	rjmp	.+40     	; 0x47ee <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47c6:	6f 81       	ldd	r22, Y+7	; 0x07
    47c8:	78 85       	ldd	r23, Y+8	; 0x08
    47ca:	89 85       	ldd	r24, Y+9	; 0x09
    47cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d2:	dc 01       	movw	r26, r24
    47d4:	cb 01       	movw	r24, r22
    47d6:	9e 83       	std	Y+6, r25	; 0x06
    47d8:	8d 83       	std	Y+5, r24	; 0x05
    47da:	8d 81       	ldd	r24, Y+5	; 0x05
    47dc:	9e 81       	ldd	r25, Y+6	; 0x06
    47de:	9a 83       	std	Y+2, r25	; 0x02
    47e0:	89 83       	std	Y+1, r24	; 0x01
    47e2:	89 81       	ldd	r24, Y+1	; 0x01
    47e4:	9a 81       	ldd	r25, Y+2	; 0x02
    47e6:	01 97       	sbiw	r24, 0x01	; 1
    47e8:	f1 f7       	brne	.-4      	; 0x47e6 <LCD_voidInit+0xf0>
    47ea:	9a 83       	std	Y+2, r25	; 0x02
    47ec:	89 83       	std	Y+1, r24	; 0x01
    
    _delay_ms(40);
    /*FUNCTION SET COMMAND*/
    voidSendCommand(LCD_FUNCTION_SET_CMD);
    47ee:	88 e3       	ldi	r24, 0x38	; 56
    47f0:	0e 94 56 21 	call	0x42ac	; 0x42ac <voidSendCommand>
    /*DISPLAY ON/OFF CONTROL*/
    voidSendCommand(LCD_ON_OFF_CONTROL);
    47f4:	8f e0       	ldi	r24, 0x0F	; 15
    47f6:	0e 94 56 21 	call	0x42ac	; 0x42ac <voidSendCommand>
    /*DISPLAY CLEAR*/
    voidSendCommand(LCD_DISPLAY_CLEAR);
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	0e 94 56 21 	call	0x42ac	; 0x42ac <voidSendCommand>

}
    4800:	2e 96       	adiw	r28, 0x0e	; 14
    4802:	0f b6       	in	r0, 0x3f	; 63
    4804:	f8 94       	cli
    4806:	de bf       	out	0x3e, r29	; 62
    4808:	0f be       	out	0x3f, r0	; 63
    480a:	cd bf       	out	0x3d, r28	; 61
    480c:	cf 91       	pop	r28
    480e:	df 91       	pop	r29
    4810:	08 95       	ret

00004812 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
    4812:	df 93       	push	r29
    4814:	cf 93       	push	r28
    4816:	cd b7       	in	r28, 0x3d	; 61
    4818:	de b7       	in	r29, 0x3e	; 62
    voidSendCommand(LCD_DISPLAY_CLEAR);
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	0e 94 56 21 	call	0x42ac	; 0x42ac <voidSendCommand>
}
    4820:	cf 91       	pop	r28
    4822:	df 91       	pop	r29
    4824:	08 95       	ret

00004826 <LCD_voidInitPins>:

void LCD_voidInitPins (void)
{
    4826:	df 93       	push	r29
    4828:	cf 93       	push	r28
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62

    /*Set Data Port To Be OutPut*/
    DIO_voidSetPortDirection(LCD_DATA_PORT, OUTPUT);
    482e:	80 e0       	ldi	r24, 0x00	; 0
    4830:	61 e0       	ldi	r22, 0x01	; 1
    4832:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_voidSetPortDirection>
    /*Set Contol pin To Be OutPut*/
    DIO_voidSetPortSpecificDirection(LCD_CONTROL_PORT, LCD_SET_CONTROL_PINS);
    4836:	83 e0       	ldi	r24, 0x03	; 3
    4838:	67 e0       	ldi	r22, 0x07	; 7
    483a:	0e 94 83 14 	call	0x2906	; 0x2906 <DIO_voidSetPortSpecificDirection>
}
    483e:	cf 91       	pop	r28
    4840:	df 91       	pop	r29
    4842:	08 95       	ret

00004844 <KPD_voidInit>:
};



void KPD_voidInit(void)
{
    4844:	df 93       	push	r29
    4846:	cf 93       	push	r28
    4848:	0f 92       	push	r0
    484a:	cd b7       	in	r28, 0x3d	; 61
    484c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8LoopCounter = 0;
    484e:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < KPD_NUM_OF_COLS; Local_u8LoopCounter++)
    4850:	19 82       	std	Y+1, r1	; 0x01
    4852:	33 c0       	rjmp	.+102    	; 0x48ba <KPD_voidInit+0x76>
	{
		/*Set Rows Pin To Be Input*/
		DIO_voidSetPinDirection(KPD_ROWS_PORT, u8RowsArray[Local_u8LoopCounter], INPUT);
    4854:	89 81       	ldd	r24, Y+1	; 0x01
    4856:	88 2f       	mov	r24, r24
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	fc 01       	movw	r30, r24
    485c:	e3 53       	subi	r30, 0x33	; 51
    485e:	fe 4f       	sbci	r31, 0xFE	; 254
    4860:	90 81       	ld	r25, Z
    4862:	82 e0       	ldi	r24, 0x02	; 2
    4864:	69 2f       	mov	r22, r25
    4866:	40 e0       	ldi	r20, 0x00	; 0
    4868:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
		/*Set Rows Pin To Be Pullup*/
		DIO_voidSetPinPullUp(KPD_ROWS_PORT, u8RowsArray[Local_u8LoopCounter], PULLUP);
    486c:	89 81       	ldd	r24, Y+1	; 0x01
    486e:	88 2f       	mov	r24, r24
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	fc 01       	movw	r30, r24
    4874:	e3 53       	subi	r30, 0x33	; 51
    4876:	fe 4f       	sbci	r31, 0xFE	; 254
    4878:	90 81       	ld	r25, Z
    487a:	82 e0       	ldi	r24, 0x02	; 2
    487c:	69 2f       	mov	r22, r25
    487e:	41 e0       	ldi	r20, 0x01	; 1
    4880:	0e 94 93 12 	call	0x2526	; 0x2526 <DIO_voidSetPinPullUp>
		/*Set Cols Pin To Be Output*/
		DIO_voidSetPinDirection(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], OUTPUT);
    4884:	89 81       	ldd	r24, Y+1	; 0x01
    4886:	88 2f       	mov	r24, r24
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	fc 01       	movw	r30, r24
    488c:	ef 52       	subi	r30, 0x2F	; 47
    488e:	fe 4f       	sbci	r31, 0xFE	; 254
    4890:	90 81       	ld	r25, Z
    4892:	82 e0       	ldi	r24, 0x02	; 2
    4894:	69 2f       	mov	r22, r25
    4896:	41 e0       	ldi	r20, 0x01	; 1
    4898:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
		/*Set Cols Pin To Be High*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], HIGH);
    489c:	89 81       	ldd	r24, Y+1	; 0x01
    489e:	88 2f       	mov	r24, r24
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	fc 01       	movw	r30, r24
    48a4:	ef 52       	subi	r30, 0x2F	; 47
    48a6:	fe 4f       	sbci	r31, 0xFE	; 254
    48a8:	90 81       	ld	r25, Z
    48aa:	82 e0       	ldi	r24, 0x02	; 2
    48ac:	69 2f       	mov	r22, r25
    48ae:	41 e0       	ldi	r20, 0x01	; 1
    48b0:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>


void KPD_voidInit(void)
{
	u8 Local_u8LoopCounter = 0;
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < KPD_NUM_OF_COLS; Local_u8LoopCounter++)
    48b4:	89 81       	ldd	r24, Y+1	; 0x01
    48b6:	8f 5f       	subi	r24, 0xFF	; 255
    48b8:	89 83       	std	Y+1, r24	; 0x01
    48ba:	89 81       	ldd	r24, Y+1	; 0x01
    48bc:	84 30       	cpi	r24, 0x04	; 4
    48be:	50 f2       	brcs	.-108    	; 0x4854 <KPD_voidInit+0x10>
		DIO_voidSetPinDirection(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], OUTPUT);
		/*Set Cols Pin To Be High*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], HIGH);

	}
}
    48c0:	0f 90       	pop	r0
    48c2:	cf 91       	pop	r28
    48c4:	df 91       	pop	r29
    48c6:	08 95       	ret

000048c8 <KPD_u8GetPressKey>:




u8 KPD_u8GetPressKey(void)
{
    48c8:	df 93       	push	r29
    48ca:	cf 93       	push	r28
    48cc:	00 d0       	rcall	.+0      	; 0x48ce <KPD_u8GetPressKey+0x6>
    48ce:	00 d0       	rcall	.+0      	; 0x48d0 <KPD_u8GetPressKey+0x8>
    48d0:	0f 92       	push	r0
    48d2:	cd b7       	in	r28, 0x3d	; 61
    48d4:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8ButtonsArray[KPD_NUM_OF_ROWS][KPD_NUM_OF_COLS] = KPD_VAL;
	u8 Local_u8RowsIndex;
	u8 Local_u8ColsIndex;
	u8 Local_u8RowValue;
	u8 Local_u8Pressedkey = KPD_DEFAULT_VAL;
    48d6:	8f ef       	ldi	r24, 0xFF	; 255
    48d8:	89 83       	std	Y+1, r24	; 0x01
	voidDeactivateColumns();
    48da:	0e 94 d7 24 	call	0x49ae	; 0x49ae <voidDeactivateColumns>
	for(Local_u8ColsIndex = 0; Local_u8ColsIndex < KPD_NUM_OF_COLS; Local_u8ColsIndex++)
    48de:	1b 82       	std	Y+3, r1	; 0x03
    48e0:	57 c0       	rjmp	.+174    	; 0x4990 <KPD_u8GetPressKey+0xc8>
	{
		/*Activate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], LOW);
    48e2:	8b 81       	ldd	r24, Y+3	; 0x03
    48e4:	88 2f       	mov	r24, r24
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	fc 01       	movw	r30, r24
    48ea:	ef 52       	subi	r30, 0x2F	; 47
    48ec:	fe 4f       	sbci	r31, 0xFE	; 254
    48ee:	90 81       	ld	r25, Z
    48f0:	82 e0       	ldi	r24, 0x02	; 2
    48f2:	69 2f       	mov	r22, r25
    48f4:	40 e0       	ldi	r20, 0x00	; 0
    48f6:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
		/*Read Row Value*/
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < KPD_NUM_OF_ROWS; Local_u8RowsIndex++)
    48fa:	1c 82       	std	Y+4, r1	; 0x04
    48fc:	37 c0       	rjmp	.+110    	; 0x496c <KPD_u8GetPressKey+0xa4>
		{
			Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, u8RowsArray[Local_u8RowsIndex]);
    48fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4900:	88 2f       	mov	r24, r24
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	fc 01       	movw	r30, r24
    4906:	e3 53       	subi	r30, 0x33	; 51
    4908:	fe 4f       	sbci	r31, 0xFE	; 254
    490a:	90 81       	ld	r25, Z
    490c:	82 e0       	ldi	r24, 0x02	; 2
    490e:	69 2f       	mov	r22, r25
    4910:	0e 94 01 14 	call	0x2802	; 0x2802 <DIO_u8GetPinValue>
    4914:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_u8RowValue == 0)
    4916:	8a 81       	ldd	r24, Y+2	; 0x02
    4918:	88 23       	and	r24, r24
    491a:	29 f5       	brne	.+74     	; 0x4966 <KPD_u8GetPressKey+0x9e>
			{
				/*Get The Press Key*/
				Local_u8Pressedkey = Local_u8ButtonsArray[Local_u8RowsIndex][Local_u8ColsIndex];
    491c:	8c 81       	ldd	r24, Y+4	; 0x04
    491e:	48 2f       	mov	r20, r24
    4920:	50 e0       	ldi	r21, 0x00	; 0
    4922:	8b 81       	ldd	r24, Y+3	; 0x03
    4924:	28 2f       	mov	r18, r24
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	ca 01       	movw	r24, r20
    492a:	88 0f       	add	r24, r24
    492c:	99 1f       	adc	r25, r25
    492e:	88 0f       	add	r24, r24
    4930:	99 1f       	adc	r25, r25
    4932:	82 0f       	add	r24, r18
    4934:	93 1f       	adc	r25, r19
    4936:	fc 01       	movw	r30, r24
    4938:	eb 52       	subi	r30, 0x2B	; 43
    493a:	fe 4f       	sbci	r31, 0xFE	; 254
    493c:	80 81       	ld	r24, Z
    493e:	89 83       	std	Y+1, r24	; 0x01
    4940:	0c c0       	rjmp	.+24     	; 0x495a <KPD_u8GetPressKey+0x92>
				/*Polling Until The Kay Is Released*/
				while (Local_u8RowValue == 0)
				{
					Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, u8RowsArray[Local_u8RowsIndex]);
    4942:	8c 81       	ldd	r24, Y+4	; 0x04
    4944:	88 2f       	mov	r24, r24
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	fc 01       	movw	r30, r24
    494a:	e3 53       	subi	r30, 0x33	; 51
    494c:	fe 4f       	sbci	r31, 0xFE	; 254
    494e:	90 81       	ld	r25, Z
    4950:	82 e0       	ldi	r24, 0x02	; 2
    4952:	69 2f       	mov	r22, r25
    4954:	0e 94 01 14 	call	0x2802	; 0x2802 <DIO_u8GetPinValue>
    4958:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_u8RowValue == 0)
			{
				/*Get The Press Key*/
				Local_u8Pressedkey = Local_u8ButtonsArray[Local_u8RowsIndex][Local_u8ColsIndex];
				/*Polling Until The Kay Is Released*/
				while (Local_u8RowValue == 0)
    495a:	8a 81       	ldd	r24, Y+2	; 0x02
    495c:	88 23       	and	r24, r24
    495e:	89 f3       	breq	.-30     	; 0x4942 <KPD_u8GetPressKey+0x7a>
				{
					Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, u8RowsArray[Local_u8RowsIndex]);
				}

				/*Return The Key*/
				return (Local_u8Pressedkey);
    4960:	89 81       	ldd	r24, Y+1	; 0x01
    4962:	8d 83       	std	Y+5, r24	; 0x05
    4964:	1b c0       	rjmp	.+54     	; 0x499c <KPD_u8GetPressKey+0xd4>
	for(Local_u8ColsIndex = 0; Local_u8ColsIndex < KPD_NUM_OF_COLS; Local_u8ColsIndex++)
	{
		/*Activate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], LOW);
		/*Read Row Value*/
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < KPD_NUM_OF_ROWS; Local_u8RowsIndex++)
    4966:	8c 81       	ldd	r24, Y+4	; 0x04
    4968:	8f 5f       	subi	r24, 0xFF	; 255
    496a:	8c 83       	std	Y+4, r24	; 0x04
    496c:	8c 81       	ldd	r24, Y+4	; 0x04
    496e:	84 30       	cpi	r24, 0x04	; 4
    4970:	30 f2       	brcs	.-116    	; 0x48fe <KPD_u8GetPressKey+0x36>
			}


		}
		/*DeActivate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], HIGH);
    4972:	8b 81       	ldd	r24, Y+3	; 0x03
    4974:	88 2f       	mov	r24, r24
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	fc 01       	movw	r30, r24
    497a:	ef 52       	subi	r30, 0x2F	; 47
    497c:	fe 4f       	sbci	r31, 0xFE	; 254
    497e:	90 81       	ld	r25, Z
    4980:	82 e0       	ldi	r24, 0x02	; 2
    4982:	69 2f       	mov	r22, r25
    4984:	41 e0       	ldi	r20, 0x01	; 1
    4986:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
	u8 Local_u8RowsIndex;
	u8 Local_u8ColsIndex;
	u8 Local_u8RowValue;
	u8 Local_u8Pressedkey = KPD_DEFAULT_VAL;
	voidDeactivateColumns();
	for(Local_u8ColsIndex = 0; Local_u8ColsIndex < KPD_NUM_OF_COLS; Local_u8ColsIndex++)
    498a:	8b 81       	ldd	r24, Y+3	; 0x03
    498c:	8f 5f       	subi	r24, 0xFF	; 255
    498e:	8b 83       	std	Y+3, r24	; 0x03
    4990:	8b 81       	ldd	r24, Y+3	; 0x03
    4992:	84 30       	cpi	r24, 0x04	; 4
    4994:	08 f4       	brcc	.+2      	; 0x4998 <KPD_u8GetPressKey+0xd0>
    4996:	a5 cf       	rjmp	.-182    	; 0x48e2 <KPD_u8GetPressKey+0x1a>
		}
		/*DeActivate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], HIGH);
	}
	/*Return The Default Pressed Key*/
	return (Local_u8Pressedkey);
    4998:	89 81       	ldd	r24, Y+1	; 0x01
    499a:	8d 83       	std	Y+5, r24	; 0x05
    499c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    499e:	0f 90       	pop	r0
    49a0:	0f 90       	pop	r0
    49a2:	0f 90       	pop	r0
    49a4:	0f 90       	pop	r0
    49a6:	0f 90       	pop	r0
    49a8:	cf 91       	pop	r28
    49aa:	df 91       	pop	r29
    49ac:	08 95       	ret

000049ae <voidDeactivateColumns>:

static void voidDeactivateColumns(void)
{
    49ae:	df 93       	push	r29
    49b0:	cf 93       	push	r28
    49b2:	0f 92       	push	r0
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ColumnsCounter = 0;
    49b8:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter < KPD_NUM_OF_COLS; Local_u8ColumnsCounter++)
    49ba:	19 82       	std	Y+1, r1	; 0x01
    49bc:	0f c0       	rjmp	.+30     	; 0x49dc <voidDeactivateColumns+0x2e>
	{
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColumnsCounter], HIGH);
    49be:	89 81       	ldd	r24, Y+1	; 0x01
    49c0:	88 2f       	mov	r24, r24
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	fc 01       	movw	r30, r24
    49c6:	ef 52       	subi	r30, 0x2F	; 47
    49c8:	fe 4f       	sbci	r31, 0xFE	; 254
    49ca:	90 81       	ld	r25, Z
    49cc:	82 e0       	ldi	r24, 0x02	; 2
    49ce:	69 2f       	mov	r22, r25
    49d0:	41 e0       	ldi	r20, 0x01	; 1
    49d2:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
}

static void voidDeactivateColumns(void)
{
	u8 Local_u8ColumnsCounter = 0;
	for(Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter < KPD_NUM_OF_COLS; Local_u8ColumnsCounter++)
    49d6:	89 81       	ldd	r24, Y+1	; 0x01
    49d8:	8f 5f       	subi	r24, 0xFF	; 255
    49da:	89 83       	std	Y+1, r24	; 0x01
    49dc:	89 81       	ldd	r24, Y+1	; 0x01
    49de:	84 30       	cpi	r24, 0x04	; 4
    49e0:	70 f3       	brcs	.-36     	; 0x49be <voidDeactivateColumns+0x10>
	{
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColumnsCounter], HIGH);
	}
}
    49e2:	0f 90       	pop	r0
    49e4:	cf 91       	pop	r28
    49e6:	df 91       	pop	r29
    49e8:	08 95       	ret

000049ea <EEPROM_voidSendDataByte>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    49ea:	df 93       	push	r29
    49ec:	cf 93       	push	r28
    49ee:	cd b7       	in	r28, 0x3d	; 61
    49f0:	de b7       	in	r29, 0x3e	; 62
    49f2:	62 97       	sbiw	r28, 0x12	; 18
    49f4:	0f b6       	in	r0, 0x3f	; 63
    49f6:	f8 94       	cli
    49f8:	de bf       	out	0x3e, r29	; 62
    49fa:	0f be       	out	0x3f, r0	; 63
    49fc:	cd bf       	out	0x3d, r28	; 61
    49fe:	99 8b       	std	Y+17, r25	; 0x11
    4a00:	88 8b       	std	Y+16, r24	; 0x10
    4a02:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    4a04:	88 89       	ldd	r24, Y+16	; 0x10
    4a06:	99 89       	ldd	r25, Y+17	; 0x11
    4a08:	89 2f       	mov	r24, r25
    4a0a:	99 27       	eor	r25, r25
    4a0c:	80 65       	ori	r24, 0x50	; 80
    4a0e:	8f 87       	std	Y+15, r24	; 0x0f
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    4a10:	0e 94 36 08 	call	0x106c	; 0x106c <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    4a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a16:	0e 94 8a 08 	call	0x1114	; 0x1114 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    4a1a:	88 89       	ldd	r24, Y+16	; 0x10
    4a1c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send the data byte to the memory location*/
	TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    4a20:	8a 89       	ldd	r24, Y+18	; 0x12
    4a22:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send stop condition*/
	TWI_voidSendStopCondition();
    4a26:	0e 94 9b 09 	call	0x1336	; 0x1336 <TWI_voidSendStopCondition>
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	a0 e2       	ldi	r26, 0x20	; 32
    4a30:	b1 e4       	ldi	r27, 0x41	; 65
    4a32:	8b 87       	std	Y+11, r24	; 0x0b
    4a34:	9c 87       	std	Y+12, r25	; 0x0c
    4a36:	ad 87       	std	Y+13, r26	; 0x0d
    4a38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	4a ef       	ldi	r20, 0xFA	; 250
    4a48:	54 e4       	ldi	r21, 0x44	; 68
    4a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a4e:	dc 01       	movw	r26, r24
    4a50:	cb 01       	movw	r24, r22
    4a52:	8f 83       	std	Y+7, r24	; 0x07
    4a54:	98 87       	std	Y+8, r25	; 0x08
    4a56:	a9 87       	std	Y+9, r26	; 0x09
    4a58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a5c:	78 85       	ldd	r23, Y+8	; 0x08
    4a5e:	89 85       	ldd	r24, Y+9	; 0x09
    4a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	40 e8       	ldi	r20, 0x80	; 128
    4a68:	5f e3       	ldi	r21, 0x3F	; 63
    4a6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a6e:	88 23       	and	r24, r24
    4a70:	2c f4       	brge	.+10     	; 0x4a7c <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    4a72:	81 e0       	ldi	r24, 0x01	; 1
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	9e 83       	std	Y+6, r25	; 0x06
    4a78:	8d 83       	std	Y+5, r24	; 0x05
    4a7a:	3f c0       	rjmp	.+126    	; 0x4afa <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    4a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a7e:	78 85       	ldd	r23, Y+8	; 0x08
    4a80:	89 85       	ldd	r24, Y+9	; 0x09
    4a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a84:	20 e0       	ldi	r18, 0x00	; 0
    4a86:	3f ef       	ldi	r19, 0xFF	; 255
    4a88:	4f e7       	ldi	r20, 0x7F	; 127
    4a8a:	57 e4       	ldi	r21, 0x47	; 71
    4a8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a90:	18 16       	cp	r1, r24
    4a92:	4c f5       	brge	.+82     	; 0x4ae6 <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a94:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a96:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a9c:	20 e0       	ldi	r18, 0x00	; 0
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	40 e2       	ldi	r20, 0x20	; 32
    4aa2:	51 e4       	ldi	r21, 0x41	; 65
    4aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	cb 01       	movw	r24, r22
    4aac:	bc 01       	movw	r22, r24
    4aae:	cd 01       	movw	r24, r26
    4ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ab4:	dc 01       	movw	r26, r24
    4ab6:	cb 01       	movw	r24, r22
    4ab8:	9e 83       	std	Y+6, r25	; 0x06
    4aba:	8d 83       	std	Y+5, r24	; 0x05
    4abc:	0f c0       	rjmp	.+30     	; 0x4adc <EEPROM_voidSendDataByte+0xf2>
    4abe:	88 ec       	ldi	r24, 0xC8	; 200
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	9c 83       	std	Y+4, r25	; 0x04
    4ac4:	8b 83       	std	Y+3, r24	; 0x03
    4ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    4aca:	01 97       	sbiw	r24, 0x01	; 1
    4acc:	f1 f7       	brne	.-4      	; 0x4aca <EEPROM_voidSendDataByte+0xe0>
    4ace:	9c 83       	std	Y+4, r25	; 0x04
    4ad0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad6:	01 97       	sbiw	r24, 0x01	; 1
    4ad8:	9e 83       	std	Y+6, r25	; 0x06
    4ada:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4adc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ade:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae0:	00 97       	sbiw	r24, 0x00	; 0
    4ae2:	69 f7       	brne	.-38     	; 0x4abe <EEPROM_voidSendDataByte+0xd4>
    4ae4:	14 c0       	rjmp	.+40     	; 0x4b0e <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    4ae8:	78 85       	ldd	r23, Y+8	; 0x08
    4aea:	89 85       	ldd	r24, Y+9	; 0x09
    4aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	9e 83       	std	Y+6, r25	; 0x06
    4af8:	8d 83       	std	Y+5, r24	; 0x05
    4afa:	8d 81       	ldd	r24, Y+5	; 0x05
    4afc:	9e 81       	ldd	r25, Y+6	; 0x06
    4afe:	9a 83       	std	Y+2, r25	; 0x02
    4b00:	89 83       	std	Y+1, r24	; 0x01
    4b02:	89 81       	ldd	r24, Y+1	; 0x01
    4b04:	9a 81       	ldd	r25, Y+2	; 0x02
    4b06:	01 97       	sbiw	r24, 0x01	; 1
    4b08:	f1 f7       	brne	.-4      	; 0x4b06 <EEPROM_voidSendDataByte+0x11c>
    4b0a:	9a 83       	std	Y+2, r25	; 0x02
    4b0c:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    4b0e:	62 96       	adiw	r28, 0x12	; 18
    4b10:	0f b6       	in	r0, 0x3f	; 63
    4b12:	f8 94       	cli
    4b14:	de bf       	out	0x3e, r29	; 62
    4b16:	0f be       	out	0x3f, r0	; 63
    4b18:	cd bf       	out	0x3d, r28	; 61
    4b1a:	cf 91       	pop	r28
    4b1c:	df 91       	pop	r29
    4b1e:	08 95       	ret

00004b20 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    4b20:	df 93       	push	r29
    4b22:	cf 93       	push	r28
    4b24:	00 d0       	rcall	.+0      	; 0x4b26 <EEPROM_u8ReadDataByte+0x6>
    4b26:	00 d0       	rcall	.+0      	; 0x4b28 <EEPROM_u8ReadDataByte+0x8>
    4b28:	cd b7       	in	r28, 0x3d	; 61
    4b2a:	de b7       	in	r29, 0x3e	; 62
    4b2c:	9c 83       	std	Y+4, r25	; 0x04
    4b2e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8AddressPacket, Local_u8Data;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    4b30:	8b 81       	ldd	r24, Y+3	; 0x03
    4b32:	9c 81       	ldd	r25, Y+4	; 0x04
    4b34:	89 2f       	mov	r24, r25
    4b36:	99 27       	eor	r25, r25
    4b38:	80 65       	ori	r24, 0x50	; 80
    4b3a:	89 83       	std	Y+1, r24	; 0x01
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    4b3c:	0e 94 36 08 	call	0x106c	; 0x106c <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet with write request*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    4b40:	89 81       	ldd	r24, Y+1	; 0x01
    4b42:	0e 94 8a 08 	call	0x1114	; 0x1114 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    4b46:	8b 81       	ldd	r24, Y+3	; 0x03
    4b48:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    4b4c:	0e 94 67 08 	call	0x10ce	; 0x10ce <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_u8AddressPacket);
    4b50:	89 81       	ldd	r24, Y+1	; 0x01
    4b52:	0e 94 c5 08 	call	0x118a	; 0x118a <TWI_ErrorStatusSendSlaveAddressWithReadACK>
	
	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByteWithACK(&Local_u8Data);
    4b56:	ce 01       	movw	r24, r28
    4b58:	02 96       	adiw	r24, 0x02	; 2
    4b5a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TWI_ErrorStatusMasterReadDataByteWithACK>

	/*send the stop condition*/
	TWI_voidSendStopCondition();
    4b5e:	0e 94 9b 09 	call	0x1336	; 0x1336 <TWI_voidSendStopCondition>

	return Local_u8Data;
    4b62:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4b64:	0f 90       	pop	r0
    4b66:	0f 90       	pop	r0
    4b68:	0f 90       	pop	r0
    4b6a:	0f 90       	pop	r0
    4b6c:	cf 91       	pop	r28
    4b6e:	df 91       	pop	r29
    4b70:	08 95       	ret

00004b72 <EEPROM_u8ReadDataByteSequance>:

void EEPROM_u8ReadDataByteSequance(u16 Copy_u16LocationAddress, u8 * Ref_pu8StoreData, u8 Copy_u8SizeNumber)
{
    4b72:	df 93       	push	r29
    4b74:	cf 93       	push	r28
    4b76:	cd b7       	in	r28, 0x3d	; 61
    4b78:	de b7       	in	r29, 0x3e	; 62
    4b7a:	27 97       	sbiw	r28, 0x07	; 7
    4b7c:	0f b6       	in	r0, 0x3f	; 63
    4b7e:	f8 94       	cli
    4b80:	de bf       	out	0x3e, r29	; 62
    4b82:	0f be       	out	0x3f, r0	; 63
    4b84:	cd bf       	out	0x3d, r28	; 61
    4b86:	9c 83       	std	Y+4, r25	; 0x04
    4b88:	8b 83       	std	Y+3, r24	; 0x03
    4b8a:	7e 83       	std	Y+6, r23	; 0x06
    4b8c:	6d 83       	std	Y+5, r22	; 0x05
    4b8e:	4f 83       	std	Y+7, r20	; 0x07
	u8 Local_u8AddressPacket;
	u8 LoopCounter = 0;
    4b90:	19 82       	std	Y+1, r1	; 0x01

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    4b92:	8b 81       	ldd	r24, Y+3	; 0x03
    4b94:	9c 81       	ldd	r25, Y+4	; 0x04
    4b96:	89 2f       	mov	r24, r25
    4b98:	99 27       	eor	r25, r25
    4b9a:	80 65       	ori	r24, 0x50	; 80
    4b9c:	8a 83       	std	Y+2, r24	; 0x02
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    4b9e:	0e 94 36 08 	call	0x106c	; 0x106c <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet with write request*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    4ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba4:	0e 94 8a 08 	call	0x1114	; 0x1114 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    4ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    4baa:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    4bae:	0e 94 67 08 	call	0x10ce	; 0x10ce <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_u8AddressPacket);
    4bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bb4:	0e 94 c5 08 	call	0x118a	; 0x118a <TWI_ErrorStatusSendSlaveAddressWithReadACK>
	for(LoopCounter = 0; LoopCounter < Copy_u8SizeNumber; LoopCounter++)
    4bb8:	19 82       	std	Y+1, r1	; 0x01
    4bba:	2e c0       	rjmp	.+92     	; 0x4c18 <EEPROM_u8ReadDataByteSequance+0xa6>
	{
		/*Get the data from memory*/

		if(LoopCounter == (Copy_u8SizeNumber - 1))
    4bbc:	89 81       	ldd	r24, Y+1	; 0x01
    4bbe:	28 2f       	mov	r18, r24
    4bc0:	30 e0       	ldi	r19, 0x00	; 0
    4bc2:	8f 81       	ldd	r24, Y+7	; 0x07
    4bc4:	88 2f       	mov	r24, r24
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	01 97       	sbiw	r24, 0x01	; 1
    4bca:	28 17       	cp	r18, r24
    4bcc:	39 07       	cpc	r19, r25
    4bce:	79 f4       	brne	.+30     	; 0x4bee <EEPROM_u8ReadDataByteSequance+0x7c>
		{
			TWI_ErrorStatusMasterReadDataByte(Ref_pu8StoreData[LoopCounter], TWI_NACK);
    4bd0:	89 81       	ldd	r24, Y+1	; 0x01
    4bd2:	28 2f       	mov	r18, r24
    4bd4:	30 e0       	ldi	r19, 0x00	; 0
    4bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    4bda:	fc 01       	movw	r30, r24
    4bdc:	e2 0f       	add	r30, r18
    4bde:	f3 1f       	adc	r31, r19
    4be0:	80 81       	ld	r24, Z
    4be2:	88 2f       	mov	r24, r24
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	60 e0       	ldi	r22, 0x00	; 0
    4be8:	0e 94 26 09 	call	0x124c	; 0x124c <TWI_ErrorStatusMasterReadDataByte>
    4bec:	0d c0       	rjmp	.+26     	; 0x4c08 <EEPROM_u8ReadDataByteSequance+0x96>
		}
		else
		{
			TWI_ErrorStatusMasterReadDataByteWithACK(Ref_pu8StoreData[LoopCounter]);
    4bee:	89 81       	ldd	r24, Y+1	; 0x01
    4bf0:	28 2f       	mov	r18, r24
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	e2 0f       	add	r30, r18
    4bfc:	f3 1f       	adc	r31, r19
    4bfe:	80 81       	ld	r24, Z
    4c00:	88 2f       	mov	r24, r24
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TWI_ErrorStatusMasterReadDataByteWithACK>
		}
		Ref_pu8StoreData++;
    4c08:	8d 81       	ldd	r24, Y+5	; 0x05
    4c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c0c:	01 96       	adiw	r24, 0x01	; 1
    4c0e:	9e 83       	std	Y+6, r25	; 0x06
    4c10:	8d 83       	std	Y+5, r24	; 0x05
	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();

	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_u8AddressPacket);
	for(LoopCounter = 0; LoopCounter < Copy_u8SizeNumber; LoopCounter++)
    4c12:	89 81       	ldd	r24, Y+1	; 0x01
    4c14:	8f 5f       	subi	r24, 0xFF	; 255
    4c16:	89 83       	std	Y+1, r24	; 0x01
    4c18:	99 81       	ldd	r25, Y+1	; 0x01
    4c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    4c1c:	98 17       	cp	r25, r24
    4c1e:	70 f2       	brcs	.-100    	; 0x4bbc <EEPROM_u8ReadDataByteSequance+0x4a>
		}
		Ref_pu8StoreData++;
	}

	/*send the stop condition*/
	TWI_voidSendStopCondition();
    4c20:	0e 94 9b 09 	call	0x1336	; 0x1336 <TWI_voidSendStopCondition>
}
    4c24:	27 96       	adiw	r28, 0x07	; 7
    4c26:	0f b6       	in	r0, 0x3f	; 63
    4c28:	f8 94       	cli
    4c2a:	de bf       	out	0x3e, r29	; 62
    4c2c:	0f be       	out	0x3f, r0	; 63
    4c2e:	cd bf       	out	0x3d, r28	; 61
    4c30:	cf 91       	pop	r28
    4c32:	df 91       	pop	r29
    4c34:	08 95       	ret

00004c36 <main>:
void Contacts (void);

void System (void);

int main (void)
{
    4c36:	df 93       	push	r29
    4c38:	cf 93       	push	r28
    4c3a:	cd b7       	in	r28, 0x3d	; 61
    4c3c:	de b7       	in	r29, 0x3e	; 62
    4c3e:	e7 97       	sbiw	r28, 0x37	; 55
    4c40:	0f b6       	in	r0, 0x3f	; 63
    4c42:	f8 94       	cli
    4c44:	de bf       	out	0x3e, r29	; 62
    4c46:	0f be       	out	0x3f, r0	; 63
    4c48:	cd bf       	out	0x3d, r28	; 61

	/* Initializations */
	UART_voidInit();
    4c4a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_voidInit>

	TIMER_voidSetTopValue(20000);
    4c4e:	80 e2       	ldi	r24, 0x20	; 32
    4c50:	9e e4       	ldi	r25, 0x4E	; 78
    4c52:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <TIMER_voidSetTopValue>

	TIMER_voidTimer1SetOCRAMatchValue(450);
    4c56:	82 ec       	ldi	r24, 0xC2	; 194
    4c58:	91 e0       	ldi	r25, 0x01	; 1
    4c5a:	0e 94 2e 0b 	call	0x165c	; 0x165c <TIMER_voidTimer1SetOCRAMatchValue>

	TIMER_voidTimer1Init();
    4c5e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <TIMER_voidTimer1Init>

	LCD_voidInitPins();
    4c62:	0e 94 13 24 	call	0x4826	; 0x4826 <LCD_voidInitPins>

	LCD_voidInit();
    4c66:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <LCD_voidInit>

	ADC_voidInit();
    4c6a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <ADC_voidInit>
	/*---------------------------------------------------------------------*/


/* Variables */
	u8 User[20];		// For Recieve Data From Blutooth module
	u8 Size = 0;		// For Hold The Size of Data Recieved
    4c6e:	1b a2       	std	Y+35, r1	; 0x23
	u8 User_Flag = 0;	// Rise when the user name is correct
    4c70:	1a a2       	std	Y+34, r1	; 0x22
	u8 Pass_Flag = 0;	// Rise when the password is correct
    4c72:	19 a2       	std	Y+33, r1	; 0x21
	u8 Wrong_Flag = 0;	// Rise when the password is Wrong
    4c74:	18 a2       	std	Y+32, r1	; 0x20
	u8 Trys = 0;		// counts times of the wrong password
    4c76:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 Check = 0;		// Hold the return of strncmp Function
    4c78:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 LoopCounter = 0;	//used for loop the number of users
    4c7a:	1d 8e       	std	Y+29, r1	; 0x1d
	/*---------------------------------------------------------------------*/

/*	 Pins Configration  */
	DIO_voidSetPinDirection(PORTD, PIN0, INPUT);	// RX PIN
    4c7c:	83 e0       	ldi	r24, 0x03	; 3
    4c7e:	60 e0       	ldi	r22, 0x00	; 0
    4c80:	40 e0       	ldi	r20, 0x00	; 0
    4c82:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD, PIN1, OUTPUT);	// TX PIN
    4c86:	83 e0       	ldi	r24, 0x03	; 3
    4c88:	61 e0       	ldi	r22, 0x01	; 1
    4c8a:	41 e0       	ldi	r20, 0x01	; 1
    4c8c:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD, PIN5, OUTPUT); 	// Servo Pin
    4c90:	83 e0       	ldi	r24, 0x03	; 3
    4c92:	65 e0       	ldi	r22, 0x05	; 5
    4c94:	41 e0       	ldi	r20, 0x01	; 1
    4c96:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA, PIN0, OUTPUT);	// Buzzer Pin
    4c9a:	80 e0       	ldi	r24, 0x00	; 0
    4c9c:	60 e0       	ldi	r22, 0x00	; 0
    4c9e:	41 e0       	ldi	r20, 0x01	; 1
    4ca0:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA, PIN1, OUTPUT);	// Led1 Pin
    4ca4:	80 e0       	ldi	r24, 0x00	; 0
    4ca6:	61 e0       	ldi	r22, 0x01	; 1
    4ca8:	41 e0       	ldi	r20, 0x01	; 1
    4caa:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA, PIN2, OUTPUT);	// Led2 Pin
    4cae:	80 e0       	ldi	r24, 0x00	; 0
    4cb0:	62 e0       	ldi	r22, 0x02	; 2
    4cb2:	41 e0       	ldi	r20, 0x01	; 1
    4cb4:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA, PIN0, LOW);
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
    4cba:	60 e0       	ldi	r22, 0x00	; 0
    4cbc:	40 e0       	ldi	r20, 0x00	; 0
    4cbe:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>

	while(1)
	{
		/* Code */

		UART_voidTransmitSrting("\n\r");
    4cc2:	80 e6       	ldi	r24, 0x60	; 96
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
		UART_voidTransmitSrting("\n\r");
    4cca:	80 e6       	ldi	r24, 0x60	; 96
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>

		UART_voidTransmitSrting("Hello ");
    4cd2:	83 e6       	ldi	r24, 0x63	; 99
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
		UART_voidTransmitSrting("\n\r");
    4cda:	80 e6       	ldi	r24, 0x60	; 96
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
    4ce2:	80 e0       	ldi	r24, 0x00	; 0
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	aa e7       	ldi	r26, 0x7A	; 122
    4ce8:	b4 e4       	ldi	r27, 0x44	; 68
    4cea:	89 8f       	std	Y+25, r24	; 0x19
    4cec:	9a 8f       	std	Y+26, r25	; 0x1a
    4cee:	ab 8f       	std	Y+27, r26	; 0x1b
    4cf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cf2:	69 8d       	ldd	r22, Y+25	; 0x19
    4cf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	4a ef       	ldi	r20, 0xFA	; 250
    4d00:	54 e4       	ldi	r21, 0x44	; 68
    4d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d06:	dc 01       	movw	r26, r24
    4d08:	cb 01       	movw	r24, r22
    4d0a:	8d 8b       	std	Y+21, r24	; 0x15
    4d0c:	9e 8b       	std	Y+22, r25	; 0x16
    4d0e:	af 8b       	std	Y+23, r26	; 0x17
    4d10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d12:	6d 89       	ldd	r22, Y+21	; 0x15
    4d14:	7e 89       	ldd	r23, Y+22	; 0x16
    4d16:	8f 89       	ldd	r24, Y+23	; 0x17
    4d18:	98 8d       	ldd	r25, Y+24	; 0x18
    4d1a:	20 e0       	ldi	r18, 0x00	; 0
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	40 e8       	ldi	r20, 0x80	; 128
    4d20:	5f e3       	ldi	r21, 0x3F	; 63
    4d22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d26:	88 23       	and	r24, r24
    4d28:	2c f4       	brge	.+10     	; 0x4d34 <main+0xfe>
		__ticks = 1;
    4d2a:	81 e0       	ldi	r24, 0x01	; 1
    4d2c:	90 e0       	ldi	r25, 0x00	; 0
    4d2e:	9c 8b       	std	Y+20, r25	; 0x14
    4d30:	8b 8b       	std	Y+19, r24	; 0x13
    4d32:	3f c0       	rjmp	.+126    	; 0x4db2 <main+0x17c>
	else if (__tmp > 65535)
    4d34:	6d 89       	ldd	r22, Y+21	; 0x15
    4d36:	7e 89       	ldd	r23, Y+22	; 0x16
    4d38:	8f 89       	ldd	r24, Y+23	; 0x17
    4d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	3f ef       	ldi	r19, 0xFF	; 255
    4d40:	4f e7       	ldi	r20, 0x7F	; 127
    4d42:	57 e4       	ldi	r21, 0x47	; 71
    4d44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d48:	18 16       	cp	r1, r24
    4d4a:	4c f5       	brge	.+82     	; 0x4d9e <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d4c:	69 8d       	ldd	r22, Y+25	; 0x19
    4d4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d54:	20 e0       	ldi	r18, 0x00	; 0
    4d56:	30 e0       	ldi	r19, 0x00	; 0
    4d58:	40 e2       	ldi	r20, 0x20	; 32
    4d5a:	51 e4       	ldi	r21, 0x41	; 65
    4d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d60:	dc 01       	movw	r26, r24
    4d62:	cb 01       	movw	r24, r22
    4d64:	bc 01       	movw	r22, r24
    4d66:	cd 01       	movw	r24, r26
    4d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d6c:	dc 01       	movw	r26, r24
    4d6e:	cb 01       	movw	r24, r22
    4d70:	9c 8b       	std	Y+20, r25	; 0x14
    4d72:	8b 8b       	std	Y+19, r24	; 0x13
    4d74:	0f c0       	rjmp	.+30     	; 0x4d94 <main+0x15e>
    4d76:	88 ec       	ldi	r24, 0xC8	; 200
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	9a 8b       	std	Y+18, r25	; 0x12
    4d7c:	89 8b       	std	Y+17, r24	; 0x11
    4d7e:	89 89       	ldd	r24, Y+17	; 0x11
    4d80:	9a 89       	ldd	r25, Y+18	; 0x12
    4d82:	01 97       	sbiw	r24, 0x01	; 1
    4d84:	f1 f7       	brne	.-4      	; 0x4d82 <main+0x14c>
    4d86:	9a 8b       	std	Y+18, r25	; 0x12
    4d88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d8e:	01 97       	sbiw	r24, 0x01	; 1
    4d90:	9c 8b       	std	Y+20, r25	; 0x14
    4d92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d94:	8b 89       	ldd	r24, Y+19	; 0x13
    4d96:	9c 89       	ldd	r25, Y+20	; 0x14
    4d98:	00 97       	sbiw	r24, 0x00	; 0
    4d9a:	69 f7       	brne	.-38     	; 0x4d76 <main+0x140>
    4d9c:	14 c0       	rjmp	.+40     	; 0x4dc6 <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d9e:	6d 89       	ldd	r22, Y+21	; 0x15
    4da0:	7e 89       	ldd	r23, Y+22	; 0x16
    4da2:	8f 89       	ldd	r24, Y+23	; 0x17
    4da4:	98 8d       	ldd	r25, Y+24	; 0x18
    4da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4daa:	dc 01       	movw	r26, r24
    4dac:	cb 01       	movw	r24, r22
    4dae:	9c 8b       	std	Y+20, r25	; 0x14
    4db0:	8b 8b       	std	Y+19, r24	; 0x13
    4db2:	8b 89       	ldd	r24, Y+19	; 0x13
    4db4:	9c 89       	ldd	r25, Y+20	; 0x14
    4db6:	98 8b       	std	Y+16, r25	; 0x10
    4db8:	8f 87       	std	Y+15, r24	; 0x0f
    4dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dbc:	98 89       	ldd	r25, Y+16	; 0x10
    4dbe:	01 97       	sbiw	r24, 0x01	; 1
    4dc0:	f1 f7       	brne	.-4      	; 0x4dbe <main+0x188>
    4dc2:	98 8b       	std	Y+16, r25	; 0x10
    4dc4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		UART_voidTransmitSrting("Enter Your User Name: ");
    4dc6:	8a e6       	ldi	r24, 0x6A	; 106
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
		UART_voidTransmitSrting("\n\r");
    4dce:	80 e6       	ldi	r24, 0x60	; 96
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
		while(1)
		{
			Contacts();
    4dd6:	0e 94 91 28 	call	0x5122	; 0x5122 <Contacts>
			Size = UART_viodReceiveString(User);
    4dda:	ce 01       	movw	r24, r28
    4ddc:	84 96       	adiw	r24, 0x24	; 36
    4dde:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <UART_viodReceiveString>
    4de2:	8b a3       	std	Y+35, r24	; 0x23
			for(LoopCounter = 0; LoopCounter < 7; LoopCounter++)
    4de4:	1d 8e       	std	Y+29, r1	; 0x1d
    4de6:	2b c0       	rjmp	.+86     	; 0x4e3e <main+0x208>
			{
				Check = strncmp(User, Clints[LoopCounter].UserName, Size);
    4de8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4dea:	48 2f       	mov	r20, r24
    4dec:	50 e0       	ldi	r21, 0x00	; 0
    4dee:	ca 01       	movw	r24, r20
    4df0:	9c 01       	movw	r18, r24
    4df2:	22 0f       	add	r18, r18
    4df4:	33 1f       	adc	r19, r19
    4df6:	24 0f       	add	r18, r20
    4df8:	35 1f       	adc	r19, r21
    4dfa:	c9 01       	movw	r24, r18
    4dfc:	88 0f       	add	r24, r24
    4dfe:	99 1f       	adc	r25, r25
    4e00:	88 0f       	add	r24, r24
    4e02:	99 1f       	adc	r25, r25
    4e04:	88 0f       	add	r24, r24
    4e06:	99 1f       	adc	r25, r25
    4e08:	82 1b       	sub	r24, r18
    4e0a:	93 0b       	sbc	r25, r19
    4e0c:	88 0f       	add	r24, r24
    4e0e:	99 1f       	adc	r25, r25
    4e10:	ac 01       	movw	r20, r24
    4e12:	4f 5f       	subi	r20, 0xFF	; 255
    4e14:	5d 4f       	sbci	r21, 0xFD	; 253
    4e16:	8b a1       	ldd	r24, Y+35	; 0x23
    4e18:	28 2f       	mov	r18, r24
    4e1a:	30 e0       	ldi	r19, 0x00	; 0
    4e1c:	ce 01       	movw	r24, r28
    4e1e:	84 96       	adiw	r24, 0x24	; 36
    4e20:	ba 01       	movw	r22, r20
    4e22:	a9 01       	movw	r20, r18
    4e24:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strncmp>
    4e28:	8e 8f       	std	Y+30, r24	; 0x1e
				if(Check == 13)
    4e2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4e2c:	8d 30       	cpi	r24, 0x0D	; 13
    4e2e:	21 f4       	brne	.+8      	; 0x4e38 <main+0x202>
				{
					User_Flag = 1;
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	8a a3       	std	Y+34, r24	; 0x22
					Check = 0;
    4e34:	1e 8e       	std	Y+30, r1	; 0x1e
    4e36:	06 c0       	rjmp	.+12     	; 0x4e44 <main+0x20e>
		UART_voidTransmitSrting("\n\r");
		while(1)
		{
			Contacts();
			Size = UART_viodReceiveString(User);
			for(LoopCounter = 0; LoopCounter < 7; LoopCounter++)
    4e38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e3a:	8f 5f       	subi	r24, 0xFF	; 255
    4e3c:	8d 8f       	std	Y+29, r24	; 0x1d
    4e3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e40:	87 30       	cpi	r24, 0x07	; 7
    4e42:	90 f2       	brcs	.-92     	; 0x4de8 <main+0x1b2>
					Check = 0;
					break;
				}
			}

			if(User_Flag == 1)
    4e44:	8a a1       	ldd	r24, Y+34	; 0x22
    4e46:	81 30       	cpi	r24, 0x01	; 1
    4e48:	09 f0       	breq	.+2      	; 0x4e4c <main+0x216>
    4e4a:	62 c1       	rjmp	.+708    	; 0x5110 <main+0x4da>
			{
				User_Flag = 0;
    4e4c:	1a a2       	std	Y+34, r1	; 0x22
				UART_voidTransmitSrting("Enter Your Pass");
    4e4e:	81 e8       	ldi	r24, 0x81	; 129
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
				UART_voidTransmitSrting("\n\r");
    4e56:	80 e6       	ldi	r24, 0x60	; 96
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>

				Size = UART_viodReceiveString(User);
    4e5e:	ce 01       	movw	r24, r28
    4e60:	84 96       	adiw	r24, 0x24	; 36
    4e62:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <UART_viodReceiveString>
    4e66:	8b a3       	std	Y+35, r24	; 0x23
				Check = strncmp(User, Clints[LoopCounter].Password, Size);
    4e68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e6a:	48 2f       	mov	r20, r24
    4e6c:	50 e0       	ldi	r21, 0x00	; 0
    4e6e:	ca 01       	movw	r24, r20
    4e70:	9c 01       	movw	r18, r24
    4e72:	22 0f       	add	r18, r18
    4e74:	33 1f       	adc	r19, r19
    4e76:	24 0f       	add	r18, r20
    4e78:	35 1f       	adc	r19, r21
    4e7a:	c9 01       	movw	r24, r18
    4e7c:	88 0f       	add	r24, r24
    4e7e:	99 1f       	adc	r25, r25
    4e80:	88 0f       	add	r24, r24
    4e82:	99 1f       	adc	r25, r25
    4e84:	88 0f       	add	r24, r24
    4e86:	99 1f       	adc	r25, r25
    4e88:	82 1b       	sub	r24, r18
    4e8a:	93 0b       	sbc	r25, r19
    4e8c:	88 0f       	add	r24, r24
    4e8e:	99 1f       	adc	r25, r25
    4e90:	44 96       	adiw	r24, 0x14	; 20
    4e92:	ac 01       	movw	r20, r24
    4e94:	4f 5f       	subi	r20, 0xFF	; 255
    4e96:	5d 4f       	sbci	r21, 0xFD	; 253
    4e98:	8b a1       	ldd	r24, Y+35	; 0x23
    4e9a:	28 2f       	mov	r18, r24
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	ce 01       	movw	r24, r28
    4ea0:	84 96       	adiw	r24, 0x24	; 36
    4ea2:	ba 01       	movw	r22, r20
    4ea4:	a9 01       	movw	r20, r18
    4ea6:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strncmp>
    4eaa:	8e 8f       	std	Y+30, r24	; 0x1e
    4eac:	9c c0       	rjmp	.+312    	; 0x4fe6 <main+0x3b0>
				while(Trys < 2)
				{
					if(Check == 13)
    4eae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4eb0:	8d 30       	cpi	r24, 0x0D	; 13
    4eb2:	09 f0       	breq	.+2      	; 0x4eb6 <main+0x280>
    4eb4:	58 c0       	rjmp	.+176    	; 0x4f66 <main+0x330>
					{
						Pass_Flag = 1;
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	89 a3       	std	Y+33, r24	; 0x21
						Check = 0;
    4eba:	1e 8e       	std	Y+30, r1	; 0x1e
						if(LoopCounter == 0)
    4ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ebe:	88 23       	and	r24, r24
    4ec0:	49 f4       	brne	.+18     	; 0x4ed4 <main+0x29e>
						{
							UART_voidTransmitSrting("Welcome Mahmoud");
    4ec2:	81 e9       	ldi	r24, 0x91	; 145
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
							UART_voidTransmitSrting("\n\r");
    4eca:	80 e6       	ldi	r24, 0x60	; 96
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
    4ed2:	8d c0       	rjmp	.+282    	; 0x4fee <main+0x3b8>
							break;
						}
						else if(LoopCounter == 1)
    4ed4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ed6:	81 30       	cpi	r24, 0x01	; 1
    4ed8:	49 f4       	brne	.+18     	; 0x4eec <main+0x2b6>
						{
							UART_voidTransmitSrting("Welcome Omar");
    4eda:	81 ea       	ldi	r24, 0xA1	; 161
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
							UART_voidTransmitSrting("\n\r");
    4ee2:	80 e6       	ldi	r24, 0x60	; 96
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
    4eea:	81 c0       	rjmp	.+258    	; 0x4fee <main+0x3b8>
							break;
						}
						else if(LoopCounter == 2)
    4eec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4eee:	82 30       	cpi	r24, 0x02	; 2
    4ef0:	49 f4       	brne	.+18     	; 0x4f04 <main+0x2ce>
						{
							UART_voidTransmitSrting("Welcome Peter");
    4ef2:	8e ea       	ldi	r24, 0xAE	; 174
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
							UART_voidTransmitSrting("\n\r");
    4efa:	80 e6       	ldi	r24, 0x60	; 96
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
    4f02:	75 c0       	rjmp	.+234    	; 0x4fee <main+0x3b8>
							break;
						}
						else if(LoopCounter == 3)
    4f04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f06:	83 30       	cpi	r24, 0x03	; 3
    4f08:	49 f4       	brne	.+18     	; 0x4f1c <main+0x2e6>
						{
							UART_voidTransmitSrting("Welcome Karim");
    4f0a:	8c eb       	ldi	r24, 0xBC	; 188
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
							UART_voidTransmitSrting("\n\r");
    4f12:	80 e6       	ldi	r24, 0x60	; 96
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
    4f1a:	69 c0       	rjmp	.+210    	; 0x4fee <main+0x3b8>
							break;
						}
						else if(LoopCounter == 4)
    4f1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f1e:	84 30       	cpi	r24, 0x04	; 4
    4f20:	49 f4       	brne	.+18     	; 0x4f34 <main+0x2fe>
						{
							UART_voidTransmitSrting("Welcome Abbas");
    4f22:	8a ec       	ldi	r24, 0xCA	; 202
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
							UART_voidTransmitSrting("\n\r");
    4f2a:	80 e6       	ldi	r24, 0x60	; 96
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
    4f32:	5d c0       	rjmp	.+186    	; 0x4fee <main+0x3b8>
							break;
						}
						else if(LoopCounter == 5)
    4f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f36:	85 30       	cpi	r24, 0x05	; 5
    4f38:	49 f4       	brne	.+18     	; 0x4f4c <main+0x316>
						{
							UART_voidTransmitSrting("Welcome ziad");
    4f3a:	88 ed       	ldi	r24, 0xD8	; 216
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
							UART_voidTransmitSrting("\n\r");
    4f42:	80 e6       	ldi	r24, 0x60	; 96
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
    4f4a:	51 c0       	rjmp	.+162    	; 0x4fee <main+0x3b8>
							break;
						}
						else if(LoopCounter == 6)
    4f4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f4e:	86 30       	cpi	r24, 0x06	; 6
    4f50:	09 f0       	breq	.+2      	; 0x4f54 <main+0x31e>
    4f52:	49 c0       	rjmp	.+146    	; 0x4fe6 <main+0x3b0>
						{
							UART_voidTransmitSrting("Welcome Ragab");
    4f54:	85 ee       	ldi	r24, 0xE5	; 229
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
							UART_voidTransmitSrting("\n\r");
    4f5c:	80 e6       	ldi	r24, 0x60	; 96
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
    4f64:	44 c0       	rjmp	.+136    	; 0x4fee <main+0x3b8>
						}

					}
					else
					{
						UART_voidTransmitSrting("Wrong Password, Please Try Again");
    4f66:	83 ef       	ldi	r24, 0xF3	; 243
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
						UART_voidTransmitSrting("\n\r");
    4f6e:	80 e6       	ldi	r24, 0x60	; 96
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
						Size = UART_viodReceiveString(User);
    4f76:	ce 01       	movw	r24, r28
    4f78:	84 96       	adiw	r24, 0x24	; 36
    4f7a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <UART_viodReceiveString>
    4f7e:	8b a3       	std	Y+35, r24	; 0x23
						Check = strncmp(User, Clints[LoopCounter].Password, Size);
    4f80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f82:	48 2f       	mov	r20, r24
    4f84:	50 e0       	ldi	r21, 0x00	; 0
    4f86:	ca 01       	movw	r24, r20
    4f88:	9c 01       	movw	r18, r24
    4f8a:	22 0f       	add	r18, r18
    4f8c:	33 1f       	adc	r19, r19
    4f8e:	24 0f       	add	r18, r20
    4f90:	35 1f       	adc	r19, r21
    4f92:	c9 01       	movw	r24, r18
    4f94:	88 0f       	add	r24, r24
    4f96:	99 1f       	adc	r25, r25
    4f98:	88 0f       	add	r24, r24
    4f9a:	99 1f       	adc	r25, r25
    4f9c:	88 0f       	add	r24, r24
    4f9e:	99 1f       	adc	r25, r25
    4fa0:	82 1b       	sub	r24, r18
    4fa2:	93 0b       	sbc	r25, r19
    4fa4:	88 0f       	add	r24, r24
    4fa6:	99 1f       	adc	r25, r25
    4fa8:	44 96       	adiw	r24, 0x14	; 20
    4faa:	ac 01       	movw	r20, r24
    4fac:	4f 5f       	subi	r20, 0xFF	; 255
    4fae:	5d 4f       	sbci	r21, 0xFD	; 253
    4fb0:	8b a1       	ldd	r24, Y+35	; 0x23
    4fb2:	28 2f       	mov	r18, r24
    4fb4:	30 e0       	ldi	r19, 0x00	; 0
    4fb6:	ce 01       	movw	r24, r28
    4fb8:	84 96       	adiw	r24, 0x24	; 36
    4fba:	ba 01       	movw	r22, r20
    4fbc:	a9 01       	movw	r20, r18
    4fbe:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strncmp>
    4fc2:	8e 8f       	std	Y+30, r24	; 0x1e
						Trys++;
    4fc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fc6:	8f 5f       	subi	r24, 0xFF	; 255
    4fc8:	8f 8f       	std	Y+31, r24	; 0x1f
						if(Trys == 2)
    4fca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fcc:	82 30       	cpi	r24, 0x02	; 2
    4fce:	59 f4       	brne	.+22     	; 0x4fe6 <main+0x3b0>
						{
							UART_voidTransmitSrting("Max Limit");
    4fd0:	84 e1       	ldi	r24, 0x14	; 20
    4fd2:	91 e0       	ldi	r25, 0x01	; 1
    4fd4:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
							UART_voidTransmitSrting("\n\r");
    4fd8:	80 e6       	ldi	r24, 0x60	; 96
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
							Wrong_Flag = 1;
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	88 a3       	std	Y+32, r24	; 0x20
    4fe4:	04 c0       	rjmp	.+8      	; 0x4fee <main+0x3b8>
				UART_voidTransmitSrting("Enter Your Pass");
				UART_voidTransmitSrting("\n\r");

				Size = UART_viodReceiveString(User);
				Check = strncmp(User, Clints[LoopCounter].Password, Size);
				while(Trys < 2)
    4fe6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fe8:	82 30       	cpi	r24, 0x02	; 2
    4fea:	08 f4       	brcc	.+2      	; 0x4fee <main+0x3b8>
    4fec:	60 cf       	rjmp	.-320    	; 0x4eae <main+0x278>
							Wrong_Flag = 1;
							break;
						}
					}
				}
				if(Pass_Flag == 1 && Wrong_Flag == 0)
    4fee:	89 a1       	ldd	r24, Y+33	; 0x21
    4ff0:	81 30       	cpi	r24, 0x01	; 1
    4ff2:	09 f0       	breq	.+2      	; 0x4ff6 <main+0x3c0>
    4ff4:	82 c0       	rjmp	.+260    	; 0x50fa <main+0x4c4>
    4ff6:	88 a1       	ldd	r24, Y+32	; 0x20
    4ff8:	88 23       	and	r24, r24
    4ffa:	09 f0       	breq	.+2      	; 0x4ffe <main+0x3c8>
    4ffc:	7e c0       	rjmp	.+252    	; 0x50fa <main+0x4c4>
				{
					TIMER_voidTimer1SetOCRAMatchValue(1000);
    4ffe:	88 ee       	ldi	r24, 0xE8	; 232
    5000:	93 e0       	ldi	r25, 0x03	; 3
    5002:	0e 94 2e 0b 	call	0x165c	; 0x165c <TIMER_voidTimer1SetOCRAMatchValue>
    5006:	80 e0       	ldi	r24, 0x00	; 0
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	aa ef       	ldi	r26, 0xFA	; 250
    500c:	b4 e4       	ldi	r27, 0x44	; 68
    500e:	8b 87       	std	Y+11, r24	; 0x0b
    5010:	9c 87       	std	Y+12, r25	; 0x0c
    5012:	ad 87       	std	Y+13, r26	; 0x0d
    5014:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5016:	6b 85       	ldd	r22, Y+11	; 0x0b
    5018:	7c 85       	ldd	r23, Y+12	; 0x0c
    501a:	8d 85       	ldd	r24, Y+13	; 0x0d
    501c:	9e 85       	ldd	r25, Y+14	; 0x0e
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	4a ef       	ldi	r20, 0xFA	; 250
    5024:	54 e4       	ldi	r21, 0x44	; 68
    5026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	8f 83       	std	Y+7, r24	; 0x07
    5030:	98 87       	std	Y+8, r25	; 0x08
    5032:	a9 87       	std	Y+9, r26	; 0x09
    5034:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5036:	6f 81       	ldd	r22, Y+7	; 0x07
    5038:	78 85       	ldd	r23, Y+8	; 0x08
    503a:	89 85       	ldd	r24, Y+9	; 0x09
    503c:	9a 85       	ldd	r25, Y+10	; 0x0a
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	40 e8       	ldi	r20, 0x80	; 128
    5044:	5f e3       	ldi	r21, 0x3F	; 63
    5046:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    504a:	88 23       	and	r24, r24
    504c:	2c f4       	brge	.+10     	; 0x5058 <main+0x422>
		__ticks = 1;
    504e:	81 e0       	ldi	r24, 0x01	; 1
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	9e 83       	std	Y+6, r25	; 0x06
    5054:	8d 83       	std	Y+5, r24	; 0x05
    5056:	3f c0       	rjmp	.+126    	; 0x50d6 <main+0x4a0>
	else if (__tmp > 65535)
    5058:	6f 81       	ldd	r22, Y+7	; 0x07
    505a:	78 85       	ldd	r23, Y+8	; 0x08
    505c:	89 85       	ldd	r24, Y+9	; 0x09
    505e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5060:	20 e0       	ldi	r18, 0x00	; 0
    5062:	3f ef       	ldi	r19, 0xFF	; 255
    5064:	4f e7       	ldi	r20, 0x7F	; 127
    5066:	57 e4       	ldi	r21, 0x47	; 71
    5068:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    506c:	18 16       	cp	r1, r24
    506e:	4c f5       	brge	.+82     	; 0x50c2 <main+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5070:	6b 85       	ldd	r22, Y+11	; 0x0b
    5072:	7c 85       	ldd	r23, Y+12	; 0x0c
    5074:	8d 85       	ldd	r24, Y+13	; 0x0d
    5076:	9e 85       	ldd	r25, Y+14	; 0x0e
    5078:	20 e0       	ldi	r18, 0x00	; 0
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	40 e2       	ldi	r20, 0x20	; 32
    507e:	51 e4       	ldi	r21, 0x41	; 65
    5080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5084:	dc 01       	movw	r26, r24
    5086:	cb 01       	movw	r24, r22
    5088:	bc 01       	movw	r22, r24
    508a:	cd 01       	movw	r24, r26
    508c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5090:	dc 01       	movw	r26, r24
    5092:	cb 01       	movw	r24, r22
    5094:	9e 83       	std	Y+6, r25	; 0x06
    5096:	8d 83       	std	Y+5, r24	; 0x05
    5098:	0f c0       	rjmp	.+30     	; 0x50b8 <main+0x482>
    509a:	88 ec       	ldi	r24, 0xC8	; 200
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	9c 83       	std	Y+4, r25	; 0x04
    50a0:	8b 83       	std	Y+3, r24	; 0x03
    50a2:	8b 81       	ldd	r24, Y+3	; 0x03
    50a4:	9c 81       	ldd	r25, Y+4	; 0x04
    50a6:	01 97       	sbiw	r24, 0x01	; 1
    50a8:	f1 f7       	brne	.-4      	; 0x50a6 <main+0x470>
    50aa:	9c 83       	std	Y+4, r25	; 0x04
    50ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ae:	8d 81       	ldd	r24, Y+5	; 0x05
    50b0:	9e 81       	ldd	r25, Y+6	; 0x06
    50b2:	01 97       	sbiw	r24, 0x01	; 1
    50b4:	9e 83       	std	Y+6, r25	; 0x06
    50b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50b8:	8d 81       	ldd	r24, Y+5	; 0x05
    50ba:	9e 81       	ldd	r25, Y+6	; 0x06
    50bc:	00 97       	sbiw	r24, 0x00	; 0
    50be:	69 f7       	brne	.-38     	; 0x509a <main+0x464>
    50c0:	14 c0       	rjmp	.+40     	; 0x50ea <main+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50c2:	6f 81       	ldd	r22, Y+7	; 0x07
    50c4:	78 85       	ldd	r23, Y+8	; 0x08
    50c6:	89 85       	ldd	r24, Y+9	; 0x09
    50c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ce:	dc 01       	movw	r26, r24
    50d0:	cb 01       	movw	r24, r22
    50d2:	9e 83       	std	Y+6, r25	; 0x06
    50d4:	8d 83       	std	Y+5, r24	; 0x05
    50d6:	8d 81       	ldd	r24, Y+5	; 0x05
    50d8:	9e 81       	ldd	r25, Y+6	; 0x06
    50da:	9a 83       	std	Y+2, r25	; 0x02
    50dc:	89 83       	std	Y+1, r24	; 0x01
    50de:	89 81       	ldd	r24, Y+1	; 0x01
    50e0:	9a 81       	ldd	r25, Y+2	; 0x02
    50e2:	01 97       	sbiw	r24, 0x01	; 1
    50e4:	f1 f7       	brne	.-4      	; 0x50e2 <main+0x4ac>
    50e6:	9a 83       	std	Y+2, r25	; 0x02
    50e8:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(2000);
					TIMER_voidTimer1SetOCRAMatchValue(2000);
    50ea:	80 ed       	ldi	r24, 0xD0	; 208
    50ec:	97 e0       	ldi	r25, 0x07	; 7
    50ee:	0e 94 2e 0b 	call	0x165c	; 0x165c <TIMER_voidTimer1SetOCRAMatchValue>
					Pass_Flag = 0;
    50f2:	19 a2       	std	Y+33, r1	; 0x21
					System();
    50f4:	0e 94 16 29 	call	0x522c	; 0x522c <System>
    50f8:	e4 cd       	rjmp	.-1080   	; 0x4cc2 <main+0x8c>
					break;
				}
				else if(Wrong_Flag == 1)
    50fa:	88 a1       	ldd	r24, Y+32	; 0x20
    50fc:	81 30       	cpi	r24, 0x01	; 1
    50fe:	09 f0       	breq	.+2      	; 0x5102 <main+0x4cc>
    5100:	6a ce       	rjmp	.-812    	; 0x4dd6 <main+0x1a0>
				{
					Trys = 0;
    5102:	1f 8e       	std	Y+31, r1	; 0x1f
					while(1)
					{
						DIO_voidSetPinValue(PORTA, PIN0, HIGH);
    5104:	80 e0       	ldi	r24, 0x00	; 0
    5106:	60 e0       	ldi	r22, 0x00	; 0
    5108:	41 e0       	ldi	r20, 0x01	; 1
    510a:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    510e:	fa cf       	rjmp	.-12     	; 0x5104 <main+0x4ce>
					}
				}
			}
			else if(User_Flag == 0)
    5110:	8a a1       	ldd	r24, Y+34	; 0x22
    5112:	88 23       	and	r24, r24
    5114:	09 f0       	breq	.+2      	; 0x5118 <main+0x4e2>
    5116:	5f ce       	rjmp	.-834    	; 0x4dd6 <main+0x1a0>
			{
				UART_voidTransmitSrting("You are not registered");
    5118:	8e e1       	ldi	r24, 0x1E	; 30
    511a:	91 e0       	ldi	r25, 0x01	; 1
    511c:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
    5120:	d0 cd       	rjmp	.-1120   	; 0x4cc2 <main+0x8c>

00005122 <Contacts>:




void Contacts (void)
{
    5122:	df 93       	push	r29
    5124:	cf 93       	push	r28
    5126:	cd b7       	in	r28, 0x3d	; 61
    5128:	de b7       	in	r29, 0x3e	; 62
	strcpy(Clints[0].UserName, "Mahmoud");
    512a:	81 e0       	ldi	r24, 0x01	; 1
    512c:	92 e0       	ldi	r25, 0x02	; 2
    512e:	25 e3       	ldi	r18, 0x35	; 53
    5130:	31 e0       	ldi	r19, 0x01	; 1
    5132:	b9 01       	movw	r22, r18
    5134:	48 e0       	ldi	r20, 0x08	; 8
    5136:	50 e0       	ldi	r21, 0x00	; 0
    5138:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>
	strcpy(Clints[0].Password, "152002");
    513c:	85 e1       	ldi	r24, 0x15	; 21
    513e:	92 e0       	ldi	r25, 0x02	; 2
    5140:	2d e3       	ldi	r18, 0x3D	; 61
    5142:	31 e0       	ldi	r19, 0x01	; 1
    5144:	b9 01       	movw	r22, r18
    5146:	47 e0       	ldi	r20, 0x07	; 7
    5148:	50 e0       	ldi	r21, 0x00	; 0
    514a:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>

	strcpy(Clints[1].UserName, "Omar");
    514e:	8b e2       	ldi	r24, 0x2B	; 43
    5150:	92 e0       	ldi	r25, 0x02	; 2
    5152:	24 e4       	ldi	r18, 0x44	; 68
    5154:	31 e0       	ldi	r19, 0x01	; 1
    5156:	b9 01       	movw	r22, r18
    5158:	45 e0       	ldi	r20, 0x05	; 5
    515a:	50 e0       	ldi	r21, 0x00	; 0
    515c:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>
	strcpy(Clints[1].Password, "52003");
    5160:	8f e3       	ldi	r24, 0x3F	; 63
    5162:	92 e0       	ldi	r25, 0x02	; 2
    5164:	29 e4       	ldi	r18, 0x49	; 73
    5166:	31 e0       	ldi	r19, 0x01	; 1
    5168:	b9 01       	movw	r22, r18
    516a:	46 e0       	ldi	r20, 0x06	; 6
    516c:	50 e0       	ldi	r21, 0x00	; 0
    516e:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>

	strcpy(Clints[2].UserName, "Peter");
    5172:	85 e5       	ldi	r24, 0x55	; 85
    5174:	92 e0       	ldi	r25, 0x02	; 2
    5176:	2f e4       	ldi	r18, 0x4F	; 79
    5178:	31 e0       	ldi	r19, 0x01	; 1
    517a:	b9 01       	movw	r22, r18
    517c:	46 e0       	ldi	r20, 0x06	; 6
    517e:	50 e0       	ldi	r21, 0x00	; 0
    5180:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>
	strcpy(Clints[2].Password, "122002");
    5184:	89 e6       	ldi	r24, 0x69	; 105
    5186:	92 e0       	ldi	r25, 0x02	; 2
    5188:	25 e5       	ldi	r18, 0x55	; 85
    518a:	31 e0       	ldi	r19, 0x01	; 1
    518c:	b9 01       	movw	r22, r18
    518e:	47 e0       	ldi	r20, 0x07	; 7
    5190:	50 e0       	ldi	r21, 0x00	; 0
    5192:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>

	strcpy(Clints[3].UserName, "Karim");
    5196:	8f e7       	ldi	r24, 0x7F	; 127
    5198:	92 e0       	ldi	r25, 0x02	; 2
    519a:	2c e5       	ldi	r18, 0x5C	; 92
    519c:	31 e0       	ldi	r19, 0x01	; 1
    519e:	b9 01       	movw	r22, r18
    51a0:	46 e0       	ldi	r20, 0x06	; 6
    51a2:	50 e0       	ldi	r21, 0x00	; 0
    51a4:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>
	strcpy(Clints[3].Password, "52002");
    51a8:	83 e9       	ldi	r24, 0x93	; 147
    51aa:	92 e0       	ldi	r25, 0x02	; 2
    51ac:	22 e6       	ldi	r18, 0x62	; 98
    51ae:	31 e0       	ldi	r19, 0x01	; 1
    51b0:	b9 01       	movw	r22, r18
    51b2:	46 e0       	ldi	r20, 0x06	; 6
    51b4:	50 e0       	ldi	r21, 0x00	; 0
    51b6:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>

	strcpy(Clints[4].UserName, "Abbas");
    51ba:	89 ea       	ldi	r24, 0xA9	; 169
    51bc:	92 e0       	ldi	r25, 0x02	; 2
    51be:	28 e6       	ldi	r18, 0x68	; 104
    51c0:	31 e0       	ldi	r19, 0x01	; 1
    51c2:	b9 01       	movw	r22, r18
    51c4:	46 e0       	ldi	r20, 0x06	; 6
    51c6:	50 e0       	ldi	r21, 0x00	; 0
    51c8:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>
	strcpy(Clints[4].Password, "12002");
    51cc:	8d eb       	ldi	r24, 0xBD	; 189
    51ce:	92 e0       	ldi	r25, 0x02	; 2
    51d0:	2e e6       	ldi	r18, 0x6E	; 110
    51d2:	31 e0       	ldi	r19, 0x01	; 1
    51d4:	b9 01       	movw	r22, r18
    51d6:	46 e0       	ldi	r20, 0x06	; 6
    51d8:	50 e0       	ldi	r21, 0x00	; 0
    51da:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>

	strcpy(Clints[5].UserName, "ziad");
    51de:	83 ed       	ldi	r24, 0xD3	; 211
    51e0:	92 e0       	ldi	r25, 0x02	; 2
    51e2:	24 e7       	ldi	r18, 0x74	; 116
    51e4:	31 e0       	ldi	r19, 0x01	; 1
    51e6:	b9 01       	movw	r22, r18
    51e8:	45 e0       	ldi	r20, 0x05	; 5
    51ea:	50 e0       	ldi	r21, 0x00	; 0
    51ec:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>
	strcpy(Clints[5].Password, "292003");
    51f0:	87 ee       	ldi	r24, 0xE7	; 231
    51f2:	92 e0       	ldi	r25, 0x02	; 2
    51f4:	29 e7       	ldi	r18, 0x79	; 121
    51f6:	31 e0       	ldi	r19, 0x01	; 1
    51f8:	b9 01       	movw	r22, r18
    51fa:	47 e0       	ldi	r20, 0x07	; 7
    51fc:	50 e0       	ldi	r21, 0x00	; 0
    51fe:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>

	strcpy(Clints[6].UserName, "Ragab");
    5202:	8d ef       	ldi	r24, 0xFD	; 253
    5204:	92 e0       	ldi	r25, 0x02	; 2
    5206:	20 e8       	ldi	r18, 0x80	; 128
    5208:	31 e0       	ldi	r19, 0x01	; 1
    520a:	b9 01       	movw	r22, r18
    520c:	46 e0       	ldi	r20, 0x06	; 6
    520e:	50 e0       	ldi	r21, 0x00	; 0
    5210:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>
	strcpy(Clints[6].Password, "252002");
    5214:	81 e1       	ldi	r24, 0x11	; 17
    5216:	93 e0       	ldi	r25, 0x03	; 3
    5218:	26 e8       	ldi	r18, 0x86	; 134
    521a:	31 e0       	ldi	r19, 0x01	; 1
    521c:	b9 01       	movw	r22, r18
    521e:	47 e0       	ldi	r20, 0x07	; 7
    5220:	50 e0       	ldi	r21, 0x00	; 0
    5222:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <memcpy>

}
    5226:	cf 91       	pop	r28
    5228:	df 91       	pop	r29
    522a:	08 95       	ret

0000522c <System>:

void System (void)
{
    522c:	df 93       	push	r29
    522e:	cf 93       	push	r28
    5230:	0f 92       	push	r0
    5232:	cd b7       	in	r28, 0x3d	; 61
    5234:	de b7       	in	r29, 0x3e	; 62

	u8 Receiver = 0;
    5236:	19 82       	std	Y+1, r1	; 0x01
	UART_voidTransmitSrting("Press 1 To Open Led 1");
    5238:	8d e8       	ldi	r24, 0x8D	; 141
    523a:	91 e0       	ldi	r25, 0x01	; 1
    523c:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
	UART_voidTransmitSrting("\n\r");
    5240:	80 e6       	ldi	r24, 0x60	; 96
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
	UART_voidTransmitSrting("Press 2 To Open Led 2");
    5248:	83 ea       	ldi	r24, 0xA3	; 163
    524a:	91 e0       	ldi	r25, 0x01	; 1
    524c:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
	UART_voidTransmitSrting("\n\r");
    5250:	80 e6       	ldi	r24, 0x60	; 96
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_voidTransmitSrting>
	while(1)
	{
		Receiver = UART_voidReceiveData();
    5258:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <UART_voidReceiveData>
    525c:	89 83       	std	Y+1, r24	; 0x01
		if(Receiver == '1')
    525e:	89 81       	ldd	r24, Y+1	; 0x01
    5260:	81 33       	cpi	r24, 0x31	; 49
    5262:	59 f4       	brne	.+22     	; 0x527a <System+0x4e>
		{
			DIO_voidSetPinValue(PORTA, PIN1, HIGH);
    5264:	80 e0       	ldi	r24, 0x00	; 0
    5266:	61 e0       	ldi	r22, 0x01	; 1
    5268:	41 e0       	ldi	r20, 0x01	; 1
    526a:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTA, PIN2, LOW);
    526e:	80 e0       	ldi	r24, 0x00	; 0
    5270:	62 e0       	ldi	r22, 0x02	; 2
    5272:	40 e0       	ldi	r20, 0x00	; 0
    5274:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    5278:	ef cf       	rjmp	.-34     	; 0x5258 <System+0x2c>

		}
		else if(Receiver == '2')
    527a:	89 81       	ldd	r24, Y+1	; 0x01
    527c:	82 33       	cpi	r24, 0x32	; 50
    527e:	61 f7       	brne	.-40     	; 0x5258 <System+0x2c>
		{
			DIO_voidSetPinValue(PORTA, PIN2, HIGH);
    5280:	80 e0       	ldi	r24, 0x00	; 0
    5282:	62 e0       	ldi	r22, 0x02	; 2
    5284:	41 e0       	ldi	r20, 0x01	; 1
    5286:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTA, PIN1, LOW);
    528a:	80 e0       	ldi	r24, 0x00	; 0
    528c:	61 e0       	ldi	r22, 0x01	; 1
    528e:	40 e0       	ldi	r20, 0x00	; 0
    5290:	0e 94 95 11 	call	0x232a	; 0x232a <DIO_voidSetPinValue>
    5294:	e1 cf       	rjmp	.-62     	; 0x5258 <System+0x2c>

00005296 <__mulsi3>:
    5296:	62 9f       	mul	r22, r18
    5298:	d0 01       	movw	r26, r0
    529a:	73 9f       	mul	r23, r19
    529c:	f0 01       	movw	r30, r0
    529e:	82 9f       	mul	r24, r18
    52a0:	e0 0d       	add	r30, r0
    52a2:	f1 1d       	adc	r31, r1
    52a4:	64 9f       	mul	r22, r20
    52a6:	e0 0d       	add	r30, r0
    52a8:	f1 1d       	adc	r31, r1
    52aa:	92 9f       	mul	r25, r18
    52ac:	f0 0d       	add	r31, r0
    52ae:	83 9f       	mul	r24, r19
    52b0:	f0 0d       	add	r31, r0
    52b2:	74 9f       	mul	r23, r20
    52b4:	f0 0d       	add	r31, r0
    52b6:	65 9f       	mul	r22, r21
    52b8:	f0 0d       	add	r31, r0
    52ba:	99 27       	eor	r25, r25
    52bc:	72 9f       	mul	r23, r18
    52be:	b0 0d       	add	r27, r0
    52c0:	e1 1d       	adc	r30, r1
    52c2:	f9 1f       	adc	r31, r25
    52c4:	63 9f       	mul	r22, r19
    52c6:	b0 0d       	add	r27, r0
    52c8:	e1 1d       	adc	r30, r1
    52ca:	f9 1f       	adc	r31, r25
    52cc:	bd 01       	movw	r22, r26
    52ce:	cf 01       	movw	r24, r30
    52d0:	11 24       	eor	r1, r1
    52d2:	08 95       	ret

000052d4 <__udivmodhi4>:
    52d4:	aa 1b       	sub	r26, r26
    52d6:	bb 1b       	sub	r27, r27
    52d8:	51 e1       	ldi	r21, 0x11	; 17
    52da:	07 c0       	rjmp	.+14     	; 0x52ea <__udivmodhi4_ep>

000052dc <__udivmodhi4_loop>:
    52dc:	aa 1f       	adc	r26, r26
    52de:	bb 1f       	adc	r27, r27
    52e0:	a6 17       	cp	r26, r22
    52e2:	b7 07       	cpc	r27, r23
    52e4:	10 f0       	brcs	.+4      	; 0x52ea <__udivmodhi4_ep>
    52e6:	a6 1b       	sub	r26, r22
    52e8:	b7 0b       	sbc	r27, r23

000052ea <__udivmodhi4_ep>:
    52ea:	88 1f       	adc	r24, r24
    52ec:	99 1f       	adc	r25, r25
    52ee:	5a 95       	dec	r21
    52f0:	a9 f7       	brne	.-22     	; 0x52dc <__udivmodhi4_loop>
    52f2:	80 95       	com	r24
    52f4:	90 95       	com	r25
    52f6:	bc 01       	movw	r22, r24
    52f8:	cd 01       	movw	r24, r26
    52fa:	08 95       	ret

000052fc <__divmodsi4>:
    52fc:	97 fb       	bst	r25, 7
    52fe:	09 2e       	mov	r0, r25
    5300:	05 26       	eor	r0, r21
    5302:	0e d0       	rcall	.+28     	; 0x5320 <__divmodsi4_neg1>
    5304:	57 fd       	sbrc	r21, 7
    5306:	04 d0       	rcall	.+8      	; 0x5310 <__divmodsi4_neg2>
    5308:	14 d0       	rcall	.+40     	; 0x5332 <__udivmodsi4>
    530a:	0a d0       	rcall	.+20     	; 0x5320 <__divmodsi4_neg1>
    530c:	00 1c       	adc	r0, r0
    530e:	38 f4       	brcc	.+14     	; 0x531e <__divmodsi4_exit>

00005310 <__divmodsi4_neg2>:
    5310:	50 95       	com	r21
    5312:	40 95       	com	r20
    5314:	30 95       	com	r19
    5316:	21 95       	neg	r18
    5318:	3f 4f       	sbci	r19, 0xFF	; 255
    531a:	4f 4f       	sbci	r20, 0xFF	; 255
    531c:	5f 4f       	sbci	r21, 0xFF	; 255

0000531e <__divmodsi4_exit>:
    531e:	08 95       	ret

00005320 <__divmodsi4_neg1>:
    5320:	f6 f7       	brtc	.-4      	; 0x531e <__divmodsi4_exit>
    5322:	90 95       	com	r25
    5324:	80 95       	com	r24
    5326:	70 95       	com	r23
    5328:	61 95       	neg	r22
    532a:	7f 4f       	sbci	r23, 0xFF	; 255
    532c:	8f 4f       	sbci	r24, 0xFF	; 255
    532e:	9f 4f       	sbci	r25, 0xFF	; 255
    5330:	08 95       	ret

00005332 <__udivmodsi4>:
    5332:	a1 e2       	ldi	r26, 0x21	; 33
    5334:	1a 2e       	mov	r1, r26
    5336:	aa 1b       	sub	r26, r26
    5338:	bb 1b       	sub	r27, r27
    533a:	fd 01       	movw	r30, r26
    533c:	0d c0       	rjmp	.+26     	; 0x5358 <__udivmodsi4_ep>

0000533e <__udivmodsi4_loop>:
    533e:	aa 1f       	adc	r26, r26
    5340:	bb 1f       	adc	r27, r27
    5342:	ee 1f       	adc	r30, r30
    5344:	ff 1f       	adc	r31, r31
    5346:	a2 17       	cp	r26, r18
    5348:	b3 07       	cpc	r27, r19
    534a:	e4 07       	cpc	r30, r20
    534c:	f5 07       	cpc	r31, r21
    534e:	20 f0       	brcs	.+8      	; 0x5358 <__udivmodsi4_ep>
    5350:	a2 1b       	sub	r26, r18
    5352:	b3 0b       	sbc	r27, r19
    5354:	e4 0b       	sbc	r30, r20
    5356:	f5 0b       	sbc	r31, r21

00005358 <__udivmodsi4_ep>:
    5358:	66 1f       	adc	r22, r22
    535a:	77 1f       	adc	r23, r23
    535c:	88 1f       	adc	r24, r24
    535e:	99 1f       	adc	r25, r25
    5360:	1a 94       	dec	r1
    5362:	69 f7       	brne	.-38     	; 0x533e <__udivmodsi4_loop>
    5364:	60 95       	com	r22
    5366:	70 95       	com	r23
    5368:	80 95       	com	r24
    536a:	90 95       	com	r25
    536c:	9b 01       	movw	r18, r22
    536e:	ac 01       	movw	r20, r24
    5370:	bd 01       	movw	r22, r26
    5372:	cf 01       	movw	r24, r30
    5374:	08 95       	ret

00005376 <__prologue_saves__>:
    5376:	2f 92       	push	r2
    5378:	3f 92       	push	r3
    537a:	4f 92       	push	r4
    537c:	5f 92       	push	r5
    537e:	6f 92       	push	r6
    5380:	7f 92       	push	r7
    5382:	8f 92       	push	r8
    5384:	9f 92       	push	r9
    5386:	af 92       	push	r10
    5388:	bf 92       	push	r11
    538a:	cf 92       	push	r12
    538c:	df 92       	push	r13
    538e:	ef 92       	push	r14
    5390:	ff 92       	push	r15
    5392:	0f 93       	push	r16
    5394:	1f 93       	push	r17
    5396:	cf 93       	push	r28
    5398:	df 93       	push	r29
    539a:	cd b7       	in	r28, 0x3d	; 61
    539c:	de b7       	in	r29, 0x3e	; 62
    539e:	ca 1b       	sub	r28, r26
    53a0:	db 0b       	sbc	r29, r27
    53a2:	0f b6       	in	r0, 0x3f	; 63
    53a4:	f8 94       	cli
    53a6:	de bf       	out	0x3e, r29	; 62
    53a8:	0f be       	out	0x3f, r0	; 63
    53aa:	cd bf       	out	0x3d, r28	; 61
    53ac:	09 94       	ijmp

000053ae <__epilogue_restores__>:
    53ae:	2a 88       	ldd	r2, Y+18	; 0x12
    53b0:	39 88       	ldd	r3, Y+17	; 0x11
    53b2:	48 88       	ldd	r4, Y+16	; 0x10
    53b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    53b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    53b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    53ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    53bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    53be:	aa 84       	ldd	r10, Y+10	; 0x0a
    53c0:	b9 84       	ldd	r11, Y+9	; 0x09
    53c2:	c8 84       	ldd	r12, Y+8	; 0x08
    53c4:	df 80       	ldd	r13, Y+7	; 0x07
    53c6:	ee 80       	ldd	r14, Y+6	; 0x06
    53c8:	fd 80       	ldd	r15, Y+5	; 0x05
    53ca:	0c 81       	ldd	r16, Y+4	; 0x04
    53cc:	1b 81       	ldd	r17, Y+3	; 0x03
    53ce:	aa 81       	ldd	r26, Y+2	; 0x02
    53d0:	b9 81       	ldd	r27, Y+1	; 0x01
    53d2:	ce 0f       	add	r28, r30
    53d4:	d1 1d       	adc	r29, r1
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	f8 94       	cli
    53da:	de bf       	out	0x3e, r29	; 62
    53dc:	0f be       	out	0x3f, r0	; 63
    53de:	cd bf       	out	0x3d, r28	; 61
    53e0:	ed 01       	movw	r28, r26
    53e2:	08 95       	ret

000053e4 <memcpy>:
    53e4:	fb 01       	movw	r30, r22
    53e6:	dc 01       	movw	r26, r24
    53e8:	02 c0       	rjmp	.+4      	; 0x53ee <memcpy+0xa>
    53ea:	01 90       	ld	r0, Z+
    53ec:	0d 92       	st	X+, r0
    53ee:	41 50       	subi	r20, 0x01	; 1
    53f0:	50 40       	sbci	r21, 0x00	; 0
    53f2:	d8 f7       	brcc	.-10     	; 0x53ea <memcpy+0x6>
    53f4:	08 95       	ret

000053f6 <strncmp>:
    53f6:	fb 01       	movw	r30, r22
    53f8:	dc 01       	movw	r26, r24
    53fa:	41 50       	subi	r20, 0x01	; 1
    53fc:	50 40       	sbci	r21, 0x00	; 0
    53fe:	30 f0       	brcs	.+12     	; 0x540c <strncmp+0x16>
    5400:	8d 91       	ld	r24, X+
    5402:	01 90       	ld	r0, Z+
    5404:	80 19       	sub	r24, r0
    5406:	19 f4       	brne	.+6      	; 0x540e <strncmp+0x18>
    5408:	00 20       	and	r0, r0
    540a:	b9 f7       	brne	.-18     	; 0x53fa <strncmp+0x4>
    540c:	88 1b       	sub	r24, r24
    540e:	99 0b       	sbc	r25, r25
    5410:	08 95       	ret

00005412 <_exit>:
    5412:	f8 94       	cli

00005414 <__stop_program>:
    5414:	ff cf       	rjmp	.-2      	; 0x5414 <__stop_program>
